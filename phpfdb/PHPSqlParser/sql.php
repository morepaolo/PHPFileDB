<?php # vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */


/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
class ParseyyStackEntry {
  var /* int */ $stateno;       /* The state-number */
  var /* int */ $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  var $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

/* The state of the parser is completely contained in an instance of
** the following structure */
class ParseParser {
  var /* int */ $yyidx = -1;                    /* Index of top element in stack */
  var /* int */ $yyerrcnt;                 /* Shifts left before out of the error */
  // ParseARG_SDECL                /* A place to hold %extra_argument */
  var /* yyStackEntry */ $yystack = array(
  	/* of YYSTACKDEPTH elements */
	);  /* The parser's stack */

  var $yyTraceFILE = null;
  var $yyTracePrompt = null;



/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
  const TK_SEMI =  1;
  const TK_NAME =  2;
  const TK_INTNUM =  3;
  const TK_APPROXNUM =  4;
  const TK_DEADTOKEN =  5;
  const TK_COMMA =  6;
  const TK_CHARACTER =  7;
  const TK_SET =  8;
  const TK_CHAR =  9;
  const TK_LPAR = 10;
  const TK_RPAR = 11;
  const TK_VARYING = 12;
  const TK_VARCHAR = 13;
  const TK_NATIONAL = 14;
  const TK_NCHAR = 15;
  const TK_BLOB = 16;
  const TK_BIT = 17;
  const TK_NUMERIC = 18;
  const TK_DECIMAL = 19;
  const TK_DEC = 20;
  const TK_INTEGER = 21;
  const TK_SMALLINT = 22;
  const TK_FLOAT = 23;
  const TK_REAL = 24;
  const TK_DOUBLE = 25;
  const TK_PRECISION = 26;
  const TK_DATE = 27;
  const TK_DATETIME = 28;
  const TK_TIME = 29;
  const TK_TIMESTAMP = 30;
  const TK_WITH = 31;
  const TK_ZONE = 32;
  const TK_INTERVAL = 33;
  const TK_TO = 34;
  const TK_YEAR = 35;
  const TK_MONTH = 36;
  const TK_DAY = 37;
  const TK_HOUR = 38;
  const TK_MINUTE = 39;
  const TK_SECOND = 40;
  const TK_PERIOD = 41;
  const TK_DEFAULT = 42;
  const TK_USER = 43;
  const TK_CURRENT_USER = 44;
  const TK_SESSION_USER = 45;
  const TK_SYSTEM_USER = 46;
  const TK_NULL = 47;
  const TK_PLUS_SIGN = 48;
  const TK_MINUS_SIGN = 49;
  const TK_CONSTRAINT = 50;
  const TK_NOT = 51;
  const TK_UNIQUE = 52;
  const TK_AUTO_INCREMENT = 53;
  const TK_PRIMARY = 54;
  const TK_KEY = 55;
  const TK_REFERENCES = 56;
  const TK_MATCH = 57;
  const TK_FULL = 58;
  const TK_PARTIAL = 59;
  const TK_ON = 60;
  const TK_UPDATE = 61;
  const TK_DELETE = 62;
  const TK_CASCADE = 63;
  const TK_NO = 64;
  const TK_ACTION = 65;
  const TK_CHECK = 66;
  const TK_OR = 67;
  const TK_AND = 68;
  const TK_IS = 69;
  const TK_ASTERISK = 70;
  const TK_SOLIDUS = 71;
  const TK_STRING = 72;
  const TK_COUNT = 73;
  const TK_MAX = 74;
  const TK_MIN = 75;
  const TK_DISTINCT = 76;
  const TK_ALL = 77;
  const TK_UNION = 78;
  const TK_EXCEPT = 79;
  const TK_INTERSECT = 80;
  const TK_SELECT = 81;
  const TK_AS = 82;
  const TK_LIMIT = 83;
  const TK_OFFSET = 84;
  const TK_ORDER = 85;
  const TK_BY = 86;
  const TK_ASC = 87;
  const TK_DESC = 88;
  const TK_FROM = 89;
  const TK_CROSS = 90;
  const TK_JOIN = 91;
  const TK_NATURAL = 92;
  const TK_INNER = 93;
  const TK_OUTER = 94;
  const TK_LEFT = 95;
  const TK_RIGHT = 96;
  const TK_USING = 97;
  const TK_WHERE = 98;
  const TK_GROUP = 99;
  const TK_HAVING = 100;
  const TK_VALUES = 101;
  const TK_TABLE = 102;
  const TK_CORRESPONDING = 103;
  const TK_NULLX = 104;
  const TK_TRUE = 105;
  const TK_FALSE = 106;
  const TK_UNKNOWN = 107;
  const TK_OP_EQ = 108;
  const TK_OP_GTLT = 109;
  const TK_OP_LT = 110;
  const TK_OP_GT = 111;
  const TK_OP_LTEQ = 112;
  const TK_OP_GTEQ = 113;
  const TK_DEFERRABLE = 114;
  const TK_INITIALLY = 115;
  const TK_DEFERRED = 116;
  const TK_IMMEDIATE = 117;
  const TK_CREATE = 118;
  const TK_RESTRICT = 119;
  const TK_DROP = 120;
  const TK_IF = 121;
  const TK_EXISTS = 122;
  const TK_INSERT = 123;
  const TK_INTO = 124;
  const TK_ABS = 125;
  const TK_ACOS = 126;
  const TK_ASIN = 127;
  const TK_ATAN = 128;
  const TK_ATAN2 = 129;
  const TK_CEIL = 130;
  const TK_COS = 131;
  const TK_COT = 132;
  const TK_CRC32 = 133;
  const TK_DEGREES = 134;
  const TK_EXP = 135;
  const TK_FLOOR = 136;
  const TK_FORMAT = 137;
  const TK_LN = 138;
  const TK_LOG = 139;
  const TK_LOG2 = 140;
  const TK_LOG10 = 141;
  const TK_MOD = 142;
  const TK_PI = 143;
  const TK_POW = 144;
  const TK_RADIANS = 145;
  const TK_ROUND = 146;
  const TK_SIGN = 147;
  const TK_SIN = 148;
  const TK_SQRT = 149;
  const TK_TAN = 150;
  const TK_TRUNCATE = 151;
  const TK_WEEKDAY = 152;
  const TK_WEEKOFYEAR = 153;
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
  const YYNOCODE = 322;
#define ParseTOKENTYPE void*
  const YYSTACKDEPTH = 100;
  const YYNSTATE = 736;
  const YYNRULE = 408;
  const YYERRORSYMBOL = 154;

  /* QUESTE LE HO AGGIUNTE IO */
  const   YYWILDCARD = 0;
  public $operations_list= Array();
  /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
  var $YY_NO_ACTION;
  var $YY_ACCEPT_ACTION;
  var $YY_ERROR_ACTION;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static $yy_action = array(
 /*     0 */   472,  403,  697,  436,  453,  271,  434,  270,  435,  456,
 /*    10 */   438,  256,  431,  374,  131,  639,  431,  377,  257,  260,
 /*    20 */   670,  261,  391,  393,  395,  683,  684,  397,  686,  399,
 /*    30 */   100,  688,  689,  194,  195,  436,  699,  120,  705,  457,
 /*    40 */   435,  587,  431,  443,  203,  437,  119,  454,   73,  369,
 /*    50 */   653,  654,  655,  656,  657,  658,   90,  673,  674,  114,
 /*    60 */   700,  701,  702,  703,  704,  409,  246,  323,  554,  546,
 /*    70 */   324,  113,  553,  555,  556,  137,  431,  248,  244,  536,
 /*    80 */   491,  187,  243,  492,  493,  494,  445,  447,  448,  326,
 /*    90 */   450,  451,  452,  272,  460,  276,  125,  465,  245,  241,
 /*   100 */   486,  237,  284,  285,  359,  488,  623,  471,  473,  474,
 /*   110 */   472,  207,  208,  436,  453,  271,  434,  270,  435,  456,
 /*   120 */   438,  550,  551,  552,  189,  609,  116,  436,  482,  484,
 /*   130 */   485,  457,  435,   94,  694,  250,  603,  605,  606,  436,
 /*   140 */   283,  254,  542,  457,  435,   94,  431,  586,  604,  605,
 /*   150 */   606,  431,  431,  443,  437,  607,  126,  454,   73,   70,
 /*   160 */  1145,  424,  197,    9,  426,  427,  428,  204,  252,  114,
 /*   170 */   558,  559,  560,  561,  562,  563,  246,  323,  554,  546,
 /*   180 */   324,   19,  553,  555,  556,  137,  490,  248,  244,  536,
 /*   190 */   491,  187,  243,  492,  493,  494,  445,  447,  448,  326,
 /*   200 */   450,  451,  452,  272,  460,  276,  608,  465,  245,  241,
 /*   210 */   328,  240,  284,  285,  580,  488,  251,  471,  473,  474,
 /*   220 */   431,  432,  433,  437,  431,  432,  433,  437,    2,  322,
 /*   230 */   186,  333,   69,  431,  189,  130,  116,  119,  482,  484,
 /*   240 */   485,   15,  436,  453,  271,  434,  270,  435,  456,  438,
 /*   250 */    13,   97,   65,  321,  317,  314,  315,  316,  318,  700,
 /*   260 */   701,  702,  703,  704,  405,  431,  441,  442,  437,   12,
 /*   270 */   441,  442,  942,   71,  425,  197, 1047,  426,  427,  428,
 /*   280 */   132, 1047,  443,  617,  618,  619,  454,   73,  429,  430,
 /*   290 */   455,  273,  462,  463,  455,  273,  462,  463,  464,  186,
 /*   300 */   436,  625,  441,  442,  457,  435,  732,  600,  601,  602,
 /*   310 */   713,  432,  433,  125,  720,  721,  722,  723,  105,   13,
 /*   320 */    97,  242,  539,  712,  494,  445,  447,  448,  449,  450,
 /*   330 */   451,  452,  272,  460,  276,  436,  465,  466,  548,  439,
 /*   340 */   435,  649,  440,  286,  287,  288,  289,  290,  291,  292,
 /*   350 */   293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
 /*   360 */   303,  304,  306,  307,  308,  309,  310,  311,  312,  313,
 /*   370 */   319,  320,  431,  432,  433,  437,  400,  549,  693, 1012,
 /*   380 */    70,  640,  641,  647,  648,  193,  698,  404,  631,  708,
 /*   390 */   265,  436,  453,  271,  434,  270,  435,  456,  438,  130,
 /*   400 */   283,  541,  542,  543,  544,  321,  317,  314,  315,  316,
 /*   410 */   318,  283, 1012,  542, 1012,   14, 1012, 1012,  441,  442,
 /*   420 */   600,  601,  602,  713,  432,  433,  716,  720,  721,  722,
 /*   430 */   723,  443,  104,  415,  436,  454,   73,  327,  457,  435,
 /*   440 */   477,  133,  455,  273,  462,  463,  632,  464,  592,  593,
 /*   450 */   496,  186,  186,  436,  196,  734,  422,  457,  435,  732,
 /*   460 */   633,  634,  401,  134,  642,  643,  644,  645,  646,  441,
 /*   470 */   442,   13,   97,  444,  445,  447,  448,  449,  450,  451,
 /*   480 */   452,  272,  460,  276,  401,  465,  466,  441,  442,  356,
 /*   490 */   564,  413,  331,  455,  417,  286,  287,  288,  289,  290,
 /*   500 */   291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
 /*   510 */   301,  302,  303,  304,  306,  307,  308,  309,  310,  311,
 /*   520 */   312,  313,  319,  320,  431,  432,  433,  437,  431,  432,
 /*   530 */   433,  437,    1,   66,   67,  436,   69,  271,  434,  439,
 /*   540 */   435,  210,  438,  372, 1012,  431,    4, 1006,  437,  181,
 /*   550 */   436,   21,  574,   70,  457,  435,  458,  321,  317,  314,
 /*   560 */   315,  316,  318,  591, 1012,  613,  614,  650,  332,  628,
 /*   570 */   441,  442,  571,   12,  627,  443,  283, 1012,  542, 1012,
 /*   580 */   436, 1012, 1012,  330,  457,  435,  477,  569,  206,  572,
 /*   590 */   573,  365,  497,  733,  455,  273,  462,  463,  455,  273,
 /*   600 */   462,  463,  436,  550,  551,  552,  475,  435,  727,  422,
 /*   610 */   360,  620,  621,  361,  436,   95,  232,  436,  475,  435,
 /*   620 */    76,  457,  435,  478,  186,  368,  539, 1006,  436,  441,
 /*   630 */   442,  436,  457,  435,  477,  475,  435,  436,  336,  349,
 /*   640 */   831,  457,  435,  588,   13,   97,  334,  286,  287,  288,
 /*   650 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*   660 */   299,  300,  301,  302,  303,  304,  306,  307,  308,  309,
 /*   670 */   310,  311,  312,  313,  319,  320,  431,  432,  433,  437,
 /*   680 */   184,  183,  498,  690,   69,  366,  367,  436,  453,  271,
 /*   690 */   434,  270,  435,  456,  438,   26,  278,  500,   28,  436,
 /*   700 */   499,  271,  434,  439,  435,  695,  438,  501,  278,  321,
 /*   710 */   317,  314,  315,  316,  318,   92,  731,  348,  337,  441,
 /*   720 */   442,  730,  441,  442,  476,  281,  258,  443,  259,  735,
 /*   730 */   101,  454,   73,  347,  441,  442,  481,  441,  442,  443,
 /*   740 */   441,  442,   37,  464,  441,  442,  455,  273,  462,  463,
 /*   750 */   329,  323,  554,  546,  324,  534,  553,  555,  556,  137,
 /*   760 */   502,  489,  581,  536,  491,  187,  243,  492,  493,  494,
 /*   770 */   445,  447,  448,  326,  450,  451,  452,  272,  460,  276,
 /*   780 */     6,  465,  466,  253,  441,  442,  472,  714,   44,  436,
 /*   790 */   453,  271,  434,  270,  435,  456,  438,  441,  442,  286,
 /*   800 */   287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
 /*   810 */   297,  298,  299,  300,  301,  302,  303,  304,  306,  307,
 /*   820 */   308,  309,  310,  311,  312,  313,  319,  320,  200,  443,
 /*   830 */   441,  442,  431,  454,   73,  437,   16,  353,  626,  363,
 /*   840 */    71,  201,  358,  715,  214,  114,  380,  472,  951,  951,
 /*   850 */   436,  566,  271,  434,  267,  435,  477,  438,    5,  951,
 /*   860 */    40,  202,  636,  535,  244,  511,  491,  187,  243,  492,
 /*   870 */   493,  494,  445,  447,  448,  449,  450,  451,  452,  272,
 /*   880 */   460,  276,  350,  465,  245,  241,  486,  237,  284,  285,
 /*   890 */   443,  488,  589,  471,  473,  474,  431,  432,  433,  437,
 /*   900 */  1046, 1046,  441,  442,    1,  610,  115,   10,  418,  107,
 /*   910 */   189, 1046,  116,  252,  482,  484,  485,  431,   10,   89,
 /*   920 */   437,  127,  487,   74,   75,   70,  951,  951, 1041,  321,
 /*   930 */   317,  314,  315,  316,  318,  436,  216,  612,  383,  457,
 /*   940 */   435,  477,  441,  442,  615,  483,  241,  328,  240,  284,
 /*   950 */   285,  218,  488,  386,  471,  473,  474,  436,  192,  271,
 /*   960 */   434,  439,  435,   46,  438,  624,  455,  273,  462,  463,
 /*   970 */   220,  189,  389,  116,  503,  482,  484,  485,  431, 1046,
 /*   980 */  1046,  437,  128,  223,  362,  364,   70,  630,  675,  951,
 /*   990 */   951, 1041,   77,  279,  652,  225,  186,  443,  539,  651,
 /*  1000 */   679,  431,  227,  419,  437,  441,  442,  681,  467,   70,
 /*  1010 */   758,  441,  442,  718,  660,  758,   13,   97,  334,  286,
 /*  1020 */   287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
 /*  1030 */   297,  298,  299,  300,  301,  302,  303,  304,  306,  307,
 /*  1040 */   308,  309,  310,  311,  312,  313,  319,  320,  431,  432,
 /*  1050 */   433,  437,  371,   79,  100,  373,    3,  186,  436,  280,
 /*  1060 */   271,  434,  439,  435,  376,  438,  378,  436,  504,  271,
 /*  1070 */   434,  439,  435,  379,  438,   74,   75,   13,   97,  334,
 /*  1080 */   186,  321,  317,  314,  315,  316,  318,  678,   49,  431,
 /*  1090 */   432,  433,  437,  519,  441,  442,  505,   69,  443,  381,
 /*  1100 */    13,   97,  334,  185,  506,  441,  442,  638,  436,  507,
 /*  1110 */   271,  434,  439,  435,  357,  438,  637,  382,  455,  273,
 /*  1120 */   462,  463,  321,  317,  314,  315,  316,  318,  508,  384,
 /*  1130 */   441,  442,  509,  441,  442,  441,  442,  385,  410,  751,
 /*  1140 */   387,  441,  442,  710,  751,  388,  441,  442,  443,  436,
 /*  1150 */   539,  390,  677,  457,  435,  477,  262,  598,  392,  455,
 /*  1160 */   273,  462,  463,  263,  717,  441,  442,  510,  394,  441,
 /*  1170 */   442,  286,  287,  288,  289,  290,  291,  292,  293,  294,
 /*  1180 */   295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
 /*  1190 */   306,  307,  308,  309,  310,  311,  312,  313,  319,  320,
 /*  1200 */   396,  264,  398,  401,  441,  442,  691,  279,  512,  696,
 /*  1210 */   513,  707,  286,  287,  288,  289,  290,  291,  292,  293,
 /*  1220 */   294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
 /*  1230 */   304,  306,  307,  308,  309,  310,  311,  312,  313,  319,
 /*  1240 */   320,  431,  432,  433,  437,  441,  442,  441,  442,   69,
 /*  1250 */   406,   55,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  1260 */   407,  514,  709,  266,  515,  411,  517,  414,  518,   96,
 /*  1270 */   752,    8,  122,  282,  321,  317,  314,  315,  316,  318,
 /*  1280 */   274,  123,  724,  275,  459,  188,   78,  441,  442,  108,
 /*  1290 */   124,  479,  443,  441,  442,  109,  454,   73,  441,  442,
 /*  1300 */   480,  441,  442,  441,  442,  441,  442,   87,  464,   22,
 /*  1310 */  1040,  455,  273,  462,  463,  352,  323,  554,  546,  324,
 /*  1320 */    23,  553,  555,  556,  137,  520,  489,   24,  536,  491,
 /*  1330 */   187,  243,  492,  493,  494,  445,  447,  448,  326,  450,
 /*  1340 */   451,  452,  272,  460,  276,   25,  465,  466,   27,   29,
 /*  1350 */    30,   31,   32,  436,  453,  271,  434,  270,  435,  456,
 /*  1360 */   438,   33,  441,  442,  286,  287,  288,  289,  290,  291,
 /*  1370 */   292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
 /*  1380 */   302,  303,  304,  306,  307,  308,  309,  310,  311,  312,
 /*  1390 */   313,  319,  320,  443, 1041, 1041,   34,  454,   73,   35,
 /*  1400 */    36,   38,   39,   41,   88, 1041,   42,   43,  305,  464,
 /*  1410 */   516,   45,   47,   48,   50,   11,  355,  323,  554,  546,
 /*  1420 */   324,  521,  553,  555,  556,  137,  141,  489,  522,  536,
 /*  1430 */   491,  187,  243,  492,  493,  494,  445,  447,  448,  326,
 /*  1440 */   450,  451,  452,  272,  460,  276,  523,  465,  466,  524,
 /*  1450 */   436,  453,  271,  434,  270,  435,  456,  438,  441,  442,
 /*  1460 */   525,  567,  526,  565,  527,  441,  442,  528,   51,  247,
 /*  1470 */   529,  568,  530, 1041, 1041,   52,   53,   54,   56,   57,
 /*  1480 */    10,   58,  570,  441,  442,   59,  441,  442,   60,   61,
 /*  1490 */   443,  110,   62,  335,  454,   73,   63,  441,  442,  441,
 /*  1500 */   442,  441,  442,  111,  441,  442,  464,  441,  442,  441,
 /*  1510 */   442,  576,  579,  255,  323,  554,  546,  324,  531,  553,
 /*  1520 */   555,  556,  137,  249,  489,  532,  536,  491,  187,  243,
 /*  1530 */   492,  493,  494,  445,  447,  448,  326,  450,  451,  452,
 /*  1540 */   272,  460,  276,  533,  465,  466,  436,  453,  271,  434,
 /*  1550 */   270,  435,  456,  438,  121,  441,  442,  582,  583,   17,
 /*  1560 */    91,   99,  441,  442,   20,   93,   98,  622,  611,  205,
 /*  1570 */   616,  183,  184,  629,  112,  370,  635,    7,  209,  211,
 /*  1580 */   441,  442,  659,  661,  212,  375,  443,  662,  213,  215,
 /*  1590 */   454,   73,  663,  664,  665,  666,  217,  129,  692,  667,
 /*  1600 */   668,  219,  464,  669,  671,  221,  687,  672,  676,  416,
 /*  1610 */   323,  554,  546,  324,  222,  553,  555,  556,  137,  224,
 /*  1620 */   489,  680,  536,  491,  187,  243,  492,  493,  494,  445,
 /*  1630 */   447,  448,  326,  450,  451,  452,  272,  460,  276,  226,
 /*  1640 */   465,  466,  682,  228,  402,  685,  229,  230,  231,  235,
 /*  1650 */   706,  408,  832,  436,  453,  271,  434,  270,  435,  456,
 /*  1660 */   438,  233,  234,  719,  412,  711,  102,  103,   72,  106,
 /*  1670 */    18,  731,  731,  731,  731,  731,  726,  731,  731,  731,
 /*  1680 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  1690 */   731,  731,  731,  443,  731,  731,  731,  454,   73,  731,
 /*  1700 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  464,
 /*  1710 */   731,  731,  731,  731,  731,  731,  423,  323,  554,  546,
 /*  1720 */   324,  731,  553,  555,  556,  137,  731,  489,  731,  536,
 /*  1730 */   491,  187,  243,  492,  493,  494,  445,  447,  448,  326,
 /*  1740 */   450,  451,  452,  272,  460,  276,  731,  465,  466,  436,
 /*  1750 */   453,  271,  434,  270,  435,  456,  438,  731,  731,  731,
 /*  1760 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  1770 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  1780 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  443,
 /*  1790 */   731,  731,  731,  454,   73,  731,  731,  731,  731,  731,
 /*  1800 */   731,  731,  731,  731,  731,  464,  731,  731,  731,  731,
 /*  1810 */   731,  731,  731,  325,  554,  546,  324,  731,  553,  555,
 /*  1820 */   556,  137,  731,  489,  731,  536,  491,  187,  243,  492,
 /*  1830 */   493,  494,  445,  447,  448,  326,  450,  451,  452,  272,
 /*  1840 */   460,  276,  731,  465,  466,  731,  731,  731,  731,  731,
 /*  1850 */   731,  731,  731,  731,  731,  731,  436,  453,  271,  434,
 /*  1860 */   270,  435,  456,  438,  731,  731,  731,  731,  731,  731,
 /*  1870 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  1880 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  1890 */   731,  731,  731,  731,  731,  731,  443,  731,  731,  731,
 /*  1900 */   454,   73,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  1910 */   731,  731,  464,  436,  453,  271,  434,  270,  435,  456,
 /*  1920 */   438,  545,  546,  324,  731,  553,  555,  556,  137,  731,
 /*  1930 */   489,  731,  536,  491,  187,  243,  492,  493,  494,  445,
 /*  1940 */   447,  448,  326,  450,  451,  452,  272,  460,  276,  731,
 /*  1950 */   465,  466,  731,  443,  731,  731,  731,  454,   73,  731,
 /*  1960 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  464,
 /*  1970 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  547,
 /*  1980 */   324,  731,  553,  555,  556,  137,  731,  489,  731,  536,
 /*  1990 */   491,  187,  243,  492,  493,  494,  445,  447,  448,  326,
 /*  2000 */   450,  451,  452,  272,  460,  276,  731,  465,  466,  731,
 /*  2010 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  436,
 /*  2020 */   453,  271,  434,  270,  435,  456,  438,  731,  731,  731,
 /*  2030 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2040 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2050 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  443,
 /*  2060 */   731,  731,  731,  454,   73,  731,  731,  731,  731,  731,
 /*  2070 */   731,  731,  731,  731,  731,  464,  731,  731,  731,  731,
 /*  2080 */   436,  453,  271,  434,  270,  435,  456,  438,  731,  731,
 /*  2090 */   731,  538,  731,  489,  731,  536,  491,  187,  243,  492,
 /*  2100 */   493,  494,  445,  447,  448,  449,  450,  451,  452,  272,
 /*  2110 */   460,  276,  731,  465,  466,  731,  731,  731,  731,  731,
 /*  2120 */   443,  731,  731,  731,  454,   73,  731,  731,  731,  731,
 /*  2130 */   731,  731,  731,  731,  731,  731,  464,  731,  731,  731,
 /*  2140 */   731,  731,  731,  731,  731,  731,  731,  731,  436,  453,
 /*  2150 */   271,  434,  270,  435,  456,  438,  537,  117,  187,  243,
 /*  2160 */   492,  493,  494,  445,  447,  448,  449,  450,  451,  452,
 /*  2170 */   346,  460,  276,  431,  465,  466,  437,  731,  731,  731,
 /*  2180 */   731,   64,  731,  731,  731,  731,  731,   86,  443,  731,
 /*  2190 */   599,  585,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  2200 */   731,  731,  731,  731,  464,  731,  731,  731,  731,  731,
 /*  2210 */   731,  731,  731,  420,  731,  731,  731,  731,  731,  731,
 /*  2220 */   557,  731,  489,  731,  536,  491,  187,  243,  492,  493,
 /*  2230 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  2240 */   276,  731,  465,  466,  436,  453,  271,  434,  270,  435,
 /*  2250 */   456,  438,  186,  731,  436,  731,  271,  434,  439,  435,
 /*  2260 */   731,  438,  731,  731,  436,  731,  271,  434,  439,  435,
 /*  2270 */   731,  438,   13,   97,  731,  731,  731,  731,  731,  731,
 /*  2280 */   731,  731,  731,  731,  443,  731,  731,  731,  454,   73,
 /*  2290 */   731,  731,  731,  731,  443,  731,  731,  731,  731,  731,
 /*  2300 */   464,  731,  731,  731,  443,  731,  731,  731,  731,  731,
 /*  2310 */   236,  731,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  2320 */    68,  117,  187,  243,  492,  493,  494,  445,  447,  448,
 /*  2330 */   449,  450,  451,  452,  346,  460,  276,  731,  465,  466,
 /*  2340 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2350 */   731,  731,  443,  731,  584,  585,  454,   73,  731,  731,
 /*  2360 */   731,  731,  731,  731,  731,  731,  731,  731,  464,  731,
 /*  2370 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2380 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  191,
 /*  2390 */   187,  243,  492,  493,  494,  445,  447,  448,  449,  450,
 /*  2400 */   451,  452,  272,  460,  276,  731,  465,  466,  436,  453,
 /*  2410 */   271,  434,  270,  435,  456,  438,  731,  436,  731,  271,
 /*  2420 */   434,  439,  435,  731,  438,  731,  731,  731,  731,  731,
 /*  2430 */   351,  594,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2440 */   731,  731,  731,  731,  731,  731,  731,  731,  443,  731,
 /*  2450 */   731,  731,  454,   73,  731,  731,  731,  443,  731,  731,
 /*  2460 */   731,  731,  731,  731,  464,  731,  731,  731,  731,  731,
 /*  2470 */   731,  731,  731,  421,  731,  731,  731,  731,  731,  731,
 /*  2480 */   731,  731,  731,  731,  731,  729,  187,  243,  492,  493,
 /*  2490 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  2500 */   276,  731,  465,  466,  731,  731,  731,  731,  731,  731,
 /*  2510 */   731,  731,  731,  731,  731,  436,  453,  271,  434,  270,
 /*  2520 */   435,  456,  438,  731,  731,  731,  731,  731,  731,  731,
 /*  2530 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2540 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2550 */   731,  731,  731,  731,  731,  443,  731,  731,  731,  454,
 /*  2560 */    73,  731,  731,  731,  731,  728,  731,  731,  731,  731,
 /*  2570 */   731,  464,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  2580 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  495,
 /*  2590 */   731,  731,  491,  187,  243,  492,  493,  494,  445,  447,
 /*  2600 */   448,  449,  450,  451,  452,  272,  460,  276,  731,  465,
 /*  2610 */   466,  731,  443,  731,  731,  731,  454,   73,  731,  731,
 /*  2620 */   731,  731,  731,  731,  731,  731,  731,  731,  464,  731,
 /*  2630 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2640 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  191,
 /*  2650 */   187,  243,  492,  493,  494,  445,  447,  448,  449,  450,
 /*  2660 */   451,  452,  272,  460,  276,  731,  465,  466,  731,  731,
 /*  2670 */   731,  731,  731,  731,  731,  731,  731,  731,  436,  453,
 /*  2680 */   271,  434,  270,  435,  456,  438,  731,  731,  731,  731,
 /*  2690 */   731,  590,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2700 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2710 */   731,  731,  731,  731,  731,  731,  731,  731,  443,  731,
 /*  2720 */   731,  731,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  2730 */   731,  731,  731,  731,  464,  436,  453,  271,  434,  270,
 /*  2740 */   435,  456,  438,  731,  731,  731,  731,  731,  731,  731,
 /*  2750 */   731,  731,  731,  731,  731,  345,  187,  243,  492,  493,
 /*  2760 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  2770 */   276,  731,  465,  466,  731,  443,  731,  731,  731,  454,
 /*  2780 */    73,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2790 */   731,  464,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2800 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2810 */   731,  731,  731,  142,  243,  492,  493,  494,  445,  447,
 /*  2820 */   448,  449,  450,  451,  452,  272,  460,  276,  731,  465,
 /*  2830 */   466,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2840 */   731,  436,  453,  271,  434,  270,  435,  456,  438,  731,
 /*  2850 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2860 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2870 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2880 */   731,  443,  731,  731,  731,  454,   73,  731,  731,  731,
 /*  2890 */   731,  731,  731,  731,  731,  731,  731,  464,  436,  453,
 /*  2900 */   271,  434,  270,  435,  456,  438,  731,  731,  731,  731,
 /*  2910 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  143,
 /*  2920 */   243,  492,  493,  494,  445,  447,  448,  449,  450,  451,
 /*  2930 */   452,  272,  460,  276,  731,  465,  466,  731,  443,  731,
 /*  2940 */   731,  731,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  2950 */   731,  731,  731,  731,  464,  731,  731,  731,  731,  731,
 /*  2960 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  2970 */   731,  731,  731,  731,  731,  731,  144,  243,  492,  493,
 /*  2980 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  2990 */   276,  731,  465,  466,  731,  731,  731,  731,  731,  731,
 /*  3000 */   731,  731,  731,  731,  436,  453,  271,  434,  270,  435,
 /*  3010 */   456,  438,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3020 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3030 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3040 */   731,  731,  731,  731,  443,  731,  731,  731,  454,   73,
 /*  3050 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3060 */   464,  436,  453,  271,  434,  270,  435,  456,  438,  731,
 /*  3070 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3080 */   731,  731,  138,  243,  492,  493,  494,  445,  447,  448,
 /*  3090 */   449,  450,  451,  452,  272,  460,  276,  731,  465,  466,
 /*  3100 */   731,  443,  731,  731,  731,  454,   73,  731,  731,  731,
 /*  3110 */   731,  731,  731,  731,  731,  731,  731,  464,  731,  731,
 /*  3120 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3130 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  145,
 /*  3140 */   243,  492,  493,  494,  445,  447,  448,  449,  450,  451,
 /*  3150 */   452,  272,  460,  276,  731,  465,  466,  731,  731,  731,
 /*  3160 */   731,  731,  731,  731,  731,  731,  731,  436,  453,  271,
 /*  3170 */   434,  270,  435,  456,  438,  731,  731,  731,  731,  731,
 /*  3180 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3190 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3200 */   731,  731,  731,  731,  731,  731,  731,  443,  731,  731,
 /*  3210 */   731,  454,   73,  731,  731,  731,  731,  731,  731,  731,
 /*  3220 */   731,  731,  731,  464,  436,  453,  271,  434,  270,  435,
 /*  3230 */   456,  438,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3240 */   731,  731,  731,  731,  731,  146,  243,  492,  493,  494,
 /*  3250 */   445,  447,  448,  449,  450,  451,  452,  272,  460,  276,
 /*  3260 */   731,  465,  466,  731,  443,  731,  731,  731,  454,   73,
 /*  3270 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3280 */   464,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3290 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3300 */   731,  731,  147,  243,  492,  493,  494,  445,  447,  448,
 /*  3310 */   449,  450,  451,  452,  272,  460,  276,  731,  465,  466,
 /*  3320 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3330 */   436,  453,  271,  434,  270,  435,  456,  438,  731,  731,
 /*  3340 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3350 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3360 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3370 */   443,  731,  731,  731,  454,   73,  731,  731,  731,  731,
 /*  3380 */   731,  731,  731,  731,  731,  731,  464,  436,  453,  271,
 /*  3390 */   434,  270,  435,  456,  438,  731,  731,  731,  731,  731,
 /*  3400 */   731,  731,  731,  731,  731,  731,  731,  731,  148,  243,
 /*  3410 */   492,  493,  494,  445,  447,  448,  449,  450,  451,  452,
 /*  3420 */   272,  460,  276,  731,  465,  466,  731,  443,  731,  731,
 /*  3430 */   731,  454,   73,  731,  731,  731,  731,  731,  731,  731,
 /*  3440 */   731,  731,  731,  464,  731,  731,  731,  731,  731,  731,
 /*  3450 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3460 */   731,  731,  731,  731,  731,  149,  243,  492,  493,  494,
 /*  3470 */   445,  447,  448,  449,  450,  451,  452,  272,  460,  276,
 /*  3480 */   731,  465,  466,  731,  731,  731,  731,  731,  731,  731,
 /*  3490 */   731,  731,  731,  436,  453,  271,  434,  270,  435,  456,
 /*  3500 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3510 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3520 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3530 */   731,  731,  731,  443,  731,  731,  731,  454,   73,  731,
 /*  3540 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  464,
 /*  3550 */   436,  453,  271,  434,  270,  435,  456,  438,  731,  731,
 /*  3560 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3570 */   731,  150,  243,  492,  493,  494,  445,  447,  448,  449,
 /*  3580 */   450,  451,  452,  272,  460,  276,  731,  465,  466,  731,
 /*  3590 */   443,  731,  731,  731,  454,   73,  731,  731,  731,  731,
 /*  3600 */   731,  731,  731,  731,  731,  731,  464,  731,  731,  731,
 /*  3610 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3620 */   731,  731,  731,  731,  731,  731,  731,  731,  151,  243,
 /*  3630 */   492,  493,  494,  445,  447,  448,  449,  450,  451,  452,
 /*  3640 */   272,  460,  276,  731,  465,  466,  731,  731,  731,  731,
 /*  3650 */   731,  731,  731,  731,  731,  731,  436,  453,  271,  434,
 /*  3660 */   270,  435,  456,  438,  731,  731,  731,  731,  731,  731,
 /*  3670 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3680 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3690 */   731,  731,  731,  731,  731,  731,  443,  731,  731,  731,
 /*  3700 */   454,   73,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3710 */   731,  731,  464,  436,  453,  271,  434,  270,  435,  456,
 /*  3720 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3730 */   731,  731,  731,  731,  152,  243,  492,  493,  494,  445,
 /*  3740 */   447,  448,  449,  450,  451,  452,  272,  460,  276,  731,
 /*  3750 */   465,  466,  731,  443,  731,  731,  731,  454,   73,  731,
 /*  3760 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  464,
 /*  3770 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3780 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3790 */   731,  153,  243,  492,  493,  494,  445,  447,  448,  449,
 /*  3800 */   450,  451,  452,  272,  460,  276,  731,  465,  466,  731,
 /*  3810 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  436,
 /*  3820 */   453,  271,  434,  270,  435,  456,  438,  731,  731,  731,
 /*  3830 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3840 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3850 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  443,
 /*  3860 */   731,  731,  731,  454,   73,  731,  731,  731,  731,  731,
 /*  3870 */   731,  731,  731,  731,  731,  464,  436,  453,  271,  434,
 /*  3880 */   270,  435,  456,  438,  731,  731,  731,  731,  731,  731,
 /*  3890 */   731,  731,  731,  731,  731,  731,  731,  154,  243,  492,
 /*  3900 */   493,  494,  445,  447,  448,  449,  450,  451,  452,  272,
 /*  3910 */   460,  276,  731,  465,  466,  731,  443,  731,  731,  731,
 /*  3920 */   454,   73,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3930 */   731,  731,  464,  731,  731,  731,  731,  731,  731,  731,
 /*  3940 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3950 */   731,  731,  731,  731,  155,  243,  492,  493,  494,  445,
 /*  3960 */   447,  448,  449,  450,  451,  452,  272,  460,  276,  731,
 /*  3970 */   465,  466,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  3980 */   731,  731,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  3990 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4000 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4010 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4020 */   731,  731,  443,  731,  731,  731,  454,   73,  731,  731,
 /*  4030 */   731,  731,  731,  731,  731,  731,  731,  731,  464,  436,
 /*  4040 */   453,  271,  434,  270,  435,  456,  438,  731,  731,  731,
 /*  4050 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4060 */   156,  243,  492,  493,  494,  445,  447,  448,  449,  450,
 /*  4070 */   451,  452,  272,  460,  276,  731,  465,  466,  731,  443,
 /*  4080 */   731,  731,  731,  454,   73,  731,  731,  731,  731,  731,
 /*  4090 */   731,  731,  731,  731,  731,  464,  731,  731,  731,  731,
 /*  4100 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4110 */   731,  731,  731,  731,  731,  731,  731,  157,  243,  492,
 /*  4120 */   493,  494,  445,  447,  448,  449,  450,  451,  452,  272,
 /*  4130 */   460,  276,  731,  465,  466,  731,  731,  731,  731,  731,
 /*  4140 */   731,  731,  731,  731,  731,  436,  453,  271,  434,  270,
 /*  4150 */   435,  456,  438,  731,  731,  731,  731,  731,  731,  731,
 /*  4160 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4170 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4180 */   731,  731,  731,  731,  731,  443,  731,  731,  731,  454,
 /*  4190 */    73,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4200 */   731,  464,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  4210 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4220 */   731,  731,  731,  139,  243,  492,  493,  494,  445,  447,
 /*  4230 */   448,  449,  450,  451,  452,  272,  460,  276,  731,  465,
 /*  4240 */   466,  731,  443,  731,  731,  731,  454,   73,  731,  731,
 /*  4250 */   731,  731,  731,  731,  731,  731,  731,  731,  464,  731,
 /*  4260 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4270 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4280 */   158,  243,  492,  493,  494,  445,  447,  448,  449,  450,
 /*  4290 */   451,  452,  272,  460,  276,  731,  465,  466,  731,  731,
 /*  4300 */   731,  731,  731,  731,  731,  731,  731,  731,  436,  453,
 /*  4310 */   271,  434,  270,  435,  456,  438,  731,  731,  731,  731,
 /*  4320 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4330 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4340 */   731,  731,  731,  731,  731,  731,  731,  731,  443,  731,
 /*  4350 */   731,  731,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  4360 */   731,  731,  731,  731,  464,  436,  453,  271,  434,  270,
 /*  4370 */   435,  456,  438,  731,  731,  731,  731,  731,  731,  731,
 /*  4380 */   731,  731,  731,  731,  731,  731,  159,  243,  492,  493,
 /*  4390 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  4400 */   276,  731,  465,  466,  731,  443,  731,  731,  731,  454,
 /*  4410 */    73,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4420 */   731,  464,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4430 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4440 */   731,  731,  731,  160,  243,  492,  493,  494,  445,  447,
 /*  4450 */   448,  449,  450,  451,  452,  272,  460,  276,  731,  465,
 /*  4460 */   466,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4470 */   731,  436,  453,  271,  434,  270,  435,  456,  438,  731,
 /*  4480 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4490 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4500 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4510 */   731,  443,  731,  731,  731,  454,   73,  731,  731,  731,
 /*  4520 */   731,  731,  731,  731,  731,  731,  731,  464,  436,  453,
 /*  4530 */   271,  434,  270,  435,  456,  438,  731,  731,  731,  731,
 /*  4540 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  161,
 /*  4550 */   243,  492,  493,  494,  445,  447,  448,  449,  450,  451,
 /*  4560 */   452,  272,  460,  276,  731,  465,  466,  731,  443,  731,
 /*  4570 */   731,  731,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  4580 */   731,  731,  731,  731,  464,  731,  731,  731,  731,  731,
 /*  4590 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4600 */   731,  731,  731,  731,  731,  731,  162,  243,  492,  493,
 /*  4610 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  4620 */   276,  731,  465,  466,  731,  731,  731,  731,  731,  731,
 /*  4630 */   731,  731,  731,  731,  436,  453,  271,  434,  270,  435,
 /*  4640 */   456,  438,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4650 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4660 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4670 */   731,  731,  731,  731,  443,  731,  731,  731,  454,   73,
 /*  4680 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4690 */   464,  436,  453,  271,  434,  270,  435,  456,  438,  731,
 /*  4700 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4710 */   731,  731,  163,  243,  492,  493,  494,  445,  447,  448,
 /*  4720 */   449,  450,  451,  452,  272,  460,  276,  731,  465,  466,
 /*  4730 */   731,  443,  731,  731,  731,  454,   73,  731,  731,  731,
 /*  4740 */   731,  731,  731,  731,  731,  731,  731,  464,  731,  731,
 /*  4750 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4760 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  164,
 /*  4770 */   243,  492,  493,  494,  445,  447,  448,  449,  450,  451,
 /*  4780 */   452,  272,  460,  276,  731,  465,  466,  731,  731,  731,
 /*  4790 */   731,  731,  731,  731,  731,  731,  731,  436,  453,  271,
 /*  4800 */   434,  270,  435,  456,  438,  731,  731,  731,  731,  731,
 /*  4810 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4820 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4830 */   731,  731,  731,  731,  731,  731,  731,  443,  731,  731,
 /*  4840 */   731,  454,   73,  731,  731,  731,  731,  731,  731,  731,
 /*  4850 */   731,  731,  731,  464,  436,  453,  271,  434,  270,  435,
 /*  4860 */   456,  438,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4870 */   731,  731,  731,  731,  731,  165,  243,  492,  493,  494,
 /*  4880 */   445,  447,  448,  449,  450,  451,  452,  272,  460,  276,
 /*  4890 */   731,  465,  466,  731,  443,  731,  731,  731,  454,   73,
 /*  4900 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4910 */   464,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4920 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4930 */   731,  731,  140,  243,  492,  493,  494,  445,  447,  448,
 /*  4940 */   449,  450,  451,  452,  272,  460,  276,  731,  465,  466,
 /*  4950 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4960 */   436,  453,  271,  434,  270,  435,  456,  438,  731,  731,
 /*  4970 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4980 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  4990 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5000 */   443,  731,  731,  731,  454,   73,  731,  731,  731,  731,
 /*  5010 */   731,  731,  731,  731,  731,  731,  464,  436,  453,  271,
 /*  5020 */   434,  270,  435,  456,  438,  731,  731,  731,  731,  731,
 /*  5030 */   731,  731,  731,  731,  731,  731,  731,  731,  166,  243,
 /*  5040 */   492,  493,  494,  445,  447,  448,  449,  450,  451,  452,
 /*  5050 */   272,  460,  276,  731,  465,  466,  731,  443,  731,  731,
 /*  5060 */   731,  454,   73,  731,  731,  731,  731,  731,  731,  731,
 /*  5070 */   731,  731,  731,  464,  731,  731,  731,  731,  731,  731,
 /*  5080 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5090 */   731,  731,  731,  731,  731,  167,  243,  492,  493,  494,
 /*  5100 */   445,  447,  448,  449,  450,  451,  452,  272,  460,  276,
 /*  5110 */   731,  465,  466,  731,  731,  731,  731,  731,  731,  731,
 /*  5120 */   731,  731,  731,  436,  453,  271,  434,  270,  435,  456,
 /*  5130 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5140 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5150 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5160 */   731,  731,  731,  443,  731,  731,  731,  454,   73,  731,
 /*  5170 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  464,
 /*  5180 */   436,  453,  271,  434,  270,  435,  456,  438,  731,  731,
 /*  5190 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5200 */   731,  168,  243,  492,  493,  494,  445,  447,  448,  449,
 /*  5210 */   450,  451,  452,  272,  460,  276,  731,  465,  466,  731,
 /*  5220 */   443,  731,  731,  731,  454,   73,  731,  731,  731,  731,
 /*  5230 */   731,  731,  731,  731,  731,  731,  464,  731,  731,  731,
 /*  5240 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5250 */   731,  731,  731,  731,  731,  731,  731,  731,  169,  243,
 /*  5260 */   492,  493,  494,  445,  447,  448,  449,  450,  451,  452,
 /*  5270 */   272,  460,  276,  731,  465,  466,  731,  731,  731,  731,
 /*  5280 */   731,  731,  731,  731,  731,  731,  436,  453,  271,  434,
 /*  5290 */   270,  435,  456,  438,  731,  731,  731,  731,  731,  731,
 /*  5300 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5310 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5320 */   731,  731,  731,  731,  731,  731,  443,  731,  731,  731,
 /*  5330 */   454,   73,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5340 */   731,  731,  464,  436,  453,  271,  434,  270,  435,  456,
 /*  5350 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5360 */   731,  731,  731,  731,  170,  243,  492,  493,  494,  445,
 /*  5370 */   447,  448,  449,  450,  451,  452,  272,  460,  276,  731,
 /*  5380 */   465,  466,  731,  443,  731,  731,  731,  454,   73,  731,
 /*  5390 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  464,
 /*  5400 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5410 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5420 */   731,  171,  243,  492,  493,  494,  445,  447,  448,  449,
 /*  5430 */   450,  451,  452,  272,  460,  276,  731,  465,  466,  731,
 /*  5440 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  436,
 /*  5450 */   453,  271,  434,  270,  435,  456,  438,  731,  731,  731,
 /*  5460 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5470 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5480 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  443,
 /*  5490 */   731,  731,  731,  454,   73,  731,  731,  731,  731,  731,
 /*  5500 */   731,  731,  731,  731,  731,  464,  436,  453,  271,  434,
 /*  5510 */   270,  435,  456,  438,  731,  731,  731,  731,  731,  731,
 /*  5520 */   731,  731,  731,  731,  731,  731,  731,  172,  243,  492,
 /*  5530 */   493,  494,  445,  447,  448,  449,  450,  451,  452,  272,
 /*  5540 */   460,  276,  731,  465,  466,  731,  443,  731,  731,  731,
 /*  5550 */   454,   73,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5560 */   731,  731,  464,  731,  731,  731,  731,  731,  731,  731,
 /*  5570 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5580 */   731,  731,  731,  731,  173,  243,  492,  493,  494,  445,
 /*  5590 */   447,  448,  449,  450,  451,  452,  272,  460,  276,  731,
 /*  5600 */   465,  466,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5610 */   731,  731,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  5620 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5630 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5640 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5650 */   731,  731,  443,  731,  731,  731,  454,   73,  731,  731,
 /*  5660 */   731,  731,  731,  731,  731,  731,  731,  731,  464,  436,
 /*  5670 */   453,  271,  434,  270,  435,  456,  438,  731,  731,  731,
 /*  5680 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5690 */   174,  243,  492,  493,  494,  445,  447,  448,  449,  450,
 /*  5700 */   451,  452,  272,  460,  276,  731,  465,  466,  731,  443,
 /*  5710 */   731,  731,  731,  454,   73,  731,  731,  731,  731,  731,
 /*  5720 */   731,  731,  731,  731,  731,  464,  731,  731,  731,  731,
 /*  5730 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5740 */   731,  731,  731,  731,  731,  731,  731,  175,  243,  492,
 /*  5750 */   493,  494,  445,  447,  448,  449,  450,  451,  452,  272,
 /*  5760 */   460,  276,  731,  465,  466,  731,  731,  731,  731,  731,
 /*  5770 */   731,  731,  731,  731,  731,  436,  453,  271,  434,  270,
 /*  5780 */   435,  456,  438,  731,  731,  731,  731,  731,  731,  731,
 /*  5790 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5800 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5810 */   731,  731,  731,  731,  731,  443,  731,  731,  731,  454,
 /*  5820 */    73,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5830 */   731,  464,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  5840 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5850 */   731,  731,  731,  176,  243,  492,  493,  494,  445,  447,
 /*  5860 */   448,  449,  450,  451,  452,  272,  460,  276,  731,  465,
 /*  5870 */   466,  731,  443,  731,  731,  731,  454,   73,  731,  731,
 /*  5880 */   731,  731,  731,  731,  731,  731,  731,  731,  464,  731,
 /*  5890 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5900 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5910 */   177,  243,  492,  493,  494,  445,  447,  448,  449,  450,
 /*  5920 */   451,  452,  272,  460,  276,  731,  465,  466,  731,  731,
 /*  5930 */   731,  731,  731,  731,  731,  731,  731,  731,  436,  453,
 /*  5940 */   271,  434,  270,  435,  456,  438,  731,  731,  731,  731,
 /*  5950 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5960 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  5970 */   731,  731,  731,  731,  731,  731,  731,  731,  443,  731,
 /*  5980 */   731,  731,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  5990 */   731,  731,  731,  731,  464,  436,  453,  271,  434,  270,
 /*  6000 */   435,  456,  438,  731,  731,  731,  731,  731,  731,  731,
 /*  6010 */   731,  731,  731,  731,  731,  731,  178,  243,  492,  493,
 /*  6020 */   494,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  6030 */   276,  731,  465,  466,  731,  443,  731,  731,  731,  454,
 /*  6040 */    73,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6050 */   731,  464,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6060 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6070 */   731,  731,  731,  179,  243,  492,  493,  494,  445,  447,
 /*  6080 */   448,  449,  450,  451,  452,  272,  460,  276,  731,  465,
 /*  6090 */   466,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6100 */   731,  436,  453,  271,  434,  270,  435,  456,  438,  731,
 /*  6110 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6120 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6130 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6140 */   731,  443,  731,  731,  731,  454,   73,  731,  731,  731,
 /*  6150 */   731,  731,  731,  731,  731,  731,  731,  464,  436,  453,
 /*  6160 */   271,  434,  270,  435,  456,  438,  731,  731,  731,  731,
 /*  6170 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  180,
 /*  6180 */   243,  492,  493,  494,  445,  447,  448,  449,  450,  451,
 /*  6190 */   452,  272,  460,  276,  731,  465,  466,  731,  443,  731,
 /*  6200 */   731,  731,  454,   73,  731,  731,  731,  731,  731,  731,
 /*  6210 */   731,  731,  731,  731,  464,  731,  731,  731,  731,  731,
 /*  6220 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6230 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6240 */   461,  445,  447,  448,  449,  450,  451,  452,  272,  460,
 /*  6250 */   276,  731,  465,  466,  731,  731,  731,  731,  731,  731,
 /*  6260 */   731,  472,  731,  731,  436,  731,  271,  434,  439,  435,
 /*  6270 */   731,  438,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6280 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6290 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6300 */   731,  731,  731,  731,  443,  731,  472,  731,  731,  436,
 /*  6310 */   731,  271,  434,  439,  435,  731,  438,  731,  731,  731,
 /*  6320 */   115,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6330 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6340 */   472,  731,  731,  436,  731,  271,  434,  439,  435,  443,
 /*  6350 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  483,
 /*  6360 */   269,  486,  237,  284,  285,  115,  488,  731,  471,  473,
 /*  6370 */   474,  731,  731,  731,  472,  731,  731,  436,  731,  271,
 /*  6380 */   434,  439,  435,  443,  438,  189,  731,  116,  731,  482,
 /*  6390 */   484,  485,  731,  731,  731,  731,  731,  731,  731,  115,
 /*  6400 */   731,  731,  731,  731,  483,  241,  486,  237,  284,  285,
 /*  6410 */   731,  488,  731,  471,  473,  474,  725,  443,  731,  731,
 /*  6420 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6430 */   189,  731,  116,  115,  482,  484,  485,  731,  483,  241,
 /*  6440 */   328,  240,  284,  285,  731,  488,  731,  471,  473,  474,
 /*  6450 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6460 */   731,  731,  731,  731,  189,  731,  116,  731,  482,  484,
 /*  6470 */   485,  731,  483,  241,  486,  240,  284,  285,  731,  488,
 /*  6480 */   731,  471,  473,  474,  731,  731,  731,  731,  731,  731,
 /*  6490 */   731,  731,  731,  731,  731,  731,  731,  731,  189,  731,
 /*  6500 */   116,  731,  482,  484,  485,  472,  731,  731,  436,  731,
 /*  6510 */   271,  434,  439,  435,  731,  438,  731,  731,  731,  731,
 /*  6520 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6530 */   731,  731,  436,  453,  271,  434,  270,  435,  456,  438,
 /*  6540 */   731,  731,  436,  731,  271,  434,  439,  435,  443,  438,
 /*  6550 */   472,  731,  731,  436,  731,  271,  434,  439,  435,  731,
 /*  6560 */   438,  731,  731,  731,  115,  731,  731,  731,  731,  731,
 /*  6570 */   731,  731,  443,  731,  731,  731,  454,  731,  731,  731,
 /*  6580 */   731,  731,  443,  731,  731,  731,  731,  731,  464,  731,
 /*  6590 */   731,  731,  731,  443,  731,  731,  731,  731,  115,  731,
 /*  6600 */   731,  731,  731,  483,  268,  486,  237,  284,  285,  115,
 /*  6610 */   488,  731,  471,  473,  474,  446,  447,  448,  449,  450,
 /*  6620 */   451,  452,  272,  460,  276,  731,  465,  466,  731,  189,
 /*  6630 */   731,  116,  731,  482,  484,  485,  731,  483,  731,  472,
 /*  6640 */   540,  731,  436,  731,  271,  434,  439,  435,  483,  438,
 /*  6650 */   731,  239,  578,  277,   81,  488,  731,  471,  473,  474,
 /*  6660 */   731,  731,  731,  190,  731,  116,  731,  482,  484,  485,
 /*  6670 */   731,  731,  731,  731,  189,  731,  116,  731,  482,  484,
 /*  6680 */   485,  731,  443,  731,  731,  731,  731,  731,  731,  731,
 /*  6690 */   731,  731,  731,  731,  731,  731,  472,  731,  115,  436,
 /*  6700 */   731,  271,  434,  439,  435,  731,  438,  731,  731,  731,
 /*  6710 */   731,  731,  731,  731,  731,  731,  436,  731,  271,  434,
 /*  6720 */   270,  435,  456,  438,  731,  731,  731,  731,  731,  731,
 /*  6730 */   731,  731,  731,  731,  731,  731,  731,  483,  731,  443,
 /*  6740 */   239,  578,  341,   83,  488,  731,  471,  473,  474,  731,
 /*  6750 */   731,  731,  731,  731,  731,  115,  443,  731,  731,  731,
 /*  6760 */   731,  731,  731,  189,  731,  116,  731,  482,  484,  485,
 /*  6770 */   472,  731,  464,  436,  731,  271,  434,  439,  435,  731,
 /*  6780 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6790 */   731,  731,  731,  731,  483,  731,  731,  239,  578,  338,
 /*  6800 */    80,  488,  596,  471,  473,  474,  272,  731,  731,  731,
 /*  6810 */   465,  472,  731,  443,  436,  731,  271,  434,  439,  435,
 /*  6820 */   189,  438,  116,  731,  482,  484,  485,  731,  731,  115,
 /*  6830 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6840 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6850 */   731,  354,  597,  731,  443,  731,  731,  731,  731,  731,
 /*  6860 */   731,  731,  731,  731,  731,  731,  731,  731,  483,  731,
 /*  6870 */   115,  239,  578,  342,   82,  488,  731,  471,  473,  474,
 /*  6880 */   731,  731,  436,  731,  271,  434,  270,  435,  456,  438,
 /*  6890 */   731,  731,  731,  731,  189,  731,  116,  731,  482,  484,
 /*  6900 */   485,  731,  731,  731,  731,  731,  731,  731,  731,  483,
 /*  6910 */   731,  731,  238,  731,  731,   85,  575,  468,  471,  473,
 /*  6920 */   474,  731,  443,  472,  731,  731,  436,  731,  271,  434,
 /*  6930 */   439,  435,  731,  438,  731,  189,  731,  116,  464,  482,
 /*  6940 */   484,  485,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  6950 */   731,  731,  731,  731,  731,  731,  731,  472,  731,  731,
 /*  6960 */   436,  731,  271,  434,  439,  435,  443,  438,  596,  731,
 /*  6970 */   731,  731,  272,  731,  731,  731,  465,  731,  731,  731,
 /*  6980 */   731,  731,  115,  731,  731,  731,  731,  731,  731,  731,
 /*  6990 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7000 */   443,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7010 */   731,  731,  731,  731,  731,  731,  115,  731,  595,  731,
 /*  7020 */   731,  483,  731,  731,  238,  731,  731,   84,  575,  469,
 /*  7030 */   471,  473,  474,  472,  731,  731,  436,  731,  271,  434,
 /*  7040 */   439,  435,  731,  438,  731,  731,  731,  189,  731,  116,
 /*  7050 */   731,  482,  484,  485,  731,  483,  731,  731,  239,  578,
 /*  7060 */   339,  731,  488,  731,  471,  473,  474,  731,  731,  731,
 /*  7070 */   731,  731,  731,  731,  731,  731,  443,  731,  731,  731,
 /*  7080 */   731,  189,  731,  116,  731,  482,  484,  485,  731,  731,
 /*  7090 */   472,  731,  115,  436,  731,  271,  434,  439,  435,  731,
 /*  7100 */   438,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7110 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7120 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7130 */   731,  483,  731,  443,  239,  578,  340,  731,  488,  731,
 /*  7140 */   471,  473,  474,  731,  731,  731,  731,  731,  731,  115,
 /*  7150 */   731,  731,  731,  731,  731,  731,  731,  189,  731,  116,
 /*  7160 */   731,  482,  484,  485,  731,  731,  731,  731,  731,  731,
 /*  7170 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7180 */   731,  731,  731,  731,  731,  731,  731,  731,  483,  731,
 /*  7190 */   731,  239,  578,  343,  731,  488,  731,  471,  473,  474,
 /*  7200 */   472,  731,  731,  436,  731,  271,  434,  439,  435,  731,
 /*  7210 */   438,  731,  731,  731,  189,  731,  116,  731,  482,  484,
 /*  7220 */   485,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7230 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7240 */   731,  472,  731,  443,  436,  731,  271,  434,  439,  435,
 /*  7250 */   731,  438,  731,  731,  731,  731,  731,  731,  731,  115,
 /*  7260 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7270 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7280 */   731,  731,  731,  731,  443,  731,  731,  731,  731,  731,
 /*  7290 */   731,  731,  731,  731,  731,  731,  731,  731,  483,  731,
 /*  7300 */   115,  239,  578,  344,  731,  488,  731,  471,  473,  474,
 /*  7310 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7320 */   731,  731,  731,  731,  189,  731,  116,  731,  482,  484,
 /*  7330 */   485,  731,  731,  731,  731,  731,  731,  731,  731,  483,
 /*  7340 */   731,  731,  238,  731,  731,  731,  575,  470,  471,  473,
 /*  7350 */   474,  472,  731,  731,  436,  731,  271,  434,  439,  435,
 /*  7360 */   731,  438,  731,  731,  731,  189,  731,  116,  731,  482,
 /*  7370 */   484,  485,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7380 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7390 */   731,  731,  731,  731,  443,  731,  731,  731,  731,  731,
 /*  7400 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7410 */   115,  436,  731,  271,  434,  439,  435,  731,  438,  731,
 /*  7420 */   731,  731,  436,  731,  271,  434,  439,  435,  731,  438,
 /*  7430 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7440 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  483,
 /*  7450 */   731,  443,  238,  731,  731,  731,  575,  577,  471,  473,
 /*  7460 */   474,  731,  443,  731,  731,  731,  731,  115,  731,  731,
 /*  7470 */   731,  731,  731,  731,  731,  189,  731,  116,  115,  482,
 /*  7480 */   484,  485,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7490 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7500 */   731,  731,  731,  731,  731,  731,  483,  731,  731,  540,
 /*  7510 */   731,  436,  731,  271,  434,  439,  435,  483,  438,  198,
 /*  7520 */   540,  731,  731,  731,  199,  731,  731,  731,  731,  731,
 /*  7530 */   731,  731,  182,  731,  116,  731,  482,  484,  485,  731,
 /*  7540 */   731,  731,  731,  118,  731,  116,  731,  482,  484,  485,
 /*  7550 */   731,  443,  731,  731,  731,  731,  731,  436,  731,  271,
 /*  7560 */   434,  439,  435,  731,  438,  731,  731,  115,  731,  731,
 /*  7570 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7580 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7590 */   731,  731,  731,  731,  731,  731,  731,  443,  731,  731,
 /*  7600 */   731,  731,  731,  731,  731,  731,  483,  731,  731,  540,
 /*  7610 */   731,  731,  731,  115,  731,  731,  731,  731,  731,  731,
 /*  7620 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7630 */   731,  731,  135,  731,  116,  731,  482,  484,  485,  731,
 /*  7640 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7650 */   731,  731,  483,  731,  731,  540,  731,  731,  731,  731,
 /*  7660 */   731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
 /*  7670 */   731,  731,  731,  731,  731,  731,  731,  731,  136,  731,
 /*  7680 */   116,  731,  482,  484,  485,
);
static $yy_lookahead = array(
 /*     0 */   159,  193,  194,  162,  163,  164,  165,  166,  167,  168,
 /*    10 */   169,    7,    2,    9,  176,  177,    2,   13,   14,   15,
 /*    20 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*    30 */    50,   27,   28,   29,   30,  162,  197,   33,  199,  166,
 /*    40 */   167,  168,    2,  202,  174,    5,  208,  206,  207,  179,
 /*    50 */   180,  181,  182,  183,  184,  185,    6,  187,  188,  218,
 /*    60 */    35,   36,   37,   38,   39,   40,  225,  226,  227,  228,
 /*    70 */   229,    6,  231,  232,  233,  234,    2,  236,  237,  238,
 /*    80 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*    90 */   249,  250,  251,  252,  253,  254,   82,  256,  257,  258,
 /*   100 */   259,  260,  261,  262,   51,  264,  217,  266,  267,  268,
 /*   110 */   159,  222,  223,  162,  163,  164,  165,  166,  167,  168,
 /*   120 */   169,  105,  106,  107,  283,  210,  285,  162,  287,  288,
 /*   130 */   289,  166,  167,  168,    3,  170,  171,  172,  173,  162,
 /*   140 */    90,   60,   92,  166,  167,  168,    2,  274,  171,  172,
 /*   150 */   173,    2,    2,  202,    5,    5,   82,  206,  207,   10,
 /*   160 */   155,  156,  157,   98,  159,  160,  161,  114,  115,  218,
 /*   170 */   108,  109,  110,  111,  112,  113,  225,  226,  227,  228,
 /*   180 */   229,    6,  231,  232,  233,  234,   11,  236,  237,  238,
 /*   190 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*   200 */   249,  250,  251,  252,  253,  254,  177,  256,  257,  258,
 /*   210 */   259,  260,  261,  262,   70,  264,  301,  266,  267,  268,
 /*   220 */     2,    3,    4,    5,    2,    3,    4,    5,   10,  291,
 /*   230 */    81,  293,   10,    2,  283,  290,  285,  208,  287,  288,
 /*   240 */   289,  235,  162,  163,  164,  165,  166,  167,  168,  169,
 /*   250 */   101,  102,  207,   35,   36,   37,   38,   39,   40,   35,
 /*   260 */    36,   37,   38,   39,   40,    2,   48,   49,    5,   51,
 /*   270 */    48,   49,   41,   10,  156,  157,    6,  159,  160,  161,
 /*   280 */   209,   11,  202,  212,  213,  214,  206,  207,   76,   77,
 /*   290 */    72,   73,   74,   75,   72,   73,   74,   75,  218,   81,
 /*   300 */   162,  224,   48,   49,  166,  167,  168,  302,  303,  304,
 /*   310 */   305,    3,    4,   82,  309,  310,  311,  312,    6,  101,
 /*   320 */   102,  241,  104,   11,  244,  245,  246,  247,  248,  249,
 /*   330 */   250,  251,  252,  253,  254,  162,  256,  257,  230,  166,
 /*   340 */   167,  163,  169,  125,  126,  127,  128,  129,  130,  131,
 /*   350 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   360 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*   370 */   152,  153,    2,    3,    4,    5,  192,  230,  194,   58,
 /*   380 */    10,  203,  204,  205,  206,  207,  195,  196,  224,  198,
 /*   390 */   199,  162,  163,  164,  165,  166,  167,  168,  169,  290,
 /*   400 */    90,  292,   92,  294,  295,   35,   36,   37,   38,   39,
 /*   410 */    40,   90,   91,   92,   93,  255,   95,   96,   48,   49,
 /*   420 */   302,  303,  304,  305,    3,    4,  306,  309,  310,  311,
 /*   430 */   312,  202,   61,   62,  162,  206,  207,   51,  166,  167,
 /*   440 */   168,   10,   72,   73,   74,   75,  221,  218,   87,   88,
 /*   450 */    11,   81,   81,  162,  316,  317,  318,  166,  167,  168,
 /*   460 */    58,   59,   31,   10,   43,   44,   45,   46,   47,   48,
 /*   470 */    49,  101,  102,  244,  245,  246,  247,  248,  249,  250,
 /*   480 */   251,  252,  253,  254,   31,  256,  257,   48,   49,  118,
 /*   490 */   104,  120,  220,   72,  123,  125,  126,  127,  128,  129,
 /*   500 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   510 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*   520 */   150,  151,  152,  153,    2,    3,    4,    5,    2,    3,
 /*   530 */     4,    5,   10,   70,   71,  162,   10,  164,  165,  166,
 /*   540 */   167,   10,  169,   12,   58,    2,   60,    2,    5,   51,
 /*   550 */   162,  255,   58,   10,  166,  167,  168,   35,   36,   37,
 /*   560 */    38,   39,   40,  282,   78,  116,  117,  163,  296,   42,
 /*   570 */    48,   49,   78,   51,   47,  202,   90,   91,   92,   93,
 /*   580 */   162,   95,   96,   97,  166,  167,  168,   93,  215,   95,
 /*   590 */    96,  218,   11,  320,   72,   73,   74,   75,   72,   73,
 /*   600 */    74,   75,  162,  105,  106,  107,  166,  167,  317,  318,
 /*   610 */    51,   52,   53,   54,  162,   56,   10,  162,  166,  167,
 /*   620 */    77,  166,  167,  168,   81,   66,  104,   82,  162,   48,
 /*   630 */    49,  162,  166,  167,  168,  166,  167,  162,  220,    6,
 /*   640 */    34,  166,  167,  168,  101,  102,  103,  125,  126,  127,
 /*   650 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   660 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   670 */   148,  149,  150,  151,  152,  153,    2,    3,    4,    5,
 /*   680 */    61,   62,   11,  191,   10,  219,  220,  162,  163,  164,
 /*   690 */   165,  166,  167,  168,  169,    6,  256,   11,    6,  162,
 /*   700 */    11,  164,  165,  166,  167,  191,  169,   11,  256,   35,
 /*   710 */    36,   37,   38,   39,   40,    1,   42,   84,  300,   48,
 /*   720 */    49,   47,   48,   49,  284,  256,    7,  202,    9,  158,
 /*   730 */     6,  206,  207,   83,   48,   49,  284,   48,   49,  202,
 /*   740 */    48,   49,    6,  218,   48,   49,   72,   73,   74,   75,
 /*   750 */   225,  226,  227,  228,  229,  218,  231,  232,  233,  234,
 /*   760 */    11,  236,  271,  238,  239,  240,  241,  242,  243,  244,
 /*   770 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
 /*   780 */    98,  256,  257,    8,   48,   49,  159,   63,    6,  162,
 /*   790 */   163,  164,  165,  166,  167,  168,  169,   48,   49,  125,
 /*   800 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   810 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   820 */   146,  147,  148,  149,  150,  151,  152,  153,  276,  202,
 /*   830 */    48,   49,    2,  206,  207,    5,    6,   99,   63,   64,
 /*   840 */    10,  277,   51,  119,   10,  218,   12,  159,    0,    1,
 /*   850 */   162,   11,  164,  165,  166,  167,  168,  169,  100,   11,
 /*   860 */     6,  278,   11,  236,  237,   11,  239,  240,  241,  242,
 /*   870 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*   880 */   253,  254,   85,  256,  257,  258,  259,  260,  261,  262,
 /*   890 */   202,  264,  279,  266,  267,  268,    2,    3,    4,    5,
 /*   900 */     0,    1,   48,   49,   10,  114,  218,   67,  220,   42,
 /*   910 */   283,   11,  285,  115,  287,  288,  289,    2,   67,   89,
 /*   920 */     5,  175,   11,   78,   79,   10,   78,   79,   80,   35,
 /*   930 */    36,   37,   38,   39,   40,  162,   10,  301,   12,  166,
 /*   940 */   167,  168,   48,   49,  301,  257,  258,  259,  260,  261,
 /*   950 */   262,   10,  264,   12,  266,  267,  268,  162,   57,  164,
 /*   960 */   165,  166,  167,    6,  169,  223,   72,   73,   74,   75,
 /*   970 */    10,  283,   12,  285,   11,  287,  288,  289,    2,   79,
 /*   980 */    80,    5,  216,    6,   60,   60,   10,  222,   11,   78,
 /*   990 */    79,   80,   77,  220,  178,    6,   81,  202,  104,    5,
 /*  1000 */    11,    2,    6,  315,    5,   48,   49,   11,   11,   10,
 /*  1010 */     6,   48,   49,  218,    3,   11,  101,  102,  103,  125,
 /*  1020 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1030 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1040 */   146,  147,  148,  149,  150,  151,  152,  153,    2,    3,
 /*  1050 */     4,    5,  186,   77,   50,  186,   10,   81,  162,  286,
 /*  1060 */   164,  165,  166,  167,  186,  169,  186,  162,   11,  164,
 /*  1070 */   165,  166,  167,  186,  169,   78,   79,  101,  102,  103,
 /*  1080 */    81,   35,   36,   37,   38,   39,   40,    3,    6,    2,
 /*  1090 */     3,    4,    5,   11,   48,   49,   11,   10,  202,  186,
 /*  1100 */   101,  102,  103,  308,   11,   48,   49,  202,  162,   11,
 /*  1110 */   164,  165,  166,  167,  218,  169,  211,  186,   72,   73,
 /*  1120 */    74,   75,   35,   36,   37,   38,   39,   40,   11,  186,
 /*  1130 */    48,   49,   11,   48,   49,   48,   49,  186,    6,    6,
 /*  1140 */   186,   48,   49,   11,   11,  186,   48,   49,  202,  162,
 /*  1150 */   104,  186,    3,  166,  167,  168,  189,   70,  190,   72,
 /*  1160 */    73,   74,   75,  189,  218,   48,   49,   11,  190,   48,
 /*  1170 */    49,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1180 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1190 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  1200 */   190,  189,  189,   31,   48,   49,  191,  220,   11,  191,
 /*  1210 */    11,    3,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1220 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1230 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1240 */   153,    2,    3,    4,    5,   48,   49,   48,   49,   10,
 /*  1250 */   201,    6,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  1260 */   200,   11,    3,  200,   11,  201,   11,  121,   11,  307,
 /*  1270 */    41,   98,   41,  286,   35,   36,   37,   38,   39,   40,
 /*  1280 */    10,   41,  313,   70,   11,   10,   80,   48,   49,   10,
 /*  1290 */     6,   11,  202,   48,   49,   10,  206,  207,   48,   49,
 /*  1300 */    11,   48,   49,   48,   49,   48,   49,   91,  218,   10,
 /*  1310 */    80,   72,   73,   74,   75,  225,  226,  227,  228,  229,
 /*  1320 */    10,  231,  232,  233,  234,   11,  236,   10,  238,  239,
 /*  1330 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  1340 */   250,  251,  252,  253,  254,   10,  256,  257,   10,   10,
 /*  1350 */    10,   10,   10,  162,  163,  164,  165,  166,  167,  168,
 /*  1360 */   169,   10,   48,   49,  125,  126,  127,  128,  129,  130,
 /*  1370 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1380 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  1390 */   151,  152,  153,  202,    0,    1,   10,  206,  207,   10,
 /*  1400 */    10,   10,   10,   10,   91,   11,   10,   10,   10,  218,
 /*  1410 */    11,   10,   10,   10,   10,   68,  225,  226,  227,  228,
 /*  1420 */   229,   11,  231,  232,  233,  234,   69,  236,   11,  238,
 /*  1430 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  1440 */   249,  250,  251,  252,  253,  254,   11,  256,  257,   11,
 /*  1450 */   162,  163,  164,  165,  166,  167,  168,  169,   48,   49,
 /*  1460 */    11,   11,   11,  104,   11,   48,   49,   11,   10,   69,
 /*  1470 */    11,   11,   11,   79,   80,   10,   10,   10,   10,   10,
 /*  1480 */    67,   10,   94,   48,   49,   10,   48,   49,   10,   10,
 /*  1490 */   202,   10,   10,   86,  206,  207,   10,   48,   49,   48,
 /*  1500 */    49,   48,   49,   10,   48,   49,  218,   48,   49,   48,
 /*  1510 */    49,   11,   11,  225,  226,  227,  228,  229,   11,  231,
 /*  1520 */   232,  233,  234,    3,  236,   11,  238,  239,  240,  241,
 /*  1530 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  1540 */   252,  253,  254,   11,  256,  257,  162,  163,  164,  165,
 /*  1550 */   166,  167,  168,  169,   41,   48,   49,    3,    3,   86,
 /*  1560 */    86,   10,   48,   49,    6,    6,  102,   55,  114,  114,
 /*  1570 */    47,   62,   61,   65,   10,    7,   11,   10,    8,   10,
 /*  1580 */    48,   49,   11,   11,   10,   12,  202,   11,   10,   10,
 /*  1590 */   206,  207,   11,   11,   11,   11,   10,   34,   32,   11,
 /*  1600 */    11,   10,  218,   11,   11,   10,   26,   11,   11,  225,
 /*  1610 */   226,  227,  228,  229,   10,  231,  232,  233,  234,   10,
 /*  1620 */   236,   11,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  1630 */   246,  247,  248,  249,  250,  251,  252,  253,  254,   10,
 /*  1640 */   256,  257,   11,   10,   29,   11,   11,   11,   10,  102,
 /*  1650 */    11,   11,   34,  162,  163,  164,  165,  166,  167,  168,
 /*  1660 */   169,   10,   10,  122,   11,   11,   89,  124,   11,    8,
 /*  1670 */   108,  321,  321,  321,  321,  321,  101,  321,  321,  321,
 /*  1680 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  1690 */   321,  321,  321,  202,  321,  321,  321,  206,  207,  321,
 /*  1700 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  1710 */   321,  321,  321,  321,  321,  321,  225,  226,  227,  228,
 /*  1720 */   229,  321,  231,  232,  233,  234,  321,  236,  321,  238,
 /*  1730 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  1740 */   249,  250,  251,  252,  253,  254,  321,  256,  257,  162,
 /*  1750 */   163,  164,  165,  166,  167,  168,  169,  321,  321,  321,
 /*  1760 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  1770 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  1780 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  202,
 /*  1790 */   321,  321,  321,  206,  207,  321,  321,  321,  321,  321,
 /*  1800 */   321,  321,  321,  321,  321,  218,  321,  321,  321,  321,
 /*  1810 */   321,  321,  321,  226,  227,  228,  229,  321,  231,  232,
 /*  1820 */   233,  234,  321,  236,  321,  238,  239,  240,  241,  242,
 /*  1830 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  1840 */   253,  254,  321,  256,  257,  321,  321,  321,  321,  321,
 /*  1850 */   321,  321,  321,  321,  321,  321,  162,  163,  164,  165,
 /*  1860 */   166,  167,  168,  169,  321,  321,  321,  321,  321,  321,
 /*  1870 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  1880 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  1890 */   321,  321,  321,  321,  321,  321,  202,  321,  321,  321,
 /*  1900 */   206,  207,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  1910 */   321,  321,  218,  162,  163,  164,  165,  166,  167,  168,
 /*  1920 */   169,  227,  228,  229,  321,  231,  232,  233,  234,  321,
 /*  1930 */   236,  321,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  1940 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  321,
 /*  1950 */   256,  257,  321,  202,  321,  321,  321,  206,  207,  321,
 /*  1960 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  1970 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  228,
 /*  1980 */   229,  321,  231,  232,  233,  234,  321,  236,  321,  238,
 /*  1990 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  2000 */   249,  250,  251,  252,  253,  254,  321,  256,  257,  321,
 /*  2010 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  162,
 /*  2020 */   163,  164,  165,  166,  167,  168,  169,  321,  321,  321,
 /*  2030 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2040 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2050 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  202,
 /*  2060 */   321,  321,  321,  206,  207,  321,  321,  321,  321,  321,
 /*  2070 */   321,  321,  321,  321,  321,  218,  321,  321,  321,  321,
 /*  2080 */   162,  163,  164,  165,  166,  167,  168,  169,  321,  321,
 /*  2090 */   321,  234,  321,  236,  321,  238,  239,  240,  241,  242,
 /*  2100 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  2110 */   253,  254,  321,  256,  257,  321,  321,  321,  321,  321,
 /*  2120 */   202,  321,  321,  321,  206,  207,  321,  321,  321,  321,
 /*  2130 */   321,  321,  321,  321,  321,  321,  218,  321,  321,  321,
 /*  2140 */   321,  321,  321,  321,  321,  321,  321,  321,  162,  163,
 /*  2150 */   164,  165,  166,  167,  168,  169,  299,  239,  240,  241,
 /*  2160 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  2170 */   252,  253,  254,    2,  256,  257,    5,  321,  321,  321,
 /*  2180 */   321,   10,  321,  321,  321,  321,  321,  269,  202,  321,
 /*  2190 */   272,  273,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  2200 */   321,  321,  321,  321,  218,  321,  321,  321,  321,  321,
 /*  2210 */   321,  321,  321,   42,  321,  321,  321,  321,  321,  321,
 /*  2220 */   234,  321,  236,  321,  238,  239,  240,  241,  242,  243,
 /*  2230 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2240 */   254,  321,  256,  257,  162,  163,  164,  165,  166,  167,
 /*  2250 */   168,  169,   81,  321,  162,  321,  164,  165,  166,  167,
 /*  2260 */   321,  169,  321,  321,  162,  321,  164,  165,  166,  167,
 /*  2270 */   321,  169,  101,  102,  321,  321,  321,  321,  321,  321,
 /*  2280 */   321,  321,  321,  321,  202,  321,  321,  321,  206,  207,
 /*  2290 */   321,  321,  321,  321,  202,  321,  321,  321,  321,  321,
 /*  2300 */   218,  321,  321,  321,  202,  321,  321,  321,  321,  321,
 /*  2310 */   218,  321,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  2320 */   218,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  2330 */   248,  249,  250,  251,  252,  253,  254,  321,  256,  257,
 /*  2340 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2350 */   321,  321,  202,  321,  272,  273,  206,  207,  321,  321,
 /*  2360 */   321,  321,  321,  321,  321,  321,  321,  321,  218,  321,
 /*  2370 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2380 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  239,
 /*  2390 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  2400 */   250,  251,  252,  253,  254,  321,  256,  257,  162,  163,
 /*  2410 */   164,  165,  166,  167,  168,  169,  321,  162,  321,  164,
 /*  2420 */   165,  166,  167,  321,  169,  321,  321,  321,  321,  321,
 /*  2430 */   280,  281,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2440 */   321,  321,  321,  321,  321,  321,  321,  321,  202,  321,
 /*  2450 */   321,  321,  206,  207,  321,  321,  321,  202,  321,  321,
 /*  2460 */   321,  321,  321,  321,  218,  321,  321,  321,  321,  321,
 /*  2470 */   321,  321,  321,  218,  321,  321,  321,  321,  321,  321,
 /*  2480 */   321,  321,  321,  321,  321,  239,  240,  241,  242,  243,
 /*  2490 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2500 */   254,  321,  256,  257,  321,  321,  321,  321,  321,  321,
 /*  2510 */   321,  321,  321,  321,  321,  162,  163,  164,  165,  166,
 /*  2520 */   167,  168,  169,  321,  321,  321,  321,  321,  321,  321,
 /*  2530 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2540 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2550 */   321,  321,  321,  321,  321,  202,  321,  321,  321,  206,
 /*  2560 */   207,  321,  321,  321,  321,  319,  321,  321,  321,  321,
 /*  2570 */   321,  218,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  2580 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  236,
 /*  2590 */   321,  321,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  2600 */   247,  248,  249,  250,  251,  252,  253,  254,  321,  256,
 /*  2610 */   257,  321,  202,  321,  321,  321,  206,  207,  321,  321,
 /*  2620 */   321,  321,  321,  321,  321,  321,  321,  321,  218,  321,
 /*  2630 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2640 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  239,
 /*  2650 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  2660 */   250,  251,  252,  253,  254,  321,  256,  257,  321,  321,
 /*  2670 */   321,  321,  321,  321,  321,  321,  321,  321,  162,  163,
 /*  2680 */   164,  165,  166,  167,  168,  169,  321,  321,  321,  321,
 /*  2690 */   321,  281,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2700 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2710 */   321,  321,  321,  321,  321,  321,  321,  321,  202,  321,
 /*  2720 */   321,  321,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  2730 */   321,  321,  321,  321,  218,  162,  163,  164,  165,  166,
 /*  2740 */   167,  168,  169,  321,  321,  321,  321,  321,  321,  321,
 /*  2750 */   321,  321,  321,  321,  321,  239,  240,  241,  242,  243,
 /*  2760 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2770 */   254,  321,  256,  257,  321,  202,  321,  321,  321,  206,
 /*  2780 */   207,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2790 */   321,  218,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2800 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2810 */   321,  321,  321,  240,  241,  242,  243,  244,  245,  246,
 /*  2820 */   247,  248,  249,  250,  251,  252,  253,  254,  321,  256,
 /*  2830 */   257,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2840 */   321,  162,  163,  164,  165,  166,  167,  168,  169,  321,
 /*  2850 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2860 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2870 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2880 */   321,  202,  321,  321,  321,  206,  207,  321,  321,  321,
 /*  2890 */   321,  321,  321,  321,  321,  321,  321,  218,  162,  163,
 /*  2900 */   164,  165,  166,  167,  168,  169,  321,  321,  321,  321,
 /*  2910 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  240,
 /*  2920 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*  2930 */   251,  252,  253,  254,  321,  256,  257,  321,  202,  321,
 /*  2940 */   321,  321,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  2950 */   321,  321,  321,  321,  218,  321,  321,  321,  321,  321,
 /*  2960 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  2970 */   321,  321,  321,  321,  321,  321,  240,  241,  242,  243,
 /*  2980 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2990 */   254,  321,  256,  257,  321,  321,  321,  321,  321,  321,
 /*  3000 */   321,  321,  321,  321,  162,  163,  164,  165,  166,  167,
 /*  3010 */   168,  169,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3020 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3030 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3040 */   321,  321,  321,  321,  202,  321,  321,  321,  206,  207,
 /*  3050 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3060 */   218,  162,  163,  164,  165,  166,  167,  168,  169,  321,
 /*  3070 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3080 */   321,  321,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  3090 */   248,  249,  250,  251,  252,  253,  254,  321,  256,  257,
 /*  3100 */   321,  202,  321,  321,  321,  206,  207,  321,  321,  321,
 /*  3110 */   321,  321,  321,  321,  321,  321,  321,  218,  321,  321,
 /*  3120 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3130 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  240,
 /*  3140 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*  3150 */   251,  252,  253,  254,  321,  256,  257,  321,  321,  321,
 /*  3160 */   321,  321,  321,  321,  321,  321,  321,  162,  163,  164,
 /*  3170 */   165,  166,  167,  168,  169,  321,  321,  321,  321,  321,
 /*  3180 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3190 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3200 */   321,  321,  321,  321,  321,  321,  321,  202,  321,  321,
 /*  3210 */   321,  206,  207,  321,  321,  321,  321,  321,  321,  321,
 /*  3220 */   321,  321,  321,  218,  162,  163,  164,  165,  166,  167,
 /*  3230 */   168,  169,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3240 */   321,  321,  321,  321,  321,  240,  241,  242,  243,  244,
 /*  3250 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
 /*  3260 */   321,  256,  257,  321,  202,  321,  321,  321,  206,  207,
 /*  3270 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3280 */   218,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3290 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3300 */   321,  321,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  3310 */   248,  249,  250,  251,  252,  253,  254,  321,  256,  257,
 /*  3320 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3330 */   162,  163,  164,  165,  166,  167,  168,  169,  321,  321,
 /*  3340 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3350 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3360 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3370 */   202,  321,  321,  321,  206,  207,  321,  321,  321,  321,
 /*  3380 */   321,  321,  321,  321,  321,  321,  218,  162,  163,  164,
 /*  3390 */   165,  166,  167,  168,  169,  321,  321,  321,  321,  321,
 /*  3400 */   321,  321,  321,  321,  321,  321,  321,  321,  240,  241,
 /*  3410 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  3420 */   252,  253,  254,  321,  256,  257,  321,  202,  321,  321,
 /*  3430 */   321,  206,  207,  321,  321,  321,  321,  321,  321,  321,
 /*  3440 */   321,  321,  321,  218,  321,  321,  321,  321,  321,  321,
 /*  3450 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3460 */   321,  321,  321,  321,  321,  240,  241,  242,  243,  244,
 /*  3470 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
 /*  3480 */   321,  256,  257,  321,  321,  321,  321,  321,  321,  321,
 /*  3490 */   321,  321,  321,  162,  163,  164,  165,  166,  167,  168,
 /*  3500 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3510 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3520 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3530 */   321,  321,  321,  202,  321,  321,  321,  206,  207,  321,
 /*  3540 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  3550 */   162,  163,  164,  165,  166,  167,  168,  169,  321,  321,
 /*  3560 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3570 */   321,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  3580 */   249,  250,  251,  252,  253,  254,  321,  256,  257,  321,
 /*  3590 */   202,  321,  321,  321,  206,  207,  321,  321,  321,  321,
 /*  3600 */   321,  321,  321,  321,  321,  321,  218,  321,  321,  321,
 /*  3610 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3620 */   321,  321,  321,  321,  321,  321,  321,  321,  240,  241,
 /*  3630 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  3640 */   252,  253,  254,  321,  256,  257,  321,  321,  321,  321,
 /*  3650 */   321,  321,  321,  321,  321,  321,  162,  163,  164,  165,
 /*  3660 */   166,  167,  168,  169,  321,  321,  321,  321,  321,  321,
 /*  3670 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3680 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3690 */   321,  321,  321,  321,  321,  321,  202,  321,  321,  321,
 /*  3700 */   206,  207,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3710 */   321,  321,  218,  162,  163,  164,  165,  166,  167,  168,
 /*  3720 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3730 */   321,  321,  321,  321,  240,  241,  242,  243,  244,  245,
 /*  3740 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  321,
 /*  3750 */   256,  257,  321,  202,  321,  321,  321,  206,  207,  321,
 /*  3760 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  3770 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3780 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3790 */   321,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  3800 */   249,  250,  251,  252,  253,  254,  321,  256,  257,  321,
 /*  3810 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  162,
 /*  3820 */   163,  164,  165,  166,  167,  168,  169,  321,  321,  321,
 /*  3830 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3840 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3850 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  202,
 /*  3860 */   321,  321,  321,  206,  207,  321,  321,  321,  321,  321,
 /*  3870 */   321,  321,  321,  321,  321,  218,  162,  163,  164,  165,
 /*  3880 */   166,  167,  168,  169,  321,  321,  321,  321,  321,  321,
 /*  3890 */   321,  321,  321,  321,  321,  321,  321,  240,  241,  242,
 /*  3900 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  3910 */   253,  254,  321,  256,  257,  321,  202,  321,  321,  321,
 /*  3920 */   206,  207,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3930 */   321,  321,  218,  321,  321,  321,  321,  321,  321,  321,
 /*  3940 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3950 */   321,  321,  321,  321,  240,  241,  242,  243,  244,  245,
 /*  3960 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  321,
 /*  3970 */   256,  257,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  3980 */   321,  321,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  3990 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4000 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4010 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4020 */   321,  321,  202,  321,  321,  321,  206,  207,  321,  321,
 /*  4030 */   321,  321,  321,  321,  321,  321,  321,  321,  218,  162,
 /*  4040 */   163,  164,  165,  166,  167,  168,  169,  321,  321,  321,
 /*  4050 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4060 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4070 */   250,  251,  252,  253,  254,  321,  256,  257,  321,  202,
 /*  4080 */   321,  321,  321,  206,  207,  321,  321,  321,  321,  321,
 /*  4090 */   321,  321,  321,  321,  321,  218,  321,  321,  321,  321,
 /*  4100 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4110 */   321,  321,  321,  321,  321,  321,  321,  240,  241,  242,
 /*  4120 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  4130 */   253,  254,  321,  256,  257,  321,  321,  321,  321,  321,
 /*  4140 */   321,  321,  321,  321,  321,  162,  163,  164,  165,  166,
 /*  4150 */   167,  168,  169,  321,  321,  321,  321,  321,  321,  321,
 /*  4160 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4170 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4180 */   321,  321,  321,  321,  321,  202,  321,  321,  321,  206,
 /*  4190 */   207,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4200 */   321,  218,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  4210 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4220 */   321,  321,  321,  240,  241,  242,  243,  244,  245,  246,
 /*  4230 */   247,  248,  249,  250,  251,  252,  253,  254,  321,  256,
 /*  4240 */   257,  321,  202,  321,  321,  321,  206,  207,  321,  321,
 /*  4250 */   321,  321,  321,  321,  321,  321,  321,  321,  218,  321,
 /*  4260 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4270 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4280 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4290 */   250,  251,  252,  253,  254,  321,  256,  257,  321,  321,
 /*  4300 */   321,  321,  321,  321,  321,  321,  321,  321,  162,  163,
 /*  4310 */   164,  165,  166,  167,  168,  169,  321,  321,  321,  321,
 /*  4320 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4330 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4340 */   321,  321,  321,  321,  321,  321,  321,  321,  202,  321,
 /*  4350 */   321,  321,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  4360 */   321,  321,  321,  321,  218,  162,  163,  164,  165,  166,
 /*  4370 */   167,  168,  169,  321,  321,  321,  321,  321,  321,  321,
 /*  4380 */   321,  321,  321,  321,  321,  321,  240,  241,  242,  243,
 /*  4390 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  4400 */   254,  321,  256,  257,  321,  202,  321,  321,  321,  206,
 /*  4410 */   207,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4420 */   321,  218,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4430 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4440 */   321,  321,  321,  240,  241,  242,  243,  244,  245,  246,
 /*  4450 */   247,  248,  249,  250,  251,  252,  253,  254,  321,  256,
 /*  4460 */   257,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4470 */   321,  162,  163,  164,  165,  166,  167,  168,  169,  321,
 /*  4480 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4490 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4500 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4510 */   321,  202,  321,  321,  321,  206,  207,  321,  321,  321,
 /*  4520 */   321,  321,  321,  321,  321,  321,  321,  218,  162,  163,
 /*  4530 */   164,  165,  166,  167,  168,  169,  321,  321,  321,  321,
 /*  4540 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  240,
 /*  4550 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*  4560 */   251,  252,  253,  254,  321,  256,  257,  321,  202,  321,
 /*  4570 */   321,  321,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  4580 */   321,  321,  321,  321,  218,  321,  321,  321,  321,  321,
 /*  4590 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4600 */   321,  321,  321,  321,  321,  321,  240,  241,  242,  243,
 /*  4610 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  4620 */   254,  321,  256,  257,  321,  321,  321,  321,  321,  321,
 /*  4630 */   321,  321,  321,  321,  162,  163,  164,  165,  166,  167,
 /*  4640 */   168,  169,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4650 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4660 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4670 */   321,  321,  321,  321,  202,  321,  321,  321,  206,  207,
 /*  4680 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4690 */   218,  162,  163,  164,  165,  166,  167,  168,  169,  321,
 /*  4700 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4710 */   321,  321,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  4720 */   248,  249,  250,  251,  252,  253,  254,  321,  256,  257,
 /*  4730 */   321,  202,  321,  321,  321,  206,  207,  321,  321,  321,
 /*  4740 */   321,  321,  321,  321,  321,  321,  321,  218,  321,  321,
 /*  4750 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4760 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  240,
 /*  4770 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*  4780 */   251,  252,  253,  254,  321,  256,  257,  321,  321,  321,
 /*  4790 */   321,  321,  321,  321,  321,  321,  321,  162,  163,  164,
 /*  4800 */   165,  166,  167,  168,  169,  321,  321,  321,  321,  321,
 /*  4810 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4820 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4830 */   321,  321,  321,  321,  321,  321,  321,  202,  321,  321,
 /*  4840 */   321,  206,  207,  321,  321,  321,  321,  321,  321,  321,
 /*  4850 */   321,  321,  321,  218,  162,  163,  164,  165,  166,  167,
 /*  4860 */   168,  169,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4870 */   321,  321,  321,  321,  321,  240,  241,  242,  243,  244,
 /*  4880 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
 /*  4890 */   321,  256,  257,  321,  202,  321,  321,  321,  206,  207,
 /*  4900 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4910 */   218,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4920 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4930 */   321,  321,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  4940 */   248,  249,  250,  251,  252,  253,  254,  321,  256,  257,
 /*  4950 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4960 */   162,  163,  164,  165,  166,  167,  168,  169,  321,  321,
 /*  4970 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4980 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  4990 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5000 */   202,  321,  321,  321,  206,  207,  321,  321,  321,  321,
 /*  5010 */   321,  321,  321,  321,  321,  321,  218,  162,  163,  164,
 /*  5020 */   165,  166,  167,  168,  169,  321,  321,  321,  321,  321,
 /*  5030 */   321,  321,  321,  321,  321,  321,  321,  321,  240,  241,
 /*  5040 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  5050 */   252,  253,  254,  321,  256,  257,  321,  202,  321,  321,
 /*  5060 */   321,  206,  207,  321,  321,  321,  321,  321,  321,  321,
 /*  5070 */   321,  321,  321,  218,  321,  321,  321,  321,  321,  321,
 /*  5080 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5090 */   321,  321,  321,  321,  321,  240,  241,  242,  243,  244,
 /*  5100 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
 /*  5110 */   321,  256,  257,  321,  321,  321,  321,  321,  321,  321,
 /*  5120 */   321,  321,  321,  162,  163,  164,  165,  166,  167,  168,
 /*  5130 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5140 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5150 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5160 */   321,  321,  321,  202,  321,  321,  321,  206,  207,  321,
 /*  5170 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  5180 */   162,  163,  164,  165,  166,  167,  168,  169,  321,  321,
 /*  5190 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5200 */   321,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  5210 */   249,  250,  251,  252,  253,  254,  321,  256,  257,  321,
 /*  5220 */   202,  321,  321,  321,  206,  207,  321,  321,  321,  321,
 /*  5230 */   321,  321,  321,  321,  321,  321,  218,  321,  321,  321,
 /*  5240 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5250 */   321,  321,  321,  321,  321,  321,  321,  321,  240,  241,
 /*  5260 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  5270 */   252,  253,  254,  321,  256,  257,  321,  321,  321,  321,
 /*  5280 */   321,  321,  321,  321,  321,  321,  162,  163,  164,  165,
 /*  5290 */   166,  167,  168,  169,  321,  321,  321,  321,  321,  321,
 /*  5300 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5310 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5320 */   321,  321,  321,  321,  321,  321,  202,  321,  321,  321,
 /*  5330 */   206,  207,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5340 */   321,  321,  218,  162,  163,  164,  165,  166,  167,  168,
 /*  5350 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5360 */   321,  321,  321,  321,  240,  241,  242,  243,  244,  245,
 /*  5370 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  321,
 /*  5380 */   256,  257,  321,  202,  321,  321,  321,  206,  207,  321,
 /*  5390 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  5400 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5410 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5420 */   321,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  5430 */   249,  250,  251,  252,  253,  254,  321,  256,  257,  321,
 /*  5440 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  162,
 /*  5450 */   163,  164,  165,  166,  167,  168,  169,  321,  321,  321,
 /*  5460 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5470 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5480 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  202,
 /*  5490 */   321,  321,  321,  206,  207,  321,  321,  321,  321,  321,
 /*  5500 */   321,  321,  321,  321,  321,  218,  162,  163,  164,  165,
 /*  5510 */   166,  167,  168,  169,  321,  321,  321,  321,  321,  321,
 /*  5520 */   321,  321,  321,  321,  321,  321,  321,  240,  241,  242,
 /*  5530 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  5540 */   253,  254,  321,  256,  257,  321,  202,  321,  321,  321,
 /*  5550 */   206,  207,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5560 */   321,  321,  218,  321,  321,  321,  321,  321,  321,  321,
 /*  5570 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5580 */   321,  321,  321,  321,  240,  241,  242,  243,  244,  245,
 /*  5590 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  321,
 /*  5600 */   256,  257,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5610 */   321,  321,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  5620 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5630 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5640 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5650 */   321,  321,  202,  321,  321,  321,  206,  207,  321,  321,
 /*  5660 */   321,  321,  321,  321,  321,  321,  321,  321,  218,  162,
 /*  5670 */   163,  164,  165,  166,  167,  168,  169,  321,  321,  321,
 /*  5680 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5690 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  5700 */   250,  251,  252,  253,  254,  321,  256,  257,  321,  202,
 /*  5710 */   321,  321,  321,  206,  207,  321,  321,  321,  321,  321,
 /*  5720 */   321,  321,  321,  321,  321,  218,  321,  321,  321,  321,
 /*  5730 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5740 */   321,  321,  321,  321,  321,  321,  321,  240,  241,  242,
 /*  5750 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  5760 */   253,  254,  321,  256,  257,  321,  321,  321,  321,  321,
 /*  5770 */   321,  321,  321,  321,  321,  162,  163,  164,  165,  166,
 /*  5780 */   167,  168,  169,  321,  321,  321,  321,  321,  321,  321,
 /*  5790 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5800 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5810 */   321,  321,  321,  321,  321,  202,  321,  321,  321,  206,
 /*  5820 */   207,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5830 */   321,  218,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  5840 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5850 */   321,  321,  321,  240,  241,  242,  243,  244,  245,  246,
 /*  5860 */   247,  248,  249,  250,  251,  252,  253,  254,  321,  256,
 /*  5870 */   257,  321,  202,  321,  321,  321,  206,  207,  321,  321,
 /*  5880 */   321,  321,  321,  321,  321,  321,  321,  321,  218,  321,
 /*  5890 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5900 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5910 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  5920 */   250,  251,  252,  253,  254,  321,  256,  257,  321,  321,
 /*  5930 */   321,  321,  321,  321,  321,  321,  321,  321,  162,  163,
 /*  5940 */   164,  165,  166,  167,  168,  169,  321,  321,  321,  321,
 /*  5950 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5960 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  5970 */   321,  321,  321,  321,  321,  321,  321,  321,  202,  321,
 /*  5980 */   321,  321,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  5990 */   321,  321,  321,  321,  218,  162,  163,  164,  165,  166,
 /*  6000 */   167,  168,  169,  321,  321,  321,  321,  321,  321,  321,
 /*  6010 */   321,  321,  321,  321,  321,  321,  240,  241,  242,  243,
 /*  6020 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  6030 */   254,  321,  256,  257,  321,  202,  321,  321,  321,  206,
 /*  6040 */   207,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6050 */   321,  218,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6060 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6070 */   321,  321,  321,  240,  241,  242,  243,  244,  245,  246,
 /*  6080 */   247,  248,  249,  250,  251,  252,  253,  254,  321,  256,
 /*  6090 */   257,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6100 */   321,  162,  163,  164,  165,  166,  167,  168,  169,  321,
 /*  6110 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6120 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6130 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6140 */   321,  202,  321,  321,  321,  206,  207,  321,  321,  321,
 /*  6150 */   321,  321,  321,  321,  321,  321,  321,  218,  162,  163,
 /*  6160 */   164,  165,  166,  167,  168,  169,  321,  321,  321,  321,
 /*  6170 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  240,
 /*  6180 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*  6190 */   251,  252,  253,  254,  321,  256,  257,  321,  202,  321,
 /*  6200 */   321,  321,  206,  207,  321,  321,  321,  321,  321,  321,
 /*  6210 */   321,  321,  321,  321,  218,  321,  321,  321,  321,  321,
 /*  6220 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6230 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6240 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  6250 */   254,  321,  256,  257,  321,  321,  321,  321,  321,  321,
 /*  6260 */   321,  159,  321,  321,  162,  321,  164,  165,  166,  167,
 /*  6270 */   321,  169,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6280 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6290 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6300 */   321,  321,  321,  321,  202,  321,  159,  321,  321,  162,
 /*  6310 */   321,  164,  165,  166,  167,  321,  169,  321,  321,  321,
 /*  6320 */   218,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6330 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6340 */   159,  321,  321,  162,  321,  164,  165,  166,  167,  202,
 /*  6350 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  257,
 /*  6360 */   258,  259,  260,  261,  262,  218,  264,  321,  266,  267,
 /*  6370 */   268,  321,  321,  321,  159,  321,  321,  162,  321,  164,
 /*  6380 */   165,  166,  167,  202,  169,  283,  321,  285,  321,  287,
 /*  6390 */   288,  289,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  6400 */   321,  321,  321,  321,  257,  258,  259,  260,  261,  262,
 /*  6410 */   321,  264,  321,  266,  267,  268,  314,  202,  321,  321,
 /*  6420 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6430 */   283,  321,  285,  218,  287,  288,  289,  321,  257,  258,
 /*  6440 */   259,  260,  261,  262,  321,  264,  321,  266,  267,  268,
 /*  6450 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6460 */   321,  321,  321,  321,  283,  321,  285,  321,  287,  288,
 /*  6470 */   289,  321,  257,  258,  259,  260,  261,  262,  321,  264,
 /*  6480 */   321,  266,  267,  268,  321,  321,  321,  321,  321,  321,
 /*  6490 */   321,  321,  321,  321,  321,  321,  321,  321,  283,  321,
 /*  6500 */   285,  321,  287,  288,  289,  159,  321,  321,  162,  321,
 /*  6510 */   164,  165,  166,  167,  321,  169,  321,  321,  321,  321,
 /*  6520 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6530 */   321,  321,  162,  163,  164,  165,  166,  167,  168,  169,
 /*  6540 */   321,  321,  162,  321,  164,  165,  166,  167,  202,  169,
 /*  6550 */   159,  321,  321,  162,  321,  164,  165,  166,  167,  321,
 /*  6560 */   169,  321,  321,  321,  218,  321,  321,  321,  321,  321,
 /*  6570 */   321,  321,  202,  321,  321,  321,  206,  321,  321,  321,
 /*  6580 */   321,  321,  202,  321,  321,  321,  321,  321,  218,  321,
 /*  6590 */   321,  321,  321,  202,  321,  321,  321,  321,  218,  321,
 /*  6600 */   321,  321,  321,  257,  258,  259,  260,  261,  262,  218,
 /*  6610 */   264,  321,  266,  267,  268,  245,  246,  247,  248,  249,
 /*  6620 */   250,  251,  252,  253,  254,  321,  256,  257,  321,  283,
 /*  6630 */   321,  285,  321,  287,  288,  289,  321,  257,  321,  159,
 /*  6640 */   260,  321,  162,  321,  164,  165,  166,  167,  257,  169,
 /*  6650 */   321,  260,  261,  262,  263,  264,  321,  266,  267,  268,
 /*  6660 */   321,  321,  321,  283,  321,  285,  321,  287,  288,  289,
 /*  6670 */   321,  321,  321,  321,  283,  321,  285,  321,  287,  288,
 /*  6680 */   289,  321,  202,  321,  321,  321,  321,  321,  321,  321,
 /*  6690 */   321,  321,  321,  321,  321,  321,  159,  321,  218,  162,
 /*  6700 */   321,  164,  165,  166,  167,  321,  169,  321,  321,  321,
 /*  6710 */   321,  321,  321,  321,  321,  321,  162,  321,  164,  165,
 /*  6720 */   166,  167,  168,  169,  321,  321,  321,  321,  321,  321,
 /*  6730 */   321,  321,  321,  321,  321,  321,  321,  257,  321,  202,
 /*  6740 */   260,  261,  262,  263,  264,  321,  266,  267,  268,  321,
 /*  6750 */   321,  321,  321,  321,  321,  218,  202,  321,  321,  321,
 /*  6760 */   321,  321,  321,  283,  321,  285,  321,  287,  288,  289,
 /*  6770 */   159,  321,  218,  162,  321,  164,  165,  166,  167,  321,
 /*  6780 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6790 */   321,  321,  321,  321,  257,  321,  321,  260,  261,  262,
 /*  6800 */   263,  264,  248,  266,  267,  268,  252,  321,  321,  321,
 /*  6810 */   256,  159,  321,  202,  162,  321,  164,  165,  166,  167,
 /*  6820 */   283,  169,  285,  321,  287,  288,  289,  321,  321,  218,
 /*  6830 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6840 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6850 */   321,  297,  298,  321,  202,  321,  321,  321,  321,  321,
 /*  6860 */   321,  321,  321,  321,  321,  321,  321,  321,  257,  321,
 /*  6870 */   218,  260,  261,  262,  263,  264,  321,  266,  267,  268,
 /*  6880 */   321,  321,  162,  321,  164,  165,  166,  167,  168,  169,
 /*  6890 */   321,  321,  321,  321,  283,  321,  285,  321,  287,  288,
 /*  6900 */   289,  321,  321,  321,  321,  321,  321,  321,  321,  257,
 /*  6910 */   321,  321,  260,  321,  321,  263,  264,  265,  266,  267,
 /*  6920 */   268,  321,  202,  159,  321,  321,  162,  321,  164,  165,
 /*  6930 */   166,  167,  321,  169,  321,  283,  321,  285,  218,  287,
 /*  6940 */   288,  289,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  6950 */   321,  321,  321,  321,  321,  321,  321,  159,  321,  321,
 /*  6960 */   162,  321,  164,  165,  166,  167,  202,  169,  248,  321,
 /*  6970 */   321,  321,  252,  321,  321,  321,  256,  321,  321,  321,
 /*  6980 */   321,  321,  218,  321,  321,  321,  321,  321,  321,  321,
 /*  6990 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7000 */   202,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7010 */   321,  321,  321,  321,  321,  321,  218,  321,  298,  321,
 /*  7020 */   321,  257,  321,  321,  260,  321,  321,  263,  264,  265,
 /*  7030 */   266,  267,  268,  159,  321,  321,  162,  321,  164,  165,
 /*  7040 */   166,  167,  321,  169,  321,  321,  321,  283,  321,  285,
 /*  7050 */   321,  287,  288,  289,  321,  257,  321,  321,  260,  261,
 /*  7060 */   262,  321,  264,  321,  266,  267,  268,  321,  321,  321,
 /*  7070 */   321,  321,  321,  321,  321,  321,  202,  321,  321,  321,
 /*  7080 */   321,  283,  321,  285,  321,  287,  288,  289,  321,  321,
 /*  7090 */   159,  321,  218,  162,  321,  164,  165,  166,  167,  321,
 /*  7100 */   169,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7110 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7120 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7130 */   321,  257,  321,  202,  260,  261,  262,  321,  264,  321,
 /*  7140 */   266,  267,  268,  321,  321,  321,  321,  321,  321,  218,
 /*  7150 */   321,  321,  321,  321,  321,  321,  321,  283,  321,  285,
 /*  7160 */   321,  287,  288,  289,  321,  321,  321,  321,  321,  321,
 /*  7170 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7180 */   321,  321,  321,  321,  321,  321,  321,  321,  257,  321,
 /*  7190 */   321,  260,  261,  262,  321,  264,  321,  266,  267,  268,
 /*  7200 */   159,  321,  321,  162,  321,  164,  165,  166,  167,  321,
 /*  7210 */   169,  321,  321,  321,  283,  321,  285,  321,  287,  288,
 /*  7220 */   289,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7230 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7240 */   321,  159,  321,  202,  162,  321,  164,  165,  166,  167,
 /*  7250 */   321,  169,  321,  321,  321,  321,  321,  321,  321,  218,
 /*  7260 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7270 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7280 */   321,  321,  321,  321,  202,  321,  321,  321,  321,  321,
 /*  7290 */   321,  321,  321,  321,  321,  321,  321,  321,  257,  321,
 /*  7300 */   218,  260,  261,  262,  321,  264,  321,  266,  267,  268,
 /*  7310 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7320 */   321,  321,  321,  321,  283,  321,  285,  321,  287,  288,
 /*  7330 */   289,  321,  321,  321,  321,  321,  321,  321,  321,  257,
 /*  7340 */   321,  321,  260,  321,  321,  321,  264,  265,  266,  267,
 /*  7350 */   268,  159,  321,  321,  162,  321,  164,  165,  166,  167,
 /*  7360 */   321,  169,  321,  321,  321,  283,  321,  285,  321,  287,
 /*  7370 */   288,  289,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7380 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7390 */   321,  321,  321,  321,  202,  321,  321,  321,  321,  321,
 /*  7400 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7410 */   218,  162,  321,  164,  165,  166,  167,  321,  169,  321,
 /*  7420 */   321,  321,  162,  321,  164,  165,  166,  167,  321,  169,
 /*  7430 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7440 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  257,
 /*  7450 */   321,  202,  260,  321,  321,  321,  264,  265,  266,  267,
 /*  7460 */   268,  321,  202,  321,  321,  321,  321,  218,  321,  321,
 /*  7470 */   321,  321,  321,  321,  321,  283,  321,  285,  218,  287,
 /*  7480 */   288,  289,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7490 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7500 */   321,  321,  321,  321,  321,  321,  257,  321,  321,  260,
 /*  7510 */   321,  162,  321,  164,  165,  166,  167,  257,  169,  270,
 /*  7520 */   260,  321,  321,  321,  275,  321,  321,  321,  321,  321,
 /*  7530 */   321,  321,  283,  321,  285,  321,  287,  288,  289,  321,
 /*  7540 */   321,  321,  321,  283,  321,  285,  321,  287,  288,  289,
 /*  7550 */   321,  202,  321,  321,  321,  321,  321,  162,  321,  164,
 /*  7560 */   165,  166,  167,  321,  169,  321,  321,  218,  321,  321,
 /*  7570 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7580 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7590 */   321,  321,  321,  321,  321,  321,  321,  202,  321,  321,
 /*  7600 */   321,  321,  321,  321,  321,  321,  257,  321,  321,  260,
 /*  7610 */   321,  321,  321,  218,  321,  321,  321,  321,  321,  321,
 /*  7620 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7630 */   321,  321,  283,  321,  285,  321,  287,  288,  289,  321,
 /*  7640 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7650 */   321,  321,  257,  321,  321,  260,  321,  321,  321,  321,
 /*  7660 */   321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 /*  7670 */   321,  321,  321,  321,  321,  321,  321,  321,  283,  321,
 /*  7680 */   285,  321,  287,  288,  289,
);
  const YY_SHIFT_USE_DFLT = -21;
  const YY_SHIFT_MAX = 423;
static $yy_shift_ofst = array(
 /*     0 */   371,  218,  218,  370,  522,  522,  522,  522,  522,  522,
 /*    10 */   522,  522,  894, 1046, 1087, 1046, 1239, 1239,  674, 1239,
 /*    20 */  1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
 /*    30 */  1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
 /*    40 */  1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
 /*    50 */  1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
 /*    60 */  1239, 1239, 1239, 1239,  149,  222,  222,  222, 2171,  149,
 /*    70 */   149,  149,  149,  526,  543,  915,  999,  999,  976,  999,
 /*    80 */   149,  149,  149,  149,  149,  149,  830,  263,  263,  263,
 /*    90 */   263,   40,  371,   40,    4,   40,   40,   40,   40,  150,
 /*   100 */    40,   40,   40,   40,   40,  150,   10,  421,   10,   10,
 /*   110 */    10,   10,   10,   10,  231,   14,   14,   74,  486,  559,
 /*   120 */    25,  144,   10,   10,   10,   10,   10,  -20,   81,  224,
 /*   130 */   494, 1004,   53,  131,  131,  321,  321,   62,  689,  854,
 /*   140 */  1082,  498,  439,  581,  671,  686,  692,  696,  749,  963,
 /*   150 */  1057, 1085, 1093, 1098, 1117,  736, 1121, 1156, 1197, 1199,
 /*   160 */  1250,  782, 1253,  957, 1255, 1257, 1314, 1410, 1417, 1435,
 /*   170 */  1438, 1245, 1449, 1451, 1453, 1456, 1459, 1461, 1507, 1514,
 /*   180 */  1532,   16,   50,  775,  775,  724,  212,  254,  212,  310,
 /*   190 */   310,  361,  402,  308,  431,  453,   65,  714,  650,  682,
 /*   200 */   738,  758,  797,  867,  798,  798,  901,  924,  925,  994,
 /*   210 */  1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
 /*   220 */  1011, 1011, 1084, 1149, 1084, 1149, 1084, 1149, 1084, 1172,
 /*   230 */  1172, 1208, 1259, 1259, 1208, 1146, 1173,  848,  900, 1394,
 /*   240 */   911,  997,  463,  463,  175,  545,  840,  386,  270,  633,
 /*   250 */   312,  791,  449,  527,  619,  851,  531,  719,  834,  926,
 /*   260 */   941,  960,  977,  989,  996,  606, 1132, 1133,  845,  845,
 /*   270 */  1229, 1231, 1240, 1270, 1213, 1273, 1275, 1206, 1279, 1284,
 /*   280 */  1280, 1285, 1289, 1216, 1230, 1206, 1299, 1310, 1317, 1335,
 /*   290 */  1338, 1339, 1340, 1341, 1342, 1351, 1386, 1389, 1390, 1391,
 /*   300 */  1392, 1393, 1396, 1397, 1398, 1399, 1401, 1402, 1403, 1404,
 /*   310 */  1458, 1465, 1466, 1467, 1468, 1469, 1471, 1475, 1478, 1479,
 /*   320 */  1482, 1486, 1313, 1347, 1357, 1347, 1400, 1359, 1450, 1413,
 /*   330 */  1481, 1284, 1460, 1388, 1407, 1493, 1284, 1500, 1206, 1206,
 /*   340 */  1206, 1206, 1206, 1206, 1206, 1501, 1513, 1520, 1554, 1555,
 /*   350 */  1473, 1558, 1413, 1474, 1559, 1413, 1464, 1551, 1454, 1455,
 /*   360 */  1523, 1512, 1509, 1508, 1511, 1564, 1565, 1284, 1567, 1568,
 /*   370 */  1570, 1571, 1569, 1572, 1573, 1574, 1576, 1578, 1581, 1582,
 /*   380 */  1579, 1583, 1584, 1586, 1588, 1589, 1591, 1592, 1593, 1595,
 /*   390 */  1596, 1604, 1597, 1609, 1610, 1629, 1631, 1633, 1634, 1580,
 /*   400 */  1635, 1615, 1566, 1636, 1563, 1638, 1639, 1640, 1618, 1651,
 /*   410 */  1652, 1653, 1654, 1547, 1541, 1577, 1413, 1543, 1284, 1657,
 /*   420 */  1575, 1661, 1562, 1413,
);
  const YY_REDUCE_USE_DFLT = -193;
  const YY_REDUCE_MAX = 236;
static $yy_reduce_ofst = array(
 /*     0 */     5, -159,  -49,  627,  525, 1090, 1191, 1288, 1384, 1491,
 /*    10 */  1587, 1694, 1751, 1857, 1918, 1986, 2082, 2150, 2246, 2353,
 /*    20 */  2410, 2516, 2573, 2679, 2736, 2842, 2899, 3005, 3062, 3168,
 /*    30 */  3225, 3331, 3388, 3494, 3551, 3657, 3714, 3820, 3877, 3983,
 /*    40 */  4040, 4146, 4203, 4309, 4366, 4472, 4529, 4635, 4692, 4798,
 /*    50 */  4855, 4961, 5018, 5124, 5181, 5287, 5344, 5450, 5507, 5613,
 /*    60 */  5670, 5776, 5833, 5939,  688,   80,  229, 5996, 6102, 6147,
 /*    70 */  6181, 6215, 6346, 6370, 6391, 6480, 6537, 6611, 6652, 6764,
 /*    80 */  6798, 6874, 6931, 7041, 7082, 7192, 7249, 6380, 7260, 7349,
 /*    90 */  7395, 6554,  118, 6720, -130,  373,  795,  537,  896,  -35,
 /*   100 */   905,  946, 2092, 2102, 2255,  -23,  138,  178,  773,  987,
 /*   110 */   272,  418,  466,  291,  440,  440,  452, -127,  109,   71,
 /*   120 */   191,  388,  173,  388,  455,  469,  475, -162, -111, -161,
 /*   130 */   -62,   29,  -85,  184, -192,  -55,  -55,    6,   45,   45,
 /*   140 */    45,  108,   45,   45,   45,   45,   45,   45,   45,   45,
 /*   150 */    45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
 /*   160 */    45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
 /*   170 */    45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
 /*   180 */    45,  147,  -55,   77,  164,  120,  160,   45,  296,  -55,
 /*   190 */   -55,  281,  225,  404,  492,  514,  273,  571,  491,  552,
 /*   200 */   564,  583,  613,  746,  636,  643,  766,  742,  765,  816,
 /*   210 */   866,  869,  878,  880,  887,  913,  931,  943,  951,  954,
 /*   220 */   959,  965,  967,  968,  974,  978, 1012, 1010, 1013, 1015,
 /*   230 */  1018, 1049, 1060, 1063, 1064,  962,  969,
);
static $yy_default = array(
 /*     0 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    10 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    20 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    30 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    40 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    50 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    60 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    70 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    80 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*    90 */  1144, 1144,  740, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   100 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   110 */  1144, 1144, 1144, 1144,  996,  996, 1144,  977, 1022, 1144,
 /*   120 */  1144, 1144, 1144, 1144, 1144, 1144, 1144,  759,  886, 1144,
 /*   130 */  1014,  865, 1061, 1144, 1144,  994,  995, 1144, 1144, 1144,
 /*   140 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   150 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   160 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   170 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   180 */  1144, 1144, 1012, 1144, 1144, 1076,  945,  916,  945, 1012,
 /*   190 */  1010,  991, 1144, 1144,  823,  823, 1104,  739,  982, 1028,
 /*   200 */  1030, 1035,  986,  850, 1065, 1067,  882,  887,  889, 1144,
 /*   210 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   220 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  823,
 /*   230 */   823, 1144, 1144, 1144, 1144, 1080, 1089,  999,  999,  999,
 /*   240 */   999, 1144,  920,  917, 1144,  948, 1144, 1144,  912,  983,
 /*   250 */  1144, 1062, 1144, 1144, 1144, 1144,  771, 1144,  781,  783,
 /*   260 */   785,  794, 1144, 1144, 1144,  843, 1144,  752, 1092, 1093,
 /*   270 */   751, 1144, 1144, 1144, 1144, 1144, 1144,  953, 1000, 1004,
 /*   280 */  1144, 1001, 1144, 1144,  952, 1144, 1144, 1144, 1144, 1144,
 /*   290 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   300 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   310 */  1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
 /*   320 */  1144, 1144, 1144,  898,  904,  899,  928, 1144,  950, 1025,
 /*   330 */  1144, 1027, 1144, 1016, 1042, 1144, 1044, 1144,  954,  956,
 /*   340 */   955,  957,  958,  960,  959, 1144, 1144, 1144, 1144, 1144,
 /*   350 */  1144,  987, 1036, 1144, 1031, 1029, 1144, 1144, 1144, 1144,
 /*   360 */  1144, 1144, 1144, 1144, 1144,  876, 1144,  879, 1144,  763,
 /*   370 */  1144, 1144,  774, 1144,  772,  776, 1144,  778, 1144, 1144,
 /*   380 */   787, 1144, 1144,  789, 1144, 1144,  791, 1144, 1144,  796,
 /*   390 */  1144,  800, 1144,  803, 1144,  806, 1144,  813, 1144, 1144,
 /*   400 */  1144, 1144, 1144, 1144, 1144,  840, 1144, 1144,  844,  845,
 /*   410 */  1144, 1144, 1144, 1144, 1144, 1144, 1090, 1144, 1095, 1144,
 /*   420 */  1144, 1144, 1144, 1105,  736,  737,  741,  742,  743,  946,
 /*   430 */   947,  744,  745,  746,  747,  748,  749,  750,  848,  752,
 /*   440 */   849,  862,  863,  878,  922,  924,  925,  926,  927,  928,
 /*   450 */   929,  930,  931,  932,  933,  934,  935,  751,  936,  937,
 /*   460 */   938,  923,  940,  941,  942,  943,  948,  949,  962,  963,
 /*   470 */   965,  966,  968,  969,  970,  944,  997,  880,  881, 1002,
 /*   480 */  1003,  998, 1005, 1006, 1007, 1008,  950, 1009,  961,  912,
 /*   490 */   913,  915,  918,  919,  921, 1048, 1106, 1107, 1108, 1109,
 /*   500 */  1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
 /*   510 */  1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
 /*   520 */  1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
 /*   530 */  1140, 1141, 1142, 1143, 1039, 1047,  914, 1037, 1038, 1049,
 /*   540 */   999, 1011, 1013, 1023, 1024,  901,  902,  903,  905,  906,
 /*   550 */  1050, 1051, 1052,  907,  900,  909,  910,  911, 1053, 1054,
 /*   560 */  1055, 1056, 1057, 1058, 1059, 1060,  908,  967, 1026, 1015,
 /*   570 */  1017, 1018, 1019, 1020, 1021, 1045, 1043,  964, 1040,  939,
 /*   580 */   976,  971,  984,  985,  974,  975,  978,  979,  980,  981,
 /*   590 */   989,  990,  992,  993,  988, 1033, 1034, 1032,  972,  973,
 /*   600 */  1071, 1072, 1073,  753,  754,  755,  756,  757,  761,  864,
 /*   610 */  1063, 1064, 1066, 1069, 1070, 1068,  868,  869,  870,  871,
 /*   620 */   872,  873,  874,  875,  888,  892,  893,  894,  895,  896,
 /*   630 */   890,  891,  883,  884,  885,  877,  897,  866,  867,  760,
 /*   640 */   851,  852,  853,  854,  855,  856,  857,  858,  859,  860,
 /*   650 */   861,  762,  764,  765,  766,  767,  768,  769,  770,  773,
 /*   660 */   780,  775,  777,  779,  782,  788,  784,  790,  786,  792,
 /*   670 */   793,  795,  797,  798,  799,  801,  802,  812,  811,  804,
 /*   680 */   805,  807,  808,  809,  810,  814,  815,  816,  817,  818,
 /*   690 */   819,  820,  824,  825,  826,  821,  822,  827,  828,  829,
 /*   700 */   833,  834,  835,  836,  837,  839,  841,  842,  830,  838,
 /*   710 */   846,  847, 1074, 1075, 1077, 1078, 1079, 1083, 1082, 1081,
 /*   720 */  1084, 1085, 1086, 1087, 1088, 1091, 1094, 1096, 1098, 1100,
 /*   730 */  1101, 1102, 1099, 1103, 1097,  738,
);

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
static $yyFallback = array(
);

/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
function ParseTrace(/* stream */ $TraceFILE, /* string */ $zTracePrompt){
  $this->yyTraceFILE = $TraceFILE;
  $this->yyTracePrompt = $zTracePrompt;
  if( $this->yyTraceFILE===null ) $this->yyTracePrompt = null;
  else if( $this->yyTracePrompt===null ) $this->yyTraceFILE = null;
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static $yyTokenName = array( 
  '$',             'SEMI',          'NAME',          'INTNUM',      
  'APPROXNUM',     'DEADTOKEN',     'COMMA',         'CHARACTER',   
  'SET',           'CHAR',          'LPAR',          'RPAR',        
  'VARYING',       'VARCHAR',       'NATIONAL',      'NCHAR',       
  'BLOB',          'BIT',           'NUMERIC',       'DECIMAL',     
  'DEC',           'INTEGER',       'SMALLINT',      'FLOAT',       
  'REAL',          'DOUBLE',        'PRECISION',     'DATE',        
  'DATETIME',      'TIME',          'TIMESTAMP',     'WITH',        
  'ZONE',          'INTERVAL',      'TO',            'YEAR',        
  'MONTH',         'DAY',           'HOUR',          'MINUTE',      
  'SECOND',        'PERIOD',        'DEFAULT',       'USER',        
  'CURRENT_USER',  'SESSION_USER',  'SYSTEM_USER',   'NULL',        
  'PLUS_SIGN',     'MINUS_SIGN',    'CONSTRAINT',    'NOT',         
  'UNIQUE',        'AUTO_INCREMENT',  'PRIMARY',       'KEY',         
  'REFERENCES',    'MATCH',         'FULL',          'PARTIAL',     
  'ON',            'UPDATE',        'DELETE',        'CASCADE',     
  'NO',            'ACTION',        'CHECK',         'OR',          
  'AND',           'IS',            'ASTERISK',      'SOLIDUS',     
  'STRING',        'COUNT',         'MAX',           'MIN',         
  'DISTINCT',      'ALL',           'UNION',         'EXCEPT',      
  'INTERSECT',     'SELECT',        'AS',            'LIMIT',       
  'OFFSET',        'ORDER',         'BY',            'ASC',         
  'DESC',          'FROM',          'CROSS',         'JOIN',        
  'NATURAL',       'INNER',         'OUTER',         'LEFT',        
  'RIGHT',         'USING',         'WHERE',         'GROUP',       
  'HAVING',        'VALUES',        'TABLE',         'CORRESPONDING',
  'NULLX',         'TRUE',          'FALSE',         'UNKNOWN',     
  'OP_EQ',         'OP_GTLT',       'OP_LT',         'OP_GT',       
  'OP_LTEQ',       'OP_GTEQ',       'DEFERRABLE',    'INITIALLY',   
  'DEFERRED',      'IMMEDIATE',     'CREATE',        'RESTRICT',    
  'DROP',          'IF',            'EXISTS',        'INSERT',      
  'INTO',          'ABS',           'ACOS',          'ASIN',        
  'ATAN',          'ATAN2',         'CEIL',          'COS',         
  'COT',           'CRC32',         'DEGREES',       'EXP',         
  'FLOOR',         'FORMAT',        'LN',            'LOG',         
  'LOG2',          'LOG10',         'MOD',           'PI',          
  'POW',           'RADIANS',       'ROUND',         'SIGN',        
  'SIN',           'SQRT',          'TAN',           'TRUNCATE',    
  'WEEKDAY',       'WEEKOFYEAR',    'error',         'statement',   
  'query_list',    'query',         'optional_semi',  'query_specification',
  'sql_data_statement',  'sql_schema_statement',  'regular_identifier',  'unsigned_numeric_literal',
  'schema_name',   'unqualified_schema_name',  'identifier',    'actual_identifier',
  'column_name',   'qualified_identifier',  'table_element_list',  'table_element',
  'column_definition',  'table_constraint_definition',  'data_type',     'default_clause',
  'column_constraints',  'column_constraint_definition',  'character_set_specification',  'character_string_type',
  'national_character_string_type',  'binary_large_object_type',  'bit_string_type',  'numeric_type',
  'datetime_type',  'interval_type',  'length',        'exact_numeric_type',
  'approximate_numeric_type',  'precision',     'scale',         'with_time_zone',
  'time_precision',  'timestamp_precision',  'time_fractional_seconds_precision',  'interval_qualifier',
  'start_field',   'end_field',     'single_datetime_field',  'non_second_datetime_field',
  'interval_leading_field_precision',  'interval_fractional_seconds_precision',  'qualified_name',  'default_option',
  'literal',       'signed_numeric_literal',  'general_literal',  'sign',        
  'constraint_name_definition',  'column_constraint',  'constraint_attributes',  'constraint_name',
  'unique_specification',  'references_specification',  'check_constraint_definition',  'referenced_table_and_columns',
  'reference_match_type',  'referential_triggered_action',  'table_name',    'reference_column_list',
  'column_name_list',  'match_type',    'update_rule',   'delete_rule', 
  'referential_action',  'search_condition',  'boolean_term',  'boolean_factor',
  'boolean_test',  'boolean_primary',  'truth_value',   'predicate',   
  'comparison_predicate',  'null_predicate',  'row_value_constructor',  'comp_op',     
  'row_value_constructor_element',  'row_value_constructor_list',  'row_subquery',  'value_expression',
  'numeric_value_expression',  'term',          'math_numeric_value_expression',  'date_value_expression',
  'factor',        'numeric_primary',  'value_expression_primary',  'unsigned_value_specification',
  'column_reference',  'scalar_subquery',  'set_function_specification',  'unsigned_literal',
  'qualifier',     'general_set_function',  'set_function_type',  'set_quantifier',
  'correlation_name',  'subquery',      'query_expression',  'non_join_query_expression',
  'joined_table',  'non_join_query_term',  'query_term',    'corresponding_spec',
  'non_join_query_primary',  'query_primary',  'simple_table',  'table_value_constructor',
  'explicit_table',  'select_list',   'table_expression',  'limit_clause',
  'select_sublist',  'derived_column',  'as_clause',     'from_clause', 
  'where_clause',  'group_by_clause',  'having_clause',  'orderby_clause',
  'orderby_expression_list',  'orderby_expression',  'ordering',      'table_reference',
  'correlation_specification',  'derived_table',  'derived_column_list',  'table_subquery',
  'cross_join',    'qualified_join',  'natural_join',  'join_type',   
  'join_specification',  'outer_join_type',  'join_condition',  'named_columns_join',
  'join_column_list',  'grouping_column_reference_list',  'grouping_column_reference',  'table_value_constructor_list',
  'corresponding_column_list',  'constraint_check_time',  'sql_schema_definition_statement',  'sql_schema_manipulation_statement',
  'table_definition',  'drop_table_statement',  'drop_behaviour',  'drop_if_exists',
  'tables_list',   'sql_data_change_statement',  'delete_statement_searched',  'insert_statement',
  'update_statement_searched',  'delete_statement_where_search',  'insert_columns_and_source',  'insert_column_list',
  'set_clause_list',  'set_clause',    'object_column',  'update_source',
  'update_statement_where_search',
);

/* For tracing reduce actions, the names of all rules are required.
*/
static $yyRuleName = array(
 /*   0 */ "statement ::= query_list",
 /*   1 */ "query_list ::= query SEMI query_list",
 /*   2 */ "query_list ::= query optional_semi",
 /*   3 */ "optional_semi ::=",
 /*   4 */ "optional_semi ::= SEMI",
 /*   5 */ "query ::= query_specification",
 /*   6 */ "query ::= sql_data_statement",
 /*   7 */ "query ::= sql_schema_statement",
 /*   8 */ "regular_identifier ::= NAME",
 /*   9 */ "unsigned_numeric_literal ::= INTNUM",
 /*  10 */ "unsigned_numeric_literal ::= APPROXNUM",
 /*  11 */ "schema_name ::= unqualified_schema_name",
 /*  12 */ "identifier ::= actual_identifier",
 /*  13 */ "actual_identifier ::= regular_identifier",
 /*  14 */ "unqualified_schema_name ::= DEADTOKEN",
 /*  15 */ "column_name ::= identifier",
 /*  16 */ "qualified_identifier ::= identifier",
 /*  17 */ "table_element_list ::= table_element",
 /*  18 */ "table_element_list ::= table_element_list COMMA table_element",
 /*  19 */ "table_element ::= column_definition",
 /*  20 */ "table_element ::= table_constraint_definition",
 /*  21 */ "table_constraint_definition ::= DEADTOKEN",
 /*  22 */ "column_definition ::= column_name data_type default_clause column_constraints",
 /*  23 */ "column_constraints ::=",
 /*  24 */ "column_constraints ::= column_constraint_definition",
 /*  25 */ "column_constraints ::= column_constraints column_constraint_definition",
 /*  26 */ "character_set_specification ::= DEADTOKEN",
 /*  27 */ "data_type ::= character_string_type",
 /*  28 */ "data_type ::= character_string_type CHARACTER SET character_set_specification",
 /*  29 */ "data_type ::= national_character_string_type",
 /*  30 */ "data_type ::= binary_large_object_type",
 /*  31 */ "data_type ::= bit_string_type",
 /*  32 */ "data_type ::= numeric_type",
 /*  33 */ "data_type ::= datetime_type",
 /*  34 */ "data_type ::= interval_type",
 /*  35 */ "character_string_type ::= CHARACTER",
 /*  36 */ "character_string_type ::= CHAR",
 /*  37 */ "character_string_type ::= CHARACTER LPAR length RPAR",
 /*  38 */ "character_string_type ::= CHARACTER VARYING",
 /*  39 */ "character_string_type ::= CHARACTER VARYING LPAR length RPAR",
 /*  40 */ "character_string_type ::= CHAR VARYING",
 /*  41 */ "character_string_type ::= CHAR VARYING LPAR length RPAR",
 /*  42 */ "character_string_type ::= VARCHAR",
 /*  43 */ "character_string_type ::= VARCHAR LPAR length RPAR",
 /*  44 */ "length ::= INTNUM",
 /*  45 */ "national_character_string_type ::= NATIONAL CHARACTER",
 /*  46 */ "national_character_string_type ::= NATIONAL CHARACTER LPAR length RPAR",
 /*  47 */ "national_character_string_type ::= NATIONAL CHAR",
 /*  48 */ "national_character_string_type ::= NATIONAL CHAR LPAR length RPAR",
 /*  49 */ "national_character_string_type ::= NCHAR",
 /*  50 */ "national_character_string_type ::= NCHAR LPAR length RPAR",
 /*  51 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING",
 /*  52 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING LPAR length RPAR",
 /*  53 */ "national_character_string_type ::= NATIONAL CHAR VARYING",
 /*  54 */ "national_character_string_type ::= NATIONAL CHAR VARYING LPAR length RPAR",
 /*  55 */ "national_character_string_type ::= NCHAR VARYING",
 /*  56 */ "national_character_string_type ::= NCHAR VARYING LPAR length RPAR",
 /*  57 */ "binary_large_object_type ::= BLOB",
 /*  58 */ "bit_string_type ::= BIT",
 /*  59 */ "bit_string_type ::= BIT LPAR length RPAR",
 /*  60 */ "bit_string_type ::= BIT VARYING",
 /*  61 */ "bit_string_type ::= BIT VARYING LPAR length RPAR",
 /*  62 */ "numeric_type ::= exact_numeric_type",
 /*  63 */ "numeric_type ::= approximate_numeric_type",
 /*  64 */ "exact_numeric_type ::= NUMERIC",
 /*  65 */ "exact_numeric_type ::= NUMERIC LPAR precision RPAR",
 /*  66 */ "exact_numeric_type ::= NUMERIC LPAR precision COMMA scale RPAR",
 /*  67 */ "exact_numeric_type ::= DECIMAL",
 /*  68 */ "exact_numeric_type ::= DECIMAL LPAR precision RPAR",
 /*  69 */ "exact_numeric_type ::= DECIMAL LPAR precision COMMA scale RPAR",
 /*  70 */ "exact_numeric_type ::= DEC",
 /*  71 */ "exact_numeric_type ::= DEC LPAR precision RPAR",
 /*  72 */ "exact_numeric_type ::= DEC LPAR precision COMMA scale RPAR",
 /*  73 */ "exact_numeric_type ::= INTEGER",
 /*  74 */ "exact_numeric_type ::= SMALLINT",
 /*  75 */ "precision ::= INTNUM",
 /*  76 */ "scale ::= INTNUM",
 /*  77 */ "approximate_numeric_type ::= FLOAT",
 /*  78 */ "approximate_numeric_type ::= FLOAT LPAR precision RPAR",
 /*  79 */ "approximate_numeric_type ::= REAL",
 /*  80 */ "approximate_numeric_type ::= DOUBLE PRECISION",
 /*  81 */ "datetime_type ::= DATE",
 /*  82 */ "datetime_type ::= DATETIME",
 /*  83 */ "datetime_type ::= TIME with_time_zone",
 /*  84 */ "datetime_type ::= TIME LPAR time_precision RPAR with_time_zone",
 /*  85 */ "datetime_type ::= TIMESTAMP with_time_zone",
 /*  86 */ "datetime_type ::= TIMESTAMP LPAR timestamp_precision RPAR with_time_zone",
 /*  87 */ "with_time_zone ::=",
 /*  88 */ "with_time_zone ::= WITH TIME ZONE",
 /*  89 */ "time_precision ::= time_fractional_seconds_precision",
 /*  90 */ "time_fractional_seconds_precision ::= INTNUM",
 /*  91 */ "timestamp_precision ::= time_fractional_seconds_precision",
 /*  92 */ "interval_type ::= INTERVAL interval_qualifier",
 /*  93 */ "interval_qualifier ::= start_field TO end_field",
 /*  94 */ "interval_qualifier ::= single_datetime_field",
 /*  95 */ "start_field ::= non_second_datetime_field",
 /*  96 */ "start_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /*  97 */ "non_second_datetime_field ::= YEAR",
 /*  98 */ "non_second_datetime_field ::= MONTH",
 /*  99 */ "non_second_datetime_field ::= DAY",
 /* 100 */ "non_second_datetime_field ::= HOUR",
 /* 101 */ "non_second_datetime_field ::= MINUTE",
 /* 102 */ "interval_leading_field_precision ::= INTNUM",
 /* 103 */ "end_field ::= non_second_datetime_field",
 /* 104 */ "end_field ::= SECOND",
 /* 105 */ "end_field ::= SECOND LPAR interval_fractional_seconds_precision RPAR",
 /* 106 */ "interval_fractional_seconds_precision ::= INTNUM",
 /* 107 */ "single_datetime_field ::= non_second_datetime_field",
 /* 108 */ "single_datetime_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /* 109 */ "single_datetime_field ::= SECOND",
 /* 110 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision RPAR",
 /* 111 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision COMMA LPAR interval_fractional_seconds_precision RPAR RPAR",
 /* 112 */ "qualified_name ::= qualified_identifier",
 /* 113 */ "qualified_name ::= schema_name PERIOD qualified_identifier",
 /* 114 */ "default_clause ::=",
 /* 115 */ "default_clause ::= DEFAULT default_option",
 /* 116 */ "default_option ::= literal",
 /* 117 */ "default_option ::= USER",
 /* 118 */ "default_option ::= CURRENT_USER",
 /* 119 */ "default_option ::= SESSION_USER",
 /* 120 */ "default_option ::= SYSTEM_USER",
 /* 121 */ "default_option ::= NULL",
 /* 122 */ "literal ::= signed_numeric_literal",
 /* 123 */ "literal ::= general_literal",
 /* 124 */ "signed_numeric_literal ::= unsigned_numeric_literal",
 /* 125 */ "signed_numeric_literal ::= sign unsigned_numeric_literal",
 /* 126 */ "sign ::= PLUS_SIGN",
 /* 127 */ "sign ::= MINUS_SIGN",
 /* 128 */ "column_constraint_definition ::= constraint_name_definition column_constraint constraint_attributes",
 /* 129 */ "constraint_name_definition ::=",
 /* 130 */ "constraint_name_definition ::= CONSTRAINT constraint_name",
 /* 131 */ "constraint_name ::= qualified_name",
 /* 132 */ "column_constraint ::= NOT NULL",
 /* 133 */ "column_constraint ::= unique_specification",
 /* 134 */ "column_constraint ::= references_specification",
 /* 135 */ "column_constraint ::= check_constraint_definition",
 /* 136 */ "unique_specification ::= UNIQUE",
 /* 137 */ "unique_specification ::= AUTO_INCREMENT",
 /* 138 */ "unique_specification ::= PRIMARY KEY",
 /* 139 */ "references_specification ::= REFERENCES referenced_table_and_columns reference_match_type referential_triggered_action",
 /* 140 */ "referenced_table_and_columns ::= table_name",
 /* 141 */ "referenced_table_and_columns ::= table_name LPAR reference_column_list RPAR",
 /* 142 */ "table_name ::= qualified_name",
 /* 143 */ "reference_column_list ::= column_name_list",
 /* 144 */ "column_name_list ::= column_name",
 /* 145 */ "column_name_list ::= column_name_list COMMA column_name",
 /* 146 */ "reference_match_type ::=",
 /* 147 */ "reference_match_type ::= MATCH match_type",
 /* 148 */ "match_type ::= FULL",
 /* 149 */ "match_type ::= PARTIAL",
 /* 150 */ "referential_triggered_action ::=",
 /* 151 */ "referential_triggered_action ::= update_rule",
 /* 152 */ "referential_triggered_action ::= update_rule delete_rule",
 /* 153 */ "referential_triggered_action ::= delete_rule",
 /* 154 */ "referential_triggered_action ::= delete_rule update_rule",
 /* 155 */ "update_rule ::= ON UPDATE referential_action",
 /* 156 */ "delete_rule ::= ON DELETE referential_action",
 /* 157 */ "referential_action ::= CASCADE",
 /* 158 */ "referential_action ::= SET NULL",
 /* 159 */ "referential_action ::= SET DEFAULT",
 /* 160 */ "referential_action ::= NO ACTION",
 /* 161 */ "check_constraint_definition ::= CHECK LPAR search_condition RPAR",
 /* 162 */ "search_condition ::= boolean_term",
 /* 163 */ "search_condition ::= search_condition OR boolean_term",
 /* 164 */ "boolean_term ::= boolean_factor",
 /* 165 */ "boolean_term ::= boolean_term AND boolean_factor",
 /* 166 */ "boolean_factor ::= boolean_test",
 /* 167 */ "boolean_factor ::= NOT boolean_test",
 /* 168 */ "boolean_test ::= boolean_primary",
 /* 169 */ "boolean_test ::= boolean_primary IS truth_value",
 /* 170 */ "boolean_test ::= boolean_primary IS NOT truth_value",
 /* 171 */ "boolean_primary ::= predicate",
 /* 172 */ "boolean_primary ::= LPAR search_condition RPAR",
 /* 173 */ "predicate ::= comparison_predicate",
 /* 174 */ "predicate ::= null_predicate",
 /* 175 */ "comparison_predicate ::= row_value_constructor comp_op row_value_constructor",
 /* 176 */ "row_value_constructor ::= row_value_constructor_element",
 /* 177 */ "row_value_constructor ::= LPAR row_value_constructor_list RPAR",
 /* 178 */ "row_value_constructor ::= row_subquery",
 /* 179 */ "row_value_constructor_element ::= value_expression",
 /* 180 */ "value_expression ::= numeric_value_expression",
 /* 181 */ "numeric_value_expression ::= term",
 /* 182 */ "numeric_value_expression ::= math_numeric_value_expression",
 /* 183 */ "numeric_value_expression ::= date_value_expression",
 /* 184 */ "numeric_value_expression ::= numeric_value_expression sign term",
 /* 185 */ "term ::= factor",
 /* 186 */ "term ::= term ASTERISK factor",
 /* 187 */ "term ::= term SOLIDUS factor",
 /* 188 */ "factor ::= numeric_primary",
 /* 189 */ "factor ::= sign numeric_primary",
 /* 190 */ "numeric_primary ::= value_expression_primary",
 /* 191 */ "value_expression_primary ::= unsigned_value_specification",
 /* 192 */ "value_expression_primary ::= column_reference",
 /* 193 */ "value_expression_primary ::= scalar_subquery",
 /* 194 */ "value_expression_primary ::= set_function_specification",
 /* 195 */ "unsigned_value_specification ::= unsigned_literal",
 /* 196 */ "unsigned_literal ::= unsigned_numeric_literal",
 /* 197 */ "unsigned_literal ::= general_literal",
 /* 198 */ "general_literal ::= STRING",
 /* 199 */ "column_reference ::= column_name",
 /* 200 */ "column_reference ::= qualifier PERIOD column_name",
 /* 201 */ "set_function_specification ::= COUNT LPAR ASTERISK RPAR",
 /* 202 */ "set_function_specification ::= general_set_function",
 /* 203 */ "general_set_function ::= set_function_type LPAR set_quantifier value_expression RPAR",
 /* 204 */ "set_function_type ::= MAX",
 /* 205 */ "set_function_type ::= MIN",
 /* 206 */ "qualifier ::= table_name",
 /* 207 */ "qualifier ::= correlation_name",
 /* 208 */ "correlation_name ::= identifier",
 /* 209 */ "set_quantifier ::=",
 /* 210 */ "set_quantifier ::= DISTINCT",
 /* 211 */ "set_quantifier ::= ALL",
 /* 212 */ "scalar_subquery ::= subquery",
 /* 213 */ "subquery ::= LPAR query_expression RPAR",
 /* 214 */ "query_expression ::= non_join_query_expression",
 /* 215 */ "query_expression ::= joined_table",
 /* 216 */ "non_join_query_expression ::= non_join_query_term",
 /* 217 */ "non_join_query_expression ::= query_expression UNION query_term",
 /* 218 */ "non_join_query_expression ::= query_expression UNION ALL query_term",
 /* 219 */ "non_join_query_expression ::= query_expression UNION corresponding_spec query_term",
 /* 220 */ "non_join_query_expression ::= query_expression UNION ALL corresponding_spec query_term",
 /* 221 */ "non_join_query_expression ::= query_expression EXCEPT query_term",
 /* 222 */ "non_join_query_expression ::= query_expression EXCEPT ALL query_term",
 /* 223 */ "non_join_query_expression ::= query_expression EXCEPT corresponding_spec query_term",
 /* 224 */ "non_join_query_expression ::= query_expression EXCEPT ALL corresponding_spec query_term",
 /* 225 */ "non_join_query_term ::= non_join_query_primary",
 /* 226 */ "non_join_query_term ::= query_term INTERSECT query_primary",
 /* 227 */ "non_join_query_term ::= query_term INTERSECT ALL query_primary",
 /* 228 */ "non_join_query_term ::= query_term INTERSECT corresponding_spec query_primary",
 /* 229 */ "non_join_query_term ::= query_term INTERSECT ALL corresponding_spec query_primary",
 /* 230 */ "non_join_query_primary ::= simple_table",
 /* 231 */ "non_join_query_primary ::= LPAR non_join_query_expression RPAR",
 /* 232 */ "simple_table ::= query_specification",
 /* 233 */ "simple_table ::= table_value_constructor",
 /* 234 */ "simple_table ::= explicit_table",
 /* 235 */ "query_specification ::= SELECT set_quantifier select_list table_expression limit_clause",
 /* 236 */ "select_list ::= ASTERISK",
 /* 237 */ "select_list ::= select_sublist",
 /* 238 */ "select_list ::= select_list COMMA select_sublist",
 /* 239 */ "select_sublist ::= derived_column",
 /* 240 */ "select_sublist ::= qualifier PERIOD ASTERISK",
 /* 241 */ "derived_column ::= value_expression",
 /* 242 */ "derived_column ::= value_expression as_clause",
 /* 243 */ "as_clause ::= column_name",
 /* 244 */ "as_clause ::= AS column_name",
 /* 245 */ "table_expression ::= from_clause where_clause group_by_clause having_clause orderby_clause",
 /* 246 */ "limit_clause ::=",
 /* 247 */ "limit_clause ::= LIMIT INTNUM",
 /* 248 */ "limit_clause ::= LIMIT INTNUM OFFSET INTNUM",
 /* 249 */ "limit_clause ::= LIMIT INTNUM COMMA INTNUM",
 /* 250 */ "orderby_clause ::=",
 /* 251 */ "orderby_clause ::= ORDER BY orderby_expression_list",
 /* 252 */ "orderby_expression_list ::= orderby_expression",
 /* 253 */ "orderby_expression_list ::= orderby_expression_list COMMA orderby_expression",
 /* 254 */ "orderby_expression ::= value_expression ordering",
 /* 255 */ "ordering ::=",
 /* 256 */ "ordering ::= ASC",
 /* 257 */ "ordering ::= DESC",
 /* 258 */ "from_clause ::= FROM table_reference",
 /* 259 */ "from_clause ::= table_reference COMMA table_reference",
 /* 260 */ "table_reference ::= table_name",
 /* 261 */ "table_reference ::= table_name correlation_specification",
 /* 262 */ "table_reference ::= derived_table correlation_specification",
 /* 263 */ "table_reference ::= joined_table",
 /* 264 */ "correlation_specification ::= correlation_name",
 /* 265 */ "correlation_specification ::= AS correlation_name",
 /* 266 */ "correlation_specification ::= correlation_name LPAR derived_column_list RPAR",
 /* 267 */ "correlation_specification ::= AS correlation_name LPAR derived_column_list RPAR",
 /* 268 */ "derived_column_list ::= column_name_list",
 /* 269 */ "derived_table ::= table_subquery",
 /* 270 */ "table_subquery ::= subquery",
 /* 271 */ "joined_table ::= cross_join",
 /* 272 */ "joined_table ::= qualified_join",
 /* 273 */ "joined_table ::= LPAR joined_table RPAR",
 /* 274 */ "cross_join ::= table_reference CROSS JOIN table_reference",
 /* 275 */ "qualified_join ::= table_reference natural_join join_type JOIN table_reference join_specification",
 /* 276 */ "natural_join ::=",
 /* 277 */ "natural_join ::= NATURAL",
 /* 278 */ "join_type ::=",
 /* 279 */ "join_type ::= INNER",
 /* 280 */ "join_type ::= outer_join_type",
 /* 281 */ "join_type ::= outer_join_type OUTER",
 /* 282 */ "join_type ::= UNION",
 /* 283 */ "outer_join_type ::= LEFT",
 /* 284 */ "outer_join_type ::= RIGHT",
 /* 285 */ "outer_join_type ::= FULL",
 /* 286 */ "join_specification ::=",
 /* 287 */ "join_specification ::= join_condition",
 /* 288 */ "join_specification ::= named_columns_join",
 /* 289 */ "join_condition ::= ON search_condition",
 /* 290 */ "named_columns_join ::= USING LPAR join_column_list RPAR",
 /* 291 */ "join_column_list ::= column_name_list",
 /* 292 */ "where_clause ::=",
 /* 293 */ "where_clause ::= WHERE search_condition",
 /* 294 */ "group_by_clause ::=",
 /* 295 */ "group_by_clause ::= GROUP BY grouping_column_reference_list",
 /* 296 */ "grouping_column_reference_list ::= grouping_column_reference",
 /* 297 */ "grouping_column_reference_list ::= grouping_column_reference_list COMMA grouping_column_reference",
 /* 298 */ "grouping_column_reference ::= column_reference",
 /* 299 */ "having_clause ::=",
 /* 300 */ "having_clause ::= HAVING search_condition",
 /* 301 */ "table_value_constructor ::= VALUES table_value_constructor_list",
 /* 302 */ "table_value_constructor_list ::= row_value_constructor",
 /* 303 */ "explicit_table ::= TABLE table_name",
 /* 304 */ "query_term ::= non_join_query_term",
 /* 305 */ "query_term ::= joined_table",
 /* 306 */ "corresponding_spec ::= CORRESPONDING",
 /* 307 */ "corresponding_spec ::= CORRESPONDING BY LPAR corresponding_column_list RPAR",
 /* 308 */ "corresponding_column_list ::= column_name_list",
 /* 309 */ "query_primary ::= non_join_query_primary",
 /* 310 */ "query_primary ::= joined_table",
 /* 311 */ "row_value_constructor_list ::= row_value_constructor_element",
 /* 312 */ "row_value_constructor_list ::= row_value_constructor_list COMMA row_value_constructor_element",
 /* 313 */ "row_subquery ::= NULLX",
 /* 314 */ "truth_value ::= TRUE",
 /* 315 */ "truth_value ::= FALSE",
 /* 316 */ "truth_value ::= UNKNOWN",
 /* 317 */ "comp_op ::= OP_EQ",
 /* 318 */ "comp_op ::= OP_GTLT",
 /* 319 */ "comp_op ::= OP_LT",
 /* 320 */ "comp_op ::= OP_GT",
 /* 321 */ "comp_op ::= OP_LTEQ",
 /* 322 */ "comp_op ::= OP_GTEQ",
 /* 323 */ "null_predicate ::= column_reference IS NULLX",
 /* 324 */ "null_predicate ::= column_reference IS NOT NULLX",
 /* 325 */ "constraint_attributes ::=",
 /* 326 */ "constraint_attributes ::= constraint_check_time",
 /* 327 */ "constraint_attributes ::= constraint_check_time DEFERRABLE",
 /* 328 */ "constraint_attributes ::= constraint_check_time NOT DEFERRABLE",
 /* 329 */ "constraint_attributes ::= DEFERRABLE",
 /* 330 */ "constraint_attributes ::= DEFERRABLE constraint_check_time",
 /* 331 */ "constraint_attributes ::= NOT DEFERRABLE",
 /* 332 */ "constraint_attributes ::= NOT DEFERRABLE constraint_check_time",
 /* 333 */ "constraint_check_time ::= INITIALLY DEFERRED",
 /* 334 */ "constraint_check_time ::= INITIALLY IMMEDIATE",
 /* 335 */ "sql_schema_statement ::= sql_schema_definition_statement",
 /* 336 */ "sql_schema_statement ::= sql_schema_manipulation_statement",
 /* 337 */ "sql_schema_definition_statement ::= table_definition",
 /* 338 */ "table_definition ::= CREATE TABLE table_name LPAR table_element_list RPAR",
 /* 339 */ "sql_schema_manipulation_statement ::= drop_table_statement",
 /* 340 */ "drop_behaviour ::=",
 /* 341 */ "drop_behaviour ::= CASCADE",
 /* 342 */ "drop_behaviour ::= RESTRICT",
 /* 343 */ "drop_table_statement ::= DROP TABLE drop_if_exists tables_list drop_behaviour",
 /* 344 */ "drop_if_exists ::=",
 /* 345 */ "drop_if_exists ::= IF EXISTS",
 /* 346 */ "tables_list ::= table_name",
 /* 347 */ "tables_list ::= tables_list COMMA table_name",
 /* 348 */ "sql_data_statement ::= sql_data_change_statement",
 /* 349 */ "sql_data_change_statement ::= delete_statement_searched",
 /* 350 */ "sql_data_change_statement ::= insert_statement",
 /* 351 */ "sql_data_change_statement ::= update_statement_searched",
 /* 352 */ "delete_statement_searched ::= DELETE FROM table_name delete_statement_where_search",
 /* 353 */ "delete_statement_where_search ::=",
 /* 354 */ "delete_statement_where_search ::= WHERE search_condition",
 /* 355 */ "insert_statement ::= INSERT INTO table_name insert_columns_and_source",
 /* 356 */ "insert_columns_and_source ::= LPAR insert_column_list RPAR query_expression",
 /* 357 */ "insert_columns_and_source ::= query_expression",
 /* 358 */ "insert_columns_and_source ::= DEFAULT VALUES",
 /* 359 */ "insert_column_list ::= column_name_list",
 /* 360 */ "set_clause_list ::= set_clause_list COMMA set_clause",
 /* 361 */ "set_clause_list ::= set_clause",
 /* 362 */ "set_clause ::= object_column OP_EQ update_source",
 /* 363 */ "object_column ::= column_name",
 /* 364 */ "update_source ::= value_expression",
 /* 365 */ "update_source ::= NULL",
 /* 366 */ "update_source ::= DEFAULT",
 /* 367 */ "update_statement_searched ::= UPDATE table_name SET set_clause_list update_statement_where_search",
 /* 368 */ "update_statement_where_search ::=",
 /* 369 */ "update_statement_where_search ::= WHERE search_condition",
 /* 370 */ "math_numeric_value_expression ::= ABS LPAR numeric_value_expression RPAR",
 /* 371 */ "math_numeric_value_expression ::= ACOS LPAR numeric_value_expression RPAR",
 /* 372 */ "math_numeric_value_expression ::= ASIN LPAR numeric_value_expression RPAR",
 /* 373 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression RPAR",
 /* 374 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 375 */ "math_numeric_value_expression ::= ATAN2 LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 376 */ "math_numeric_value_expression ::= CEIL LPAR numeric_value_expression RPAR",
 /* 377 */ "math_numeric_value_expression ::= COS LPAR numeric_value_expression RPAR",
 /* 378 */ "math_numeric_value_expression ::= COT LPAR numeric_value_expression RPAR",
 /* 379 */ "math_numeric_value_expression ::= CRC32 LPAR numeric_value_expression RPAR",
 /* 380 */ "math_numeric_value_expression ::= DEGREES LPAR numeric_value_expression RPAR",
 /* 381 */ "math_numeric_value_expression ::= EXP LPAR numeric_value_expression RPAR",
 /* 382 */ "math_numeric_value_expression ::= FLOOR LPAR numeric_value_expression RPAR",
 /* 383 */ "math_numeric_value_expression ::= FORMAT LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 384 */ "math_numeric_value_expression ::= LN LPAR numeric_value_expression RPAR",
 /* 385 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression RPAR",
 /* 386 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 387 */ "math_numeric_value_expression ::= LOG2 LPAR numeric_value_expression RPAR",
 /* 388 */ "math_numeric_value_expression ::= LOG10 LPAR numeric_value_expression RPAR",
 /* 389 */ "math_numeric_value_expression ::= MOD LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 390 */ "math_numeric_value_expression ::= PI LPAR RPAR",
 /* 391 */ "math_numeric_value_expression ::= POW LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 392 */ "math_numeric_value_expression ::= RADIANS LPAR numeric_value_expression RPAR",
 /* 393 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression RPAR",
 /* 394 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 395 */ "math_numeric_value_expression ::= SIGN LPAR numeric_value_expression RPAR",
 /* 396 */ "math_numeric_value_expression ::= SIN LPAR numeric_value_expression RPAR",
 /* 397 */ "math_numeric_value_expression ::= SQRT LPAR numeric_value_expression RPAR",
 /* 398 */ "math_numeric_value_expression ::= TAN LPAR numeric_value_expression RPAR",
 /* 399 */ "math_numeric_value_expression ::= TRUNCATE LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 400 */ "date_value_expression ::= DAY LPAR numeric_value_expression RPAR",
 /* 401 */ "date_value_expression ::= HOUR LPAR numeric_value_expression RPAR",
 /* 402 */ "date_value_expression ::= MINUTE LPAR numeric_value_expression RPAR",
 /* 403 */ "date_value_expression ::= MONTH LPAR numeric_value_expression RPAR",
 /* 404 */ "date_value_expression ::= SECOND LPAR numeric_value_expression RPAR",
 /* 405 */ "date_value_expression ::= WEEKDAY LPAR numeric_value_expression RPAR",
 /* 406 */ "date_value_expression ::= WEEKOFYEAR LPAR numeric_value_expression RPAR",
 /* 407 */ "date_value_expression ::= YEAR LPAR numeric_value_expression RPAR",
);

/*
** This function returns the symbolic name associated with a token
** value.
*/
function ParseTokenName(/* int */ $tokenType){
  if (isset(self::$yyTokenName[$tokenType]))
    return self::$yyTokenName[$tokenType];
  return "Unknown";
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
private function yy_destructor($yymajor, $yypminor){
  switch( $yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
private function yy_pop_parser_stack() {
  if ($this->yyidx < 0) return 0;
  $yytos = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE ) {
    fprintf($this->yyTraceFILE,"%sPopping %s\n",
      $this->yyTracePrompt,
      self::$yyTokenName[$yytos->major]);
  }
  $this->yy_destructor( $yytos->major, $yytos->minor);
  unset($this->yystack[$this->yyidx]);
  $this->yyidx--;
  return $yytos->major;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
function __destruct()
{
  while($this->yyidx >= 0)
    $this->yy_pop_parser_stack();
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_shift_action(
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
  $stateno = $this->yystack[$this->yyidx]->stateno;
 
  if( $stateno>self::YY_SHIFT_MAX || 
      ($i = self::$yy_shift_ofst[$stateno])==self::YY_SHIFT_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    if( $iLookAhead>0 ){
      if (isset(self::$yyFallback[$iLookAhead]) &&
        ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n",
             $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], 
             self::$yyTokenName[$iFallback]);
        }
        return $this->yy_find_shift_action($iFallback);
      }
      {
        $j = $i - $iLookAhead + self::YYWILDCARD;
        if( $j>=0 && $j<count(self::$yy_action) && self::$yy_lookahead[$j]==self::YYWILDCARD ){
          if( $this->yyTraceFILE ){
            fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n",
               $this->yyTracePrompt, self::$yyTokenName[$iLookAhead],
               self::$yyTokenName[self::YYWILDCARD]);
          }
          return self::$yy_action[$j];
        }
      }
    }
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_reduce_action(
  $stateno,              /* Current state number */
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
 
  if( $stateno>self::YY_REDUCE_MAX ||
      ($i = self::$yy_reduce_ofst[$stateno])==self::YY_REDUCE_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Perform a shift action.
*/
private function yy_shift(
  $yyNewState,               /* The new state to shift in */
  $yyMajor,                  /* The major token to shift in */
  $yypMinor         /* Pointer ot the minor token to shift in */
){
  $this->yyidx++;
  if (isset($this->yystack[$this->yyidx])) {
    $yytos = $this->yystack[$this->yyidx];
  } else {
    $yytos = new ParseyyStackEntry;
    $this->yystack[$this->yyidx] = $yytos;
  }
  $yytos->stateno = $yyNewState;
  $yytos->major = $yyMajor;
  $yytos->minor = $yypMinor;
  if( $this->yyTraceFILE) {
    fprintf($this->yyTraceFILE,"%sShift %d\n",$this->yyTracePrompt,$yyNewState);
    fprintf($this->yyTraceFILE,"%sStack:",$this->yyTracePrompt);
    for ($i = 1; $i <= $this->yyidx; $i++) {
      $ent = $this->yystack[$i];
      fprintf($this->yyTraceFILE," %s",self::$yyTokenName[$ent->major]);
    }
    fprintf($this->yyTraceFILE,"\n");
  }
}

private function __overflow_dead_code() {
  /* if the stack can overflow (it can't in the PHP implementation)
   * Then the following code would be emitted */
}

/* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule 
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
static $yyRuleInfo = array(
  155, 1,
  156, 3,
  156, 2,
  158, 0,
  158, 1,
  157, 1,
  157, 1,
  157, 1,
  162, 1,
  163, 1,
  163, 1,
  164, 1,
  166, 1,
  167, 1,
  165, 1,
  168, 1,
  169, 1,
  170, 1,
  170, 3,
  171, 1,
  171, 1,
  173, 1,
  172, 4,
  176, 0,
  176, 1,
  176, 2,
  178, 1,
  174, 1,
  174, 4,
  174, 1,
  174, 1,
  174, 1,
  174, 1,
  174, 1,
  174, 1,
  179, 1,
  179, 1,
  179, 4,
  179, 2,
  179, 5,
  179, 2,
  179, 5,
  179, 1,
  179, 4,
  186, 1,
  180, 2,
  180, 5,
  180, 2,
  180, 5,
  180, 1,
  180, 4,
  180, 3,
  180, 6,
  180, 3,
  180, 6,
  180, 2,
  180, 5,
  181, 1,
  182, 1,
  182, 4,
  182, 2,
  182, 5,
  183, 1,
  183, 1,
  187, 1,
  187, 4,
  187, 6,
  187, 1,
  187, 4,
  187, 6,
  187, 1,
  187, 4,
  187, 6,
  187, 1,
  187, 1,
  189, 1,
  190, 1,
  188, 1,
  188, 4,
  188, 1,
  188, 2,
  184, 1,
  184, 1,
  184, 2,
  184, 5,
  184, 2,
  184, 5,
  191, 0,
  191, 3,
  192, 1,
  194, 1,
  193, 1,
  185, 2,
  195, 3,
  195, 1,
  196, 1,
  196, 4,
  199, 1,
  199, 1,
  199, 1,
  199, 1,
  199, 1,
  200, 1,
  197, 1,
  197, 1,
  197, 4,
  201, 1,
  198, 1,
  198, 4,
  198, 1,
  198, 4,
  198, 8,
  202, 1,
  202, 3,
  175, 0,
  175, 2,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  204, 1,
  204, 1,
  205, 1,
  205, 2,
  207, 1,
  207, 1,
  177, 3,
  208, 0,
  208, 2,
  211, 1,
  209, 2,
  209, 1,
  209, 1,
  209, 1,
  212, 1,
  212, 1,
  212, 2,
  213, 4,
  215, 1,
  215, 4,
  218, 1,
  219, 1,
  220, 1,
  220, 3,
  216, 0,
  216, 2,
  221, 1,
  221, 1,
  217, 0,
  217, 1,
  217, 2,
  217, 1,
  217, 2,
  222, 3,
  223, 3,
  224, 1,
  224, 2,
  224, 2,
  224, 2,
  214, 4,
  225, 1,
  225, 3,
  226, 1,
  226, 3,
  227, 1,
  227, 2,
  228, 1,
  228, 3,
  228, 4,
  229, 1,
  229, 3,
  231, 1,
  231, 1,
  232, 3,
  234, 1,
  234, 3,
  234, 1,
  236, 1,
  239, 1,
  240, 1,
  240, 1,
  240, 1,
  240, 3,
  241, 1,
  241, 3,
  241, 3,
  244, 1,
  244, 2,
  245, 1,
  246, 1,
  246, 1,
  246, 1,
  246, 1,
  247, 1,
  251, 1,
  251, 1,
  206, 1,
  248, 1,
  248, 3,
  250, 4,
  250, 1,
  253, 5,
  254, 1,
  254, 1,
  252, 1,
  252, 1,
  256, 1,
  255, 0,
  255, 1,
  255, 1,
  249, 1,
  257, 3,
  258, 1,
  258, 1,
  259, 1,
  259, 3,
  259, 4,
  259, 4,
  259, 5,
  259, 3,
  259, 4,
  259, 4,
  259, 5,
  261, 1,
  261, 3,
  261, 4,
  261, 4,
  261, 5,
  264, 1,
  264, 3,
  266, 1,
  266, 1,
  266, 1,
  159, 5,
  269, 1,
  269, 1,
  269, 3,
  272, 1,
  272, 3,
  273, 1,
  273, 2,
  274, 1,
  274, 2,
  270, 5,
  271, 0,
  271, 2,
  271, 4,
  271, 4,
  279, 0,
  279, 3,
  280, 1,
  280, 3,
  281, 2,
  282, 0,
  282, 1,
  282, 1,
  275, 2,
  275, 3,
  283, 1,
  283, 2,
  283, 2,
  283, 1,
  284, 1,
  284, 2,
  284, 4,
  284, 5,
  286, 1,
  285, 1,
  287, 1,
  260, 1,
  260, 1,
  260, 3,
  288, 4,
  289, 6,
  290, 0,
  290, 1,
  291, 0,
  291, 1,
  291, 1,
  291, 2,
  291, 1,
  293, 1,
  293, 1,
  293, 1,
  292, 0,
  292, 1,
  292, 1,
  294, 2,
  295, 4,
  296, 1,
  276, 0,
  276, 2,
  277, 0,
  277, 3,
  297, 1,
  297, 3,
  298, 1,
  278, 0,
  278, 2,
  267, 2,
  299, 1,
  268, 2,
  262, 1,
  262, 1,
  263, 1,
  263, 5,
  300, 1,
  265, 1,
  265, 1,
  237, 1,
  237, 3,
  238, 1,
  230, 1,
  230, 1,
  230, 1,
  235, 1,
  235, 1,
  235, 1,
  235, 1,
  235, 1,
  235, 1,
  233, 3,
  233, 4,
  210, 0,
  210, 1,
  210, 2,
  210, 3,
  210, 1,
  210, 2,
  210, 2,
  210, 3,
  301, 2,
  301, 2,
  161, 1,
  161, 1,
  302, 1,
  304, 6,
  303, 1,
  306, 0,
  306, 1,
  306, 1,
  305, 5,
  307, 0,
  307, 2,
  308, 1,
  308, 3,
  160, 1,
  309, 1,
  309, 1,
  309, 1,
  310, 4,
  313, 0,
  313, 2,
  311, 4,
  314, 4,
  314, 1,
  314, 2,
  315, 1,
  316, 3,
  316, 1,
  317, 3,
  318, 1,
  319, 1,
  319, 1,
  319, 1,
  312, 5,
  320, 0,
  320, 2,
  242, 4,
  242, 4,
  242, 4,
  242, 4,
  242, 6,
  242, 6,
  242, 4,
  242, 4,
  242, 4,
  242, 4,
  242, 4,
  242, 4,
  242, 4,
  242, 6,
  242, 4,
  242, 4,
  242, 6,
  242, 4,
  242, 4,
  242, 6,
  242, 3,
  242, 6,
  242, 4,
  242, 4,
  242, 6,
  242, 4,
  242, 4,
  242, 4,
  242, 4,
  242, 6,
  243, 4,
  243, 4,
  243, 4,
  243, 4,
  243, 4,
  243, 4,
  243, 4,
  243, 4,
);

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
private function yy_reduce(
  $yyruleno                 /* Number of the rule by which to reduce */
){
  $yygoto = 0;                     /* The next state */
  $yyact = 0;                      /* The next action */
  $yygotominor = null;        /* The LHS of the rule reduced */
  $yymsp = null;            /* The top of the parser's stack */
  $yysize = 0;                     /* Amount to pop the stack */
  
  $yymsp = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
    fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt,
      self::$yyRuleName[$yyruleno]);
  }

  switch( $yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 15:
      case 16:
      case 19:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 44:
      case 62:
      case 63:
      case 112:
      case 133:
      case 142:
      case 162:
      case 164:
      case 166:
      case 168:
      case 171:
      case 173:
      case 174:
      case 176:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 185:
      case 188:
      case 190:
      case 191:
      case 192:
      case 195:
      case 196:
      case 197:
      case 202:
      case 206:
      case 208:
      case 214:
      case 216:
      case 225:
      case 230:
      case 233:
      case 239:
      case 241:
      case 263:
      case 264:
      case 265:
      case 272:
      case 280:
      case 289:
      case 298:
      case 301:
      case 302:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 335:
      case 336:
      case 339:
      case 348:
      case 349:
      case 350:
      case 351:
      case 354:
      case 359:
      case 364:
      case 369:
#line 6 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;}
#line 3090 "sql.php"
        break;
      case 1:
#line 8 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -2]->minor;if(!(is_array($this->yystack[$this->yyidx + -2]->minor->actions))) echo "b is not an array!!\n";if(!(is_array($this->yystack[$this->yyidx + 0]->minor->actions))) echo "c is not an array!!\n";$yygotominor->actions=array_merge($this->yystack[$this->yyidx + -2]->minor->actions, $this->yystack[$this->yyidx + 0]->minor->actions);}
#line 3095 "sql.php"
        break;
      case 2:
      case 128:
      case 177:
#line 9 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 3102 "sql.php"
        break;
      case 5:
#line 14 "sql.y"
{
		$this->yystack[$this->yyidx + 0]->minor->actions[] = new qpAction_returnRelation($this->yystack[$this->yyidx + 0]->minor->last_relation_id);		
		$yygotominor=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3110 "sql.php"
        break;
      case 6:
#line 18 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;}
#line 3115 "sql.php"
        break;
      case 9:
#line 26 "sql.y"
{$yygotominor = new filter_StaticIntnum($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3120 "sql.php"
        break;
      case 17:
      case 311:
      case 361:
#line 47 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;
	}
#line 3130 "sql.php"
        break;
      case 18:
#line 51 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3138 "sql.php"
        break;
      case 22:
#line 61 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->name = $this->yystack[$this->yyidx + -3]->minor->value;
		if(isset($this->yystack[$this->yyidx + 0]->minor)){
			foreach($this->yystack[$this->yyidx + 0]->minor as $constraint){
				if(strtoupper($constraint)=="AUTO_INCREMENT")
					$this->yystack[$this->yyidx + -2]->minor->autoinc=1;
					$this->yystack[$this->yyidx + -2]->minor->is_unique=1;
			}
		}
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3153 "sql.php"
        break;
      case 24:
      case 346:
#line 74 "sql.y"
{$yygotominor = Array(); $yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;}
#line 3159 "sql.php"
        break;
      case 25:
#line 75 "sql.y"
{$this->yystack[$this->yyidx + -1]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 3164 "sql.php"
        break;
      case 37:
#line 99 "sql.y"
{$yygotominor = new PHPFDB_char(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 3169 "sql.php"
        break;
      case 42:
#line 104 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, 666);}
#line 3174 "sql.php"
        break;
      case 43:
#line 105 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 3179 "sql.php"
        break;
      case 57:
#line 122 "sql.y"
{$yygotominor = new PHPFDB_blob(NULL);}
#line 3184 "sql.php"
        break;
      case 73:
#line 141 "sql.y"
{$yygotominor = new PHPFDB_int();}
#line 3189 "sql.php"
        break;
      case 77:
#line 148 "sql.y"
{$yygotominor = new PHPFDB_float();}
#line 3194 "sql.php"
        break;
      case 81:
#line 153 "sql.y"
{$yygotominor = new PHPFDB_date();}
#line 3199 "sql.php"
        break;
      case 82:
#line 154 "sql.y"
{$yygotominor = new PHPFDB_datetime();}
#line 3204 "sql.php"
        break;
      case 126:
#line 223 "sql.y"
{$yygotominor="plus_sign";}
#line 3209 "sql.php"
        break;
      case 127:
#line 224 "sql.y"
{$yygotominor="minus_sign";}
#line 3214 "sql.php"
        break;
      case 137:
      case 243:
      case 244:
      case 283:
      case 284:
      case 285:
#line 243 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3224 "sql.php"
        break;
      case 144:
#line 255 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor->value;
	}
#line 3232 "sql.php"
        break;
      case 145:
#line 259 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor->value;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3240 "sql.php"
        break;
      case 163:
#line 293 "sql.y"
{
		$yygotominor= new filter_OR($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3247 "sql.php"
        break;
      case 165:
#line 298 "sql.y"
{
		$yygotominor= new filter_AND($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3254 "sql.php"
        break;
      case 175:
#line 315 "sql.y"
{
		$yygotominor= new filter_COMP($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3261 "sql.php"
        break;
      case 184:
#line 335 "sql.y"
{ ECHO "TODOTODOTODOTODO";}
#line 3266 "sql.php"
        break;
      case 189:
#line 342 "sql.y"
{$yygotominor= new filter_UnaryMathFunction($this->yystack[$this->yyidx + -1]->minor); $yygotominor->expression=$this->yystack[$this->yyidx + 0]->minor;}
#line 3271 "sql.php"
        break;
      case 194:
#line 350 "sql.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor;}
#line 3276 "sql.php"
        break;
      case 198:
#line 365 "sql.y"
{
	$yygotominor = new filter_StaticString(substr($this->yystack[$this->yyidx + 0]->minor->value, 1, strlen($this->yystack[$this->yyidx + 0]->minor->value)-2));
}
#line 3283 "sql.php"
        break;
      case 199:
      case 363:
#line 397 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3289 "sql.php"
        break;
      case 200:
#line 398 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value, $this->yystack[$this->yyidx + -2]->minor->value);}
#line 3294 "sql.php"
        break;
      case 201:
#line 400 "sql.y"
{$yygotominor = new filter_SetFunction("count_asterisk"); $yygotominor->expression = new filter_EmptyExpression();}
#line 3299 "sql.php"
        break;
      case 203:
#line 403 "sql.y"
{$this->yystack[$this->yyidx + -4]->minor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor=$this->yystack[$this->yyidx + -4]->minor;}
#line 3304 "sql.php"
        break;
      case 204:
#line 405 "sql.y"
{$yygotominor = new filter_SetFunction("max");}
#line 3309 "sql.php"
        break;
      case 205:
#line 406 "sql.y"
{$yygotominor = new filter_SetFunction("min");}
#line 3314 "sql.php"
        break;
      case 209:
      case 368:
#line 413 "sql.y"
{$yygotominor=NULL;}
#line 3320 "sql.php"
        break;
      case 210:
#line 414 "sql.y"
{$yygotominor="DISTINCT";}
#line 3325 "sql.php"
        break;
      case 211:
#line 415 "sql.y"
{$yygotominor="ALL";}
#line 3330 "sql.php"
        break;
      case 235:
#line 452 "sql.y"
{
		$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		
		if(isset($this->yystack[$this->yyidx + -1]->minor->filter)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_filterResults($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->filter);
		}
		$total_group = false;
		$expression_columns = Array();	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection))
			foreach($this->yystack[$this->yyidx + -2]->minor->columns_projection as $p){
				if($p->is_set_function) {
					$total_group=true;
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				} elseif($p->is_math_function) {
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				}
			}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $this->yystack[$this->yyidx + -1]->minor->grouping_columns);
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
		} elseif(!(empty($expression_columns))) {
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $expression_columns);
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->grouping_columns, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
			$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		} else {
			if($total_group){
				$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, array(), $this->yystack[$this->yyidx + -2]->minor->columns_projection);
				$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
			}
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->ordering)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_orderRelation($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->ordering);
		}			
		if($this->yystack[$this->yyidx + -3]->minor=="DISTINCT")
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_distinctValues($this->yystack[$this->yyidx + -1]->minor->last_relation_id);
		elseif($this->yystack[$this->yyidx + -3]->minor=="ALL"){
		}	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$indexes = Array();
			for($i=0;$i<count($this->yystack[$this->yyidx + -2]->minor->columns_projection);$i++)
				$indexes[] = $i;
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_selectColumnsByIndexes($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $indexes);
		}		
		if(isset($this->yystack[$this->yyidx + 0]->minor))
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_limitRows($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + 0]->minor->rows, $this->yystack[$this->yyidx + 0]->minor->offset);
		$yygotominor=$this->yystack[$this->yyidx + -1]->minor;
	}
#line 3387 "sql.php"
        break;
      case 236:
#line 506 "sql.y"
{$yygotominor = new stdClass();$yygotominor->columns_projection = NULL;$yygotominor->set_functions=NULL;}
#line 3392 "sql.php"
        break;
      case 237:
#line 507 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->columns_projection = Array();
		$yygotominor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;

	}
#line 3402 "sql.php"
        break;
      case 238:
#line 513 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3410 "sql.php"
        break;
      case 242:
#line 522 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor; $yygotominor->alias=$this->yystack[$this->yyidx + 0]->minor;}
#line 3415 "sql.php"
        break;
      case 245:
#line 527 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = $this->yystack[$this->yyidx + -4]->minor->actions;
		if(isset($this->yystack[$this->yyidx + -2]->minor)&&isset($this->yystack[$this->yyidx + -2]->minor->grouping_columns))
			$yygotominor->grouping_columns = $this->yystack[$this->yyidx + -2]->minor->grouping_columns;
		if(isset($this->yystack[$this->yyidx + -3]->minor)&&isset($this->yystack[$this->yyidx + -3]->minor->filter))
			$yygotominor->filter = $this->yystack[$this->yyidx + -3]->minor->filter;
		if(isset($this->yystack[$this->yyidx + 0]->minor)&&isset($this->yystack[$this->yyidx + 0]->minor->ordering))
			$yygotominor->ordering = $this->yystack[$this->yyidx + 0]->minor->ordering;
	}
#line 3429 "sql.php"
        break;
      case 247:
#line 539 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=0;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3434 "sql.php"
        break;
      case 248:
#line 540 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + -2]->minor->value;}
#line 3439 "sql.php"
        break;
      case 249:
#line 541 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + -2]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3444 "sql.php"
        break;
      case 251:
#line 544 "sql.y"
{$yygotominor = new stdClass();$yygotominor->ordering=$this->yystack[$this->yyidx + 0]->minor;}
#line 3449 "sql.php"
        break;
      case 252:
#line 545 "sql.y"
{$yygotominor=Array();$yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3454 "sql.php"
        break;
      case 253:
      case 297:
#line 546 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;$yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3460 "sql.php"
        break;
      case 254:
#line 547 "sql.y"
{$yygotominor = new stdClass();$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor->order=$this->yystack[$this->yyidx + 0]->minor;}
#line 3465 "sql.php"
        break;
      case 255:
      case 256:
#line 548 "sql.y"
{$yygotominor='asc';}
#line 3471 "sql.php"
        break;
      case 257:
#line 550 "sql.y"
{$yygotominor='desc';}
#line 3476 "sql.php"
        break;
      case 258:
#line 553 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;
	}
#line 3484 "sql.php"
        break;
      case 260:
#line 559 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3489 "sql.php"
        break;
      case 261:
#line 560 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value);}
#line 3494 "sql.php"
        break;
      case 275:
#line 582 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->join_type = $this->yystack[$this->yyidx + -3]->minor;
	$b_last_relation = $this->yystack[$this->yyidx + -5]->minor->actions[count($this->yystack[$this->yyidx + -5]->minor->actions)-1];
	$e_last_relation = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1];
	$yygotominor->actions = array_merge($this->yystack[$this->yyidx + -5]->minor->actions, $this->yystack[$this->yyidx + -1]->minor->actions);
	$yygotominor->actions[] = new qpAction_joinRelationsLeft($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
}
#line 3506 "sql.php"
        break;
      case 287:
#line 605 "sql.y"
{$yygotominor = new stdClass();$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;}
#line 3511 "sql.php"
        break;
      case 293:
#line 615 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;
}
#line 3519 "sql.php"
        break;
      case 294:
#line 620 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = NULL;}
#line 3524 "sql.php"
        break;
      case 295:
#line 621 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = $this->yystack[$this->yyidx + 0]->minor;}
#line 3529 "sql.php"
        break;
      case 296:
#line 623 "sql.y"
{$yygotominor = Array(); $yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3534 "sql.php"
        break;
      case 312:
      case 360:
#line 669 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor = $this->yystack[$this->yyidx + -2]->minor;
	}
#line 3543 "sql.php"
        break;
      case 323:
#line 690 "sql.y"
{
		$yygotominor = new filter_IsNullColumn($this->yystack[$this->yyidx + -2]->minor);
	}
#line 3550 "sql.php"
        break;
      case 324:
#line 693 "sql.y"
{
		$yygotominor = new filter_IsNotNullColumn($this->yystack[$this->yyidx + -3]->minor);
	}
#line 3557 "sql.php"
        break;
      case 337:
#line 739 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[]=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3565 "sql.php"
        break;
      case 338:
#line 787 "sql.y"
{
		$yygotominor = new qpAction_createTable($this->yystack[$this->yyidx + -3]->minor->value, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3572 "sql.php"
        break;
      case 343:
#line 956 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		foreach($this->yystack[$this->yyidx + -1]->minor as $c){
			$yygotominor->actions[] = new qpAction_dropTable($c->value);
		}
	}
#line 3583 "sql.php"
        break;
      case 347:
#line 968 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3588 "sql.php"
        break;
      case 352:
#line 1056 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		if(is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_bulkDelete($this->yystack[$this->yyidx + -1]->minor->value);
		} else {
			$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value);
			$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
			$yygotominor->actions[] = new qpAction_addressedDelete($last_relation_id);
		}
	}
#line 3604 "sql.php"
        break;
      case 353:
#line 1069 "sql.y"
{
		$yygotominor = NULL;
	}
#line 3611 "sql.php"
        break;
      case 355:
#line 1076 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[] = new qpAction_insertRow($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3619 "sql.php"
        break;
      case 356:
#line 1081 "sql.y"
{
		$yygotominor = Array();
		foreach($this->yystack[$this->yyidx + -2]->minor as $key => $column_name){
			$yygotominor[$column_name] = $this->yystack[$this->yyidx + 0]->minor[$key];
		}
	}
#line 3629 "sql.php"
        break;
      case 357:
#line 1087 "sql.y"
{print_r($this->yystack[$this->yyidx + 0]->minor);}
#line 3634 "sql.php"
        break;
      case 362:
#line 1108 "sql.y"
{$yygotominor = new stdClass();$yygotominor->column=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->new_value=$this->yystack[$this->yyidx + 0]->minor;}
#line 3639 "sql.php"
        break;
      case 367:
#line 1116 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -3]->minor->value);
		$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;

		if(!is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
		}
		$yygotominor->actions[]=new qpAction_updateValues($last_relation_id, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3654 "sql.php"
        break;
      case 370:
#line 1178 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("abs");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3659 "sql.php"
        break;
      case 371:
#line 1179 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("acos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3664 "sql.php"
        break;
      case 372:
#line 1180 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("asin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3669 "sql.php"
        break;
      case 373:
#line 1181 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("atan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3674 "sql.php"
        break;
      case 374:
      case 375:
#line 1182 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("atan2");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3680 "sql.php"
        break;
      case 376:
#line 1184 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ceil");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3685 "sql.php"
        break;
      case 377:
#line 1185 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3690 "sql.php"
        break;
      case 378:
#line 1186 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cot");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3695 "sql.php"
        break;
      case 379:
#line 1187 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("crc32");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3700 "sql.php"
        break;
      case 380:
#line 1188 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("degrees");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3705 "sql.php"
        break;
      case 381:
#line 1189 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("exp");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3710 "sql.php"
        break;
      case 382:
#line 1190 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("floor");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3715 "sql.php"
        break;
      case 383:
#line 1191 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("format");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3720 "sql.php"
        break;
      case 384:
      case 385:
#line 1192 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ln");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3726 "sql.php"
        break;
      case 386:
#line 1194 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3731 "sql.php"
        break;
      case 387:
#line 1195 "sql.y"
{$val2 = new filter_StaticIntnum(2);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val2;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3736 "sql.php"
        break;
      case 388:
#line 1196 "sql.y"
{$val10 = new filter_StaticIntnum(10);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val10;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3741 "sql.php"
        break;
      case 389:
#line 1197 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("mod");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3746 "sql.php"
        break;
      case 390:
#line 1198 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("pi");$yygotominor->expression=new filter_EmptyExpression();}
#line 3751 "sql.php"
        break;
      case 391:
#line 1199 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("pow");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3756 "sql.php"
        break;
      case 392:
#line 1200 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("radians");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3761 "sql.php"
        break;
      case 393:
#line 1201 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("round");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3766 "sql.php"
        break;
      case 394:
#line 1202 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("round");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3771 "sql.php"
        break;
      case 395:
#line 1203 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sign");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3776 "sql.php"
        break;
      case 396:
#line 1204 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3781 "sql.php"
        break;
      case 397:
#line 1205 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sqrt");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3786 "sql.php"
        break;
      case 398:
#line 1206 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("tan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3791 "sql.php"
        break;
      case 399:
#line 1207 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("truncate");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3796 "sql.php"
        break;
      case 400:
#line 1214 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("day");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3801 "sql.php"
        break;
      case 401:
#line 1215 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("hour");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3806 "sql.php"
        break;
      case 402:
#line 1216 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("minute");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3811 "sql.php"
        break;
      case 403:
#line 1217 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("month");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3816 "sql.php"
        break;
      case 404:
#line 1218 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("second");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3821 "sql.php"
        break;
      case 405:
#line 1219 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("weekday");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3826 "sql.php"
        break;
      case 406:
#line 1220 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("weekofyear");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3831 "sql.php"
        break;
      case 407:
#line 1221 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("year");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3836 "sql.php"
        break;
  };
  $yygoto = self::$yyRuleInfo[2*$yyruleno];
  $yysize = self::$yyRuleInfo[(2*$yyruleno)+1];

  $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;
  
  $this->yyidx -= $yysize;
  $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);
  if( $yyact < self::YYNSTATE ){
    $this->yy_shift($yyact, $yygoto, $yygotominor);
  }else if( $yyact == self::YYNSTATE + self::YYNRULE + 1 ){
    $this->yy_accept();
  }
}

/*
** The following code executes when the parse fails
*/
private function yy_parse_failed(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sFail!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
}

/*
** The following code executes when a syntax error first occurs.
*/
private function yy_syntax_error(
  $yymajor,                   /* The major type of the error token */
  $yyminor            /* The minor type of the error token */
){
}

/*
** The following is executed when the parser accepts
*/
private function yy_accept(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sAccept!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 2 "sql.y"

      //echo "PARSING COMPLETE!!";
   
#line 3891 "sql.php"
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
function Parse(
  $yymajor,                 /* The major token code number */
  $yyminor = null           /* The value for the token */
){
  $yyact = 0;            /* The parser action. */
  $yyendofinput = 0;     /* True if we are at the end of input */
  $yyerrorhit = 0;   /* True if yymajor has invoked an error */

  /* (re)initialize the parser, if necessary */
  if( $this->yyidx<0 ){
    $this->yyidx = 0;
    $this->yyerrcnt = -1;
    $ent = new ParseyyStackEntry;
    $ent->stateno = 0;
    $ent->major = 0;
    $this->yystack = array( 0 => $ent );

    $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    $this->YY_ACCEPT_ACTION  = self::YYNSTATE + self::YYNRULE + 1;
    $this->YY_ERROR_ACTION   = self::YYNSTATE + self::YYNRULE;
  }
  $yyendofinput = ($yymajor==0);

  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sInput %s\n",$this->yyTracePrompt,
      self::$yyTokenName[$yymajor]);
  }

  do{
    $yyact = $this->yy_find_shift_action($yymajor);
    if( $yyact<self::YYNSTATE ){
      $this->yy_shift($yyact,$yymajor,$yyminor);
      $this->yyerrcnt--;
      if( $yyendofinput && $this->yyidx>=0 ){
        $yymajor = 0;
      }else{
        $yymajor = self::YYNOCODE;
      }
    }else if( $yyact < self::YYNSTATE + self::YYNRULE ){
      $this->yy_reduce($yyact-self::YYNSTATE);
    }else if( $yyact == $this->YY_ERROR_ACTION ){
      if( $this->yyTraceFILE ){
        fprintf($this->yyTraceFILE,"%sSyntax Error!\n",$this->yyTracePrompt);
      }
if (self::YYERRORSYMBOL) {
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( $this->yyerrcnt<0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $yymx = $this->yystack[$this->yyidx]->major;
      if( $yymx==self::YYERRORSYMBOL || $yyerrorhit ){
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE,"%sDiscard input token %s\n",
             $this->yyTracePrompt,self::$yyTokenName[$yymajor]);
        }
        $this->yy_destructor($yymajor,$yyminor);
        $yymajor = self::YYNOCODE;
      }else{
         while(
          $this->yyidx >= 0 &&
          $yymx != self::YYERRORSYMBOL &&
          ($yyact = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::YYERRORSYMBOL)) >= self::YYNSTATE
        ){
          $this->yy_pop_parser_stack();
        }
        if( $this->yyidx < 0 || $yymajor==0 ){
          $this->yy_destructor($yymajor,$yyminor);
          $this->yy_parse_failed();
          $yymajor = self::YYNOCODE;
        }else if( $yymx!=self::YYERRORSYMBOL ){
          $this->yy_shift($yyact,self::YYERRORSYMBOL,0);
        }
      }
      $this->yyerrcnt = 3;
      $yyerrorhit = 1;
} else {  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( $this->yyerrcnt<=0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $this->yyerrcnt = 3;
      $this->yy_destructor($yymajor,$yyminor);
      if( $yyendofinput ){
        $this->yy_parse_failed();
      }
      $yymajor = self::YYNOCODE;
}
    }else{
      $this->yy_accept();
      $yymajor = self::YYNOCODE;
    }
  }while( $yymajor!=self::YYNOCODE && $this->yyidx>=0 );
}

}
