<?php # vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */


/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
class ParseyyStackEntry {
  var /* int */ $stateno;       /* The state-number */
  var /* int */ $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  var $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

/* The state of the parser is completely contained in an instance of
** the following structure */
class ParseParser {
  var /* int */ $yyidx = -1;                    /* Index of top element in stack */
  var /* int */ $yyerrcnt;                 /* Shifts left before out of the error */
  // ParseARG_SDECL                /* A place to hold %extra_argument */
  var /* yyStackEntry */ $yystack = array(
  	/* of YYSTACKDEPTH elements */
	);  /* The parser's stack */

  var $yyTraceFILE = null;
  var $yyTracePrompt = null;



/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
  const TK_SEMI =  1;
  const TK_NAME =  2;
  const TK_INTNUM =  3;
  const TK_APPROXNUM =  4;
  const TK_DEADTOKEN =  5;
  const TK_COMMA =  6;
  const TK_CHARACTER =  7;
  const TK_SET =  8;
  const TK_CHAR =  9;
  const TK_LPAR = 10;
  const TK_RPAR = 11;
  const TK_VARYING = 12;
  const TK_VARCHAR = 13;
  const TK_NATIONAL = 14;
  const TK_NCHAR = 15;
  const TK_BLOB = 16;
  const TK_BIT = 17;
  const TK_NUMERIC = 18;
  const TK_DECIMAL = 19;
  const TK_DEC = 20;
  const TK_INTEGER = 21;
  const TK_SMALLINT = 22;
  const TK_FLOAT = 23;
  const TK_REAL = 24;
  const TK_DOUBLE = 25;
  const TK_PRECISION = 26;
  const TK_DATE = 27;
  const TK_TIME = 28;
  const TK_TIMESTAMP = 29;
  const TK_WITH = 30;
  const TK_ZONE = 31;
  const TK_INTERVAL = 32;
  const TK_TO = 33;
  const TK_YEAR = 34;
  const TK_MONTH = 35;
  const TK_DAY = 36;
  const TK_HOUR = 37;
  const TK_MINUTE = 38;
  const TK_SECOND = 39;
  const TK_PERIOD = 40;
  const TK_DEFAULT = 41;
  const TK_USER = 42;
  const TK_CURRENT_USER = 43;
  const TK_SESSION_USER = 44;
  const TK_SYSTEM_USER = 45;
  const TK_NULL = 46;
  const TK_PLUS_SIGN = 47;
  const TK_MINUS_SIGN = 48;
  const TK_CONSTRAINT = 49;
  const TK_NOT = 50;
  const TK_UNIQUE = 51;
  const TK_AUTO_INCREMENT = 52;
  const TK_PRIMARY = 53;
  const TK_KEY = 54;
  const TK_REFERENCES = 55;
  const TK_MATCH = 56;
  const TK_FULL = 57;
  const TK_PARTIAL = 58;
  const TK_ON = 59;
  const TK_UPDATE = 60;
  const TK_DELETE = 61;
  const TK_CASCADE = 62;
  const TK_NO = 63;
  const TK_ACTION = 64;
  const TK_CHECK = 65;
  const TK_OR = 66;
  const TK_AND = 67;
  const TK_IS = 68;
  const TK_ASTERISK = 69;
  const TK_SOLIDUS = 70;
  const TK_STRING = 71;
  const TK_COUNT = 72;
  const TK_MAX = 73;
  const TK_MIN = 74;
  const TK_DISTINCT = 75;
  const TK_ALL = 76;
  const TK_UNION = 77;
  const TK_EXCEPT = 78;
  const TK_INTERSECT = 79;
  const TK_SELECT = 80;
  const TK_AS = 81;
  const TK_LIMIT = 82;
  const TK_OFFSET = 83;
  const TK_ORDER = 84;
  const TK_BY = 85;
  const TK_ASC = 86;
  const TK_DESC = 87;
  const TK_FROM = 88;
  const TK_CROSS = 89;
  const TK_JOIN = 90;
  const TK_NATURAL = 91;
  const TK_INNER = 92;
  const TK_OUTER = 93;
  const TK_LEFT = 94;
  const TK_RIGHT = 95;
  const TK_USING = 96;
  const TK_WHERE = 97;
  const TK_GROUP = 98;
  const TK_HAVING = 99;
  const TK_VALUES = 100;
  const TK_TABLE = 101;
  const TK_CORRESPONDING = 102;
  const TK_NULLX = 103;
  const TK_TRUE = 104;
  const TK_FALSE = 105;
  const TK_UNKNOWN = 106;
  const TK_OP_EQ = 107;
  const TK_OP_GTLT = 108;
  const TK_OP_LT = 109;
  const TK_OP_GT = 110;
  const TK_OP_LTEQ = 111;
  const TK_OP_GTEQ = 112;
  const TK_DEFERRABLE = 113;
  const TK_INITIALLY = 114;
  const TK_DEFERRED = 115;
  const TK_IMMEDIATE = 116;
  const TK_CREATE = 117;
  const TK_RESTRICT = 118;
  const TK_DROP = 119;
  const TK_IF = 120;
  const TK_EXISTS = 121;
  const TK_INSERT = 122;
  const TK_INTO = 123;
  const TK_ABS = 124;
  const TK_ACOS = 125;
  const TK_ASIN = 126;
  const TK_ATAN = 127;
  const TK_ATAN2 = 128;
  const TK_CEIL = 129;
  const TK_COS = 130;
  const TK_COT = 131;
  const TK_CRC32 = 132;
  const TK_DEGREES = 133;
  const TK_EXP = 134;
  const TK_FLOOR = 135;
  const TK_FORMAT = 136;
  const TK_LN = 137;
  const TK_LOG = 138;
  const TK_LOG2 = 139;
  const TK_LOG10 = 140;
  const TK_MOD = 141;
  const TK_PI = 142;
  const TK_POW = 143;
  const TK_RADIANS = 144;
  const TK_ROUND = 145;
  const TK_SIGN = 146;
  const TK_SIN = 147;
  const TK_SQRT = 148;
  const TK_TAN = 149;
  const TK_TRUNCATE = 150;
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
  const YYNOCODE = 319;
#define ParseTOKENTYPE void*
  const YYSTACKDEPTH = 100;
  const YYNSTATE = 715;
  const YYNRULE = 402;
  const YYERRORSYMBOL = 151;

  /* QUESTE LE HO AGGIUNTE IO */
  const   YYWILDCARD = 0;
  public $operations_list= Array();
  /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
  var $YY_NO_ACTION;
  var $YY_ACCEPT_ACTION;
  var $YY_ERROR_ACTION;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static $yy_action = array(
 /*     0 */   457,  388,  676,  421,  438,  261,  419,  260,  420,  441,
 /*    10 */   423,  246,  416,  359,  126,  619,   95,  362,  247,  250,
 /*    20 */   650,  251,  376,  378,  380,  663,  664,  382,  666,  384,
 /*    30 */   589,  668,  184,  185,  414,  415,  115,  538,  539,  540,
 /*    40 */   541,  542,  543,  428,  193,  588,  114,  439,   68,  354,
 /*    50 */   633,  634,  635,  636,  637,  638,  452,  653,  654,  109,
 /*    60 */   679,  680,  681,  682,  683,  394,  236,  308,  534,  526,
 /*    70 */   309,  108,  533,  535,  536,  132,  114,  238,  234,  516,
 /*    80 */   476,  177,  233,  477,  478,  479,  430,  432,  433,  311,
 /*    90 */   435,  436,  437,  262,  445,  266,  416,  450,  235,  231,
 /*   100 */   471,  227,  274,  275,  334,  473,  603,  456,  458,  459,
 /*   110 */   457,  197,  198,  421,  438,  261,  419,  260,  420,  441,
 /*   120 */   423,  241,   69,   70,  179,  244,  111,  416,  467,  469,
 /*   130 */   470, 1118,  409,  187,  920,  411,  412,  413,  677,  389,
 /*   140 */   673,  687,  255,  410,  187,  421,  411,  412,  413,  442,
 /*   150 */   420,  567,  125,  428,  472,  421,   15,  439,   68,  442,
 /*   160 */   420,   89,    9,  240,  583,  585,  586,  421,  678,  109,
 /*   170 */   684,  442,  420,  462,   60,  120,  236,  308,  534,  526,
 /*   180 */   309,  333,  533,  535,  536,  132,  605,  238,  234,  516,
 /*   190 */   476,  177,  233,  477,  478,  479,  430,  432,  433,  311,
 /*   200 */   435,  436,  437,  262,  445,  266,  120,  450,  235,  231,
 /*   210 */   313,  230,  274,  275,  528,  473,  416,  456,  458,  459,
 /*   220 */   929,  929, 1019,  457,  351,  352,  421,  438,  261,  419,
 /*   230 */   260,  420,  441,  423,  179,   28,  111,  421,  467,  469,
 /*   240 */   470,  442,  420,  711,  421,  222,  261,  419,  424,  420,
 /*   250 */   421,  423,  529,   37,  442,  420,   89,  566,  421,  584,
 /*   260 */   585,  586,  424,  420,  416,  425,  428,  422,  809,  421,
 /*   270 */   439,   68,   65,  442,  420,  443,  426,  427,  580,  581,
 /*   280 */   582,  692,  109,  560,  618,  699,  700,  701,  702,  580,
 /*   290 */   581,  582,  692,  617,  426,  427,  699,  700,  701,  702,
 /*   300 */   515,  234,   44,  476,  177,  233,  477,  478,  479,  430,
 /*   310 */   432,  433,  434,  435,  436,  437,  262,  445,  266,  695,
 /*   320 */   450,  235,  231,  471,  227,  274,  275,  307,  473,  318,
 /*   330 */   456,  458,  459,  416,  417,  418,  422,  416,  417,  418,
 /*   340 */   422,    2,  176,  426,  427,   64,  612,  179,  385,  111,
 /*   350 */   672,  467,  469,  470,  421,  438,  261,  419,  260,  420,
 /*   360 */   441,  423,   13,   92,  421,  306,  305,  304,  442,  420,
 /*   370 */   462,  737,  345,  600,  601,  346,  737,   90,  426,  427,
 /*   380 */   554,   12,  426,  427,  421,  417,  418,  353,  442,  420,
 /*   390 */   711,  186,  713,  407,  428,  530,  531,  532,  439,   68,
 /*   400 */   551,  312,  440,  263,  447,  448,  440,  263,  447,  448,
 /*   410 */   449,  176,  611,  416,   95,  549,  422,  552,  553,   14,
 /*   420 */   416,   65,  269,  422,  622,  623,  624,  625,  626,  426,
 /*   430 */   427,   13,   92,  232,  519,  344,  479,  430,  432,  433,
 /*   440 */   434,  435,  436,  437,  262,  445,  266,  416,  450,  451,
 /*   450 */   587,   21,  629,  440,  544,  276,  277,  278,  279,  280,
 /*   460 */   281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
 /*   470 */   291,  292,  293,  294,  296,  297,  298,  299,  300,  301,
 /*   480 */   302,  303,  416,  417,  418,  422,  990,   71,  270,  571,
 /*   490 */    65,  176,  620,  621,  627,  628,  183,  128,  194,  242,
 /*   500 */   630,  421,  438,  261,  419,  260,  420,  441,  423,  426,
 /*   510 */   427,   13,   92,  319,  306,  305,  304,  386,  273,  990,
 /*   520 */   522,  990,  546,  990,  990,  669,  416,  426,  427,  422,
 /*   530 */   416,  417,  418,  422,   66,  990,  674,    4,    1,  706,
 /*   540 */   407,  428,  572,  573,  127,  439,   68,  597,  598,  599,
 /*   550 */   712,  440,  263,  447,  448,  990,   26,  449,  417,  418,
 /*   560 */   176,  484,  306,  305,  304,  613,  614,  273,  990,  522,
 /*   570 */   990,   87,  990,  990,  315,  426,  427,   10,   12,  243,
 /*   580 */    13,   92,  714,  429,  430,  432,  433,  434,  435,  436,
 /*   590 */   437,  262,  445,  266,   96,  450,  451,  426,  427,  440,
 /*   600 */   263,  447,  448,   85,  276,  277,  278,  279,  280,  281,
 /*   610 */   282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
 /*   620 */   292,  293,  294,  296,  297,  298,  299,  300,  301,  302,
 /*   630 */   303,  519,  421,  606,  348,  421,  442,  420,  462,  442,
 /*   640 */   420,  462,  679,  680,  681,  682,  683,  390,  481,  200,
 /*   650 */   693,  357,  276,  277,  278,  279,  280,  281,  282,  283,
 /*   660 */   284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
 /*   670 */   294,  296,  297,  298,  299,  300,  301,  302,  303,  416,
 /*   680 */   417,  418,  422,  332,  426,  427,  273,   64,  522,  561,
 /*   690 */   269,  171,  125,  316,  521,  416,  523,  524,  421,  438,
 /*   700 */   261,  419,  260,  420,  441,  423,  694,  273,  343,  522,
 /*   710 */     6,  306,  305,  304,  129,  421,  482,  608,  710,  442,
 /*   720 */   420,  463,  607,  709,  426,  427,  190,  416,  417,  418,
 /*   730 */   422,   61,   62,  338,  386,    1,  421,  191,  428,   19,
 /*   740 */   460,  420,  439,   68,  475,  530,  531,  532,  440,  263,
 /*   750 */   447,  448,  426,  427,  449,    5,  272, 1024, 1024,  306,
 /*   760 */   305,  304,  416,  417,  418,  422,  593,  594, 1024,  317,
 /*   770 */    64,  590,  426,  427,  121,  330,  177,  233,  477,  478,
 /*   780 */   479,  430,  432,  433,  434,  435,  436,  437,  262,  445,
 /*   790 */   266,  192,  450,  451,  335, 1025,  440,  263,  447,  448,
 /*   800 */  1025,  276,  277,  278,  279,  280,  281,  282,  283,  284,
 /*   810 */   285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
 /*   820 */   296,  297,  298,  299,  300,  301,  302,  303,  519,  569,
 /*   830 */   271,  440,  263,  447,  448, 1024, 1024,  416,  102,  421,
 /*   840 */   422,   16,  421,  460,  420,   66,  460,  420,   46,  276,
 /*   850 */   277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
 /*   860 */   287,  288,  289,  290,  291,  292,  293,  294,  296,  297,
 /*   870 */   298,  299,  300,  301,  302,  303,  416,  417,  418,  422,
 /*   880 */   483,  421,  485,  100,    3,  442,  420,  568,  691,  426,
 /*   890 */   427,  122,  486,   99,  400,  421,  438,  261,  419,  260,
 /*   900 */   420,  441,  423,  592,  487,  616,  488,  242,  306,  305,
 /*   910 */   304,  174,  173,  176,  595,  213,  426,  427,  426,  427,
 /*   920 */   655,  426,  427,   84,  416,  417,  418,  422,  426,  427,
 /*   930 */    55,  489,   64,  268,  182,  428,  268,  490,  347,  439,
 /*   940 */   426,  427,  426,  427,  123,  440,  263,  447,  448,  984,
 /*   950 */   341,  449,  398,  610,  215,  402,  306,  305,  304,  659,
 /*   960 */    10,  461,   69,   70,  466, 1019, 1019,  426,  427,  426,
 /*   970 */   427,  426,  427,  426,  427,  604, 1019,  519,  431,  432,
 /*   980 */   433,  434,  435,  436,  437,  262,  445,  266,  349,  450,
 /*   990 */   451,  578,  217,  440,  263,  447,  448,  661,  276,  277,
 /*  1000 */   278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
 /*  1010 */   288,  289,  290,  291,  292,  293,  294,  296,  297,  298,
 /*  1020 */   299,  300,  301,  302,  303,  421,  640,  395,  984,  442,
 /*  1030 */   420,  462,  689,  631,  421,  438,  261,  419,  260,  420,
 /*  1040 */   441,  423,  632, 1019, 1019,  356,  276,  277,  278,  279,
 /*  1050 */   280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
 /*  1060 */   290,  291,  292,  293,  294,  296,  297,  298,  299,  300,
 /*  1070 */   301,  302,  303,  358,  428,  929,  929,  658,  439,   68,
 /*  1080 */   248,  416,  249,  321,  422,  361,  929,  363,  364,   65,
 /*  1090 */   449,  204,  206,  365,  368,  366,  367,  314,  308,  534,
 /*  1100 */   526,  309,  369,  533,  535,  536,  132,  252,  474,  657,
 /*  1110 */   516,  476,  177,  233,  477,  478,  479,  430,  432,  433,
 /*  1120 */   311,  435,  436,  437,  262,  445,  266,  370,  450,  451,
 /*  1130 */   421,  438,  261,  419,  260,  420,  441,  423,  372,  457,
 /*  1140 */   491,  373,  421,   40,  261,  419,  424,  420,  496,  423,
 /*  1150 */   375,  492,  929,  929, 1019,   72,  377,  379,  416,  176,
 /*  1160 */   208,  422,  371,  322,  253,  210,   65,  374,  730,  381,
 /*  1170 */   428,  254,  386,  730,  439,   68,  426,  427,  383,   13,
 /*  1180 */    92,  319,  428,  670,  426,  427,  449,  426,  427,  675,
 /*  1190 */   686,  391,  688,  337,  308,  534,  526,  309,  110,  533,
 /*  1200 */   535,  536,  132,  392,  474,  256,  516,  476,  177,  233,
 /*  1210 */   477,  478,  479,  430,  432,  433,  311,  435,  436,  437,
 /*  1220 */   262,  445,  266,  493,  450,  451,  421,  438,  261,  419,
 /*  1230 */   260,  420,  441,  423,   49,  396,  176,  468,  399,  504,
 /*  1240 */   229,  558,  267,   76,  473,   91,  456,  458,  459,  494,
 /*  1250 */     8,  495,  703,  731,  117,  118,   13,   92,  319,  426,
 /*  1260 */   427,  264,  265,  179,  444,  111,  428,  467,  469,  470,
 /*  1270 */   439,   68,  178,   73,  103,  426,  427,  119,   82,  464,
 /*  1280 */   104, 1018,  449,  465,   22,  426,  427,  426,  427,  340,
 /*  1290 */   308,  534,  526,  309,   23,  533,  535,  536,  132,   24,
 /*  1300 */   474,   25,  516,  476,  177,  233,  477,  478,  479,  430,
 /*  1310 */   432,  433,  311,  435,  436,  437,  262,  445,  266,  497,
 /*  1320 */   450,  451,  498,  501,  499,   83,  500,   11,  502,   27,
 /*  1330 */   421,  438,  261,  419,  260,  420,  441,  423,  547,  457,
 /*  1340 */    29,   30,  421,   31,  261,  419,  424,  420,   32,  423,
 /*  1350 */   136,  503,   33,  237,  505,  426,  427,   34,  426,  427,
 /*  1360 */   426,  427,  426,  427,  426,  427,   35,   36,   38,   39,
 /*  1370 */   428,   41,   42,   43,  439,   68,  295,  416,   45,   47,
 /*  1380 */   422,  545,  428,   48,   50,   65,  449,  426,  427,   51,
 /*  1390 */   426,  427,   10,  245,  308,  534,  526,  309,  110,  533,
 /*  1400 */   535,  536,  132,  105,  474,   52,  516,  476,  177,  233,
 /*  1410 */   477,  478,  479,  430,  432,  433,  311,  435,  436,  437,
 /*  1420 */   262,  445,  266,  506,  450,  451,  421,  438,  261,  419,
 /*  1430 */   260,  420,  441,  423,   53,  320,  507,  468,   54,   56,
 /*  1440 */   229,  558,  326,   78,  473,   57,  456,  458,  459,  508,
 /*  1450 */    58,   74,  548,  550,  106,  176,  556,  559,  116,  426,
 /*  1460 */   427,  239,  562,  179,  563,  111,  428,  467,  469,  470,
 /*  1470 */   439,   68,  426,  427,   17,   13,   92,  319,   20,   86,
 /*  1480 */   416,   88,  449,  422,   94,  426,  427,  509,   59,  401,
 /*  1490 */   308,  534,  526,  309,  591,  533,  535,  536,  132,   93,
 /*  1500 */   474,  195,  516,  476,  177,  233,  477,  478,  479,  430,
 /*  1510 */   432,  433,  311,  435,  436,  437,  262,  445,  266,  405,
 /*  1520 */   450,  451,  602,  426,  427,  510,  596,  511,  173,  512,
 /*  1530 */   421,  438,  261,  419,  260,  420,  441,  423,  107,  457,
 /*  1540 */   615,  609,  421,  174,  261,  419,  424,  420,  513,  423,
 /*  1550 */     7,  355,  639,  199,  641,  387,  201,  667,  176,  360,
 /*  1560 */   202,  426,  427,  426,  427,  426,  427,  671,  642,  203,
 /*  1570 */   428,  643,  644,  205,  439,   68,  645,  646,   13,   92,
 /*  1580 */   207,  209,  428,  647,  426,  427,  449,  648,  649,  651,
 /*  1590 */   211,  124,  652,  408,  308,  534,  526,  309,  110,  533,
 /*  1600 */   535,  536,  132,  212,  474,  656,  516,  476,  177,  233,
 /*  1610 */   477,  478,  479,  430,  432,  433,  311,  435,  436,  437,
 /*  1620 */   262,  445,  266,  214,  450,  451,  660,  416,  417,  418,
 /*  1630 */   422,  216,  810,  662,  218,   64,  221,  468,  665,  219,
 /*  1640 */   229,  558,  323,   75,  473,  220,  456,  458,  459,  421,
 /*  1650 */   438,  261,  419,  260,  420,  441,  423,  685,  393,  306,
 /*  1660 */   305,  304,  223,  179,  224,  111,  397,  467,  469,  470,
 /*  1670 */   690,   97,  426,  427,  225,  698,   98,   67,  101,  705,
 /*  1680 */   722,   18,  722,  722,  722,  722,  722,  722,  722,  428,
 /*  1690 */   722,  722,  722,  439,   68,  722,  440,  263,  447,  448,
 /*  1700 */   722,  722,  722,  722,  722,  449,  722,  722,  722,  722,
 /*  1710 */   722,  722,  722,  310,  534,  526,  309,  722,  533,  535,
 /*  1720 */   536,  132,  722,  474,  722,  516,  476,  177,  233,  477,
 /*  1730 */   478,  479,  430,  432,  433,  311,  435,  436,  437,  262,
 /*  1740 */   445,  266,  722,  450,  451,  722,  722,  722,  722,  276,
 /*  1750 */   277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
 /*  1760 */   287,  288,  289,  290,  291,  292,  293,  294,  296,  297,
 /*  1770 */   298,  299,  300,  301,  302,  303,  421,  438,  261,  419,
 /*  1780 */   260,  420,  441,  423,  722,  722,  722,  722,  421,  722,
 /*  1790 */   261,  419,  424,  420,  722,  423,  722,  722,  722,  722,
 /*  1800 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  1810 */   722,  722,  722,  722,  722,  722,  428,  722,  722,  722,
 /*  1820 */   439,   68,  722,  722,  722,  722,  722,  722,  428,  722,
 /*  1830 */   722,  722,  449,  421,  438,  261,  419,  260,  420,  441,
 /*  1840 */   423,  525,  526,  309,  514,  533,  535,  536,  132,  722,
 /*  1850 */   474,  722,  516,  476,  177,  233,  477,  478,  479,  430,
 /*  1860 */   432,  433,  311,  435,  436,  437,  262,  445,  266,  722,
 /*  1870 */   450,  451,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  1880 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  1890 */   421,  438,  261,  419,  260,  420,  441,  423,  722,  527,
 /*  1900 */   309,  722,  533,  535,  536,  132,  722,  474,  722,  516,
 /*  1910 */   476,  177,  233,  477,  478,  479,  430,  432,  433,  311,
 /*  1920 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  1930 */   428,  722,  722,  722,  439,   68,  722,  722,  722,  722,
 /*  1940 */   722,  722,  722,  722,  722,  722,  449,  722,  421,  722,
 /*  1950 */   261,  419,  424,  420,  722,  423,  722,  722,  722,  722,
 /*  1960 */   722,  722,  518,  722,  474,  722,  516,  476,  177,  233,
 /*  1970 */   477,  478,  479,  430,  432,  433,  434,  435,  436,  437,
 /*  1980 */   262,  445,  266,  722,  450,  451,  722,  722,  428,  722,
 /*  1990 */   722,  722,  421,  438,  261,  419,  260,  420,  441,  423,
 /*  2000 */   722,  722,  722,  722,  342,  722,  421,  722,  261,  419,
 /*  2010 */   260,  420,  441,  423,  722,  722,  722,  722,  722,  722,
 /*  2020 */   722,  722,  722,  722,  722,  722,  722,  517,  722,  722,
 /*  2030 */   722,  722,  428,  722,  722,  722,  439,   68,  722,  722,
 /*  2040 */   722,  722,  722,  722,  722,  722,  428,  722,  449,  421,
 /*  2050 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  2060 */   722,  722,  449,  722,  722,  722,  722,  722,  722,  112,
 /*  2070 */   177,  233,  477,  478,  479,  430,  432,  433,  434,  435,
 /*  2080 */   436,  437,  331,  445,  266,  722,  450,  451,  722,  428,
 /*  2090 */   722,  722,  576,  439,   68,  722,  262,  722,  722,   81,
 /*  2100 */   450,  722,  579,  565,  722,  449,  421,  438,  261,  419,
 /*  2110 */   260,  420,  441,  423,  722,  722,  722,  722,  722,  722,
 /*  2120 */   722,  537,  722,  474,  722,  516,  476,  177,  233,  477,
 /*  2130 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  2140 */   445,  266,  575,  450,  451,  722,  428,  722,  722,  722,
 /*  2150 */   439,   68,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2160 */   722,  722,  449,  722,  722,  722,  421,  722,  261,  419,
 /*  2170 */   424,  420,  722,  423,  722,  722,  722,  722,  722,  722,
 /*  2180 */   722,  722,  722,  112,  177,  233,  477,  478,  479,  430,
 /*  2190 */   432,  433,  434,  435,  436,  437,  331,  445,  266,  722,
 /*  2200 */   450,  451,  722,  722,  722,  722,  428,  722,  421,  438,
 /*  2210 */   261,  419,  260,  420,  441,  423,  564,  565,  722,  196,
 /*  2220 */   722,  722,  350,  722,  722,  722,  722,  722,  722,  722,
 /*  2230 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2240 */   722,  722,  722,  722,  722,  722,  722,  722,  428,  722,
 /*  2250 */   722,  722,  439,   68,  722,  722,  722,  722,  722,  722,
 /*  2260 */   722,  722,  722,  722,  449,  421,  438,  261,  419,  260,
 /*  2270 */   420,  441,  423,  421,  722,  261,  419,  424,  420,  722,
 /*  2280 */   423,  722,  722,  722,  722,  181,  177,  233,  477,  478,
 /*  2290 */   479,  430,  432,  433,  434,  435,  436,  437,  262,  445,
 /*  2300 */   266,  722,  450,  451,  722,  428,  722,  722,  722,  439,
 /*  2310 */    68,  722,  722,  428,  722,  722,  722,  722,  722,  722,
 /*  2320 */   722,  449,  722,  722,  722,  722,  336,  574,  722,  697,
 /*  2330 */   421,  722,  261,  419,  424,  420,  722,  423,  722,  722,
 /*  2340 */   722,  722,  708,  177,  233,  477,  478,  479,  430,  432,
 /*  2350 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  2360 */   451,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  2370 */   428,  722,  722,  722,  722,  722,  421,  722,  261,  419,
 /*  2380 */   424,  420,  722,  423,  722,  722,  696,  722,  722,  722,
 /*  2390 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2400 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  2410 */   722,  722,  722,  722,  722,  722,  428,  449,  722,  175,
 /*  2420 */   722,  722,  707,  722,  421,  438,  261,  419,  260,  420,
 /*  2430 */   441,  423,  226,  722,  722,  480,  722,  722,  476,  177,
 /*  2440 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  2450 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  722,
 /*  2460 */   722,  722,  722,  722,  428,  722,  722,  722,  439,   68,
 /*  2470 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2480 */   449,  421,  438,  261,  419,  260,  420,  441,  423,  421,
 /*  2490 */   722,  261,  419,  424,  420,  722,  423,  722,  722,  722,
 /*  2500 */   722,  181,  177,  233,  477,  478,  479,  430,  432,  433,
 /*  2510 */   434,  435,  436,  437,  262,  445,  266,  722,  450,  451,
 /*  2520 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  428,
 /*  2530 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  722,
 /*  2540 */   722,  722,  722,  570,  722,   63,  722,  722,  722,  722,
 /*  2550 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  137,
 /*  2560 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  2570 */   437,  262,  445,  266,  722,  450,  451,  421,  438,  261,
 /*  2580 */   419,  260,  420,  441,  423,  421,  722,  261,  419,  424,
 /*  2590 */   420,  722,  423,  722,  722,  421,  438,  261,  419,  260,
 /*  2600 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  2610 */   722,  722,  722,  722,  722,  722,  722,  428,  722,  722,
 /*  2620 */   722,  439,   68,  722,  722,  428,  722,  722,  722,  722,
 /*  2630 */   722,  722,  722,  449,  722,  428,  722,  722,  722,  439,
 /*  2640 */    68,  406,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2650 */   722,  449,  722,  722,  722,  138,  233,  477,  478,  479,
 /*  2660 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  2670 */   722,  450,  451,  139,  233,  477,  478,  479,  430,  432,
 /*  2680 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  2690 */   451,  722,  722,  722,  722,  722,  722,  421,  438,  261,
 /*  2700 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  2710 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2720 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2730 */   722,  722,  722,  722,  722,  722,  722,  428,  722,  722,
 /*  2740 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  2750 */   722,  722,  722,  449,  722,  421,  438,  261,  419,  260,
 /*  2760 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  2770 */   722,  722,  722,  722,  722,  133,  233,  477,  478,  479,
 /*  2780 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  2790 */   722,  450,  451,  722,  722,  428,  722,  722,  722,  439,
 /*  2800 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2810 */   722,  449,  722,  722,  722,  421,  438,  261,  419,  260,
 /*  2820 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  2830 */   722,  722,  722,  140,  233,  477,  478,  479,  430,  432,
 /*  2840 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  2850 */   451,  722,  722,  722,  722,  428,  722,  722,  722,  439,
 /*  2860 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2870 */   722,  449,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2880 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2890 */   722,  722,  722,  141,  233,  477,  478,  479,  430,  432,
 /*  2900 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  2910 */   451,  722,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  2920 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2930 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2940 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2950 */   722,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  2960 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  2970 */   722,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  2980 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  2990 */   722,  142,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  3000 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  3010 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  3020 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  722,
 /*  3030 */   722,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  3040 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  143,
 /*  3050 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  3060 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  722,
 /*  3070 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  3080 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  722,
 /*  3090 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3100 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  144,
 /*  3110 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  3120 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  421,
 /*  3130 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  3140 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3150 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3160 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  428,
 /*  3170 */   722,  722,  722,  439,   68,  722,  722,  722,  722,  722,
 /*  3180 */   722,  722,  722,  722,  722,  449,  722,  421,  438,  261,
 /*  3190 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  3200 */   722,  722,  722,  722,  722,  722,  722,  145,  233,  477,
 /*  3210 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  3220 */   445,  266,  722,  450,  451,  722,  722,  428,  722,  722,
 /*  3230 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  3240 */   722,  722,  722,  449,  722,  722,  722,  421,  438,  261,
 /*  3250 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  3260 */   722,  722,  722,  722,  722,  146,  233,  477,  478,  479,
 /*  3270 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  3280 */   722,  450,  451,  722,  722,  722,  722,  428,  722,  722,
 /*  3290 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  3300 */   722,  722,  722,  449,  722,  722,  722,  722,  722,  722,
 /*  3310 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3320 */   722,  722,  722,  722,  722,  147,  233,  477,  478,  479,
 /*  3330 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  3340 */   722,  450,  451,  722,  722,  421,  438,  261,  419,  260,
 /*  3350 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  3360 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3370 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3380 */   722,  722,  722,  722,  722,  428,  722,  722,  722,  439,
 /*  3390 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3400 */   722,  449,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  3410 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3420 */   722,  722,  722,  148,  233,  477,  478,  479,  430,  432,
 /*  3430 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  3440 */   451,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  3450 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  3460 */   722,  722,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  3470 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3480 */   722,  149,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  3490 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  3500 */   722,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  3510 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  3520 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3530 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3540 */   722,  150,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  3550 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  3560 */   722,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  3570 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3580 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3590 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3600 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  3610 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  421,
 /*  3620 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  3630 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  151,
 /*  3640 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  3650 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  428,
 /*  3660 */   722,  722,  722,  439,   68,  722,  722,  722,  722,  722,
 /*  3670 */   722,  722,  722,  722,  722,  449,  722,  722,  722,  421,
 /*  3680 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  3690 */   722,  722,  722,  722,  722,  722,  722,  152,  233,  477,
 /*  3700 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  3710 */   445,  266,  722,  450,  451,  722,  722,  722,  722,  428,
 /*  3720 */   722,  722,  722,  439,   68,  722,  722,  722,  722,  722,
 /*  3730 */   722,  722,  722,  722,  722,  449,  722,  722,  722,  722,
 /*  3740 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3750 */   722,  722,  722,  722,  722,  722,  722,  134,  233,  477,
 /*  3760 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  3770 */   445,  266,  722,  450,  451,  722,  722,  421,  438,  261,
 /*  3780 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  3790 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3800 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3810 */   722,  722,  722,  722,  722,  722,  722,  428,  722,  722,
 /*  3820 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  3830 */   722,  722,  722,  449,  722,  421,  438,  261,  419,  260,
 /*  3840 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  3850 */   722,  722,  722,  722,  722,  153,  233,  477,  478,  479,
 /*  3860 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  3870 */   722,  450,  451,  722,  722,  428,  722,  722,  722,  439,
 /*  3880 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3890 */   722,  449,  722,  722,  722,  421,  438,  261,  419,  260,
 /*  3900 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  3910 */   722,  722,  722,  154,  233,  477,  478,  479,  430,  432,
 /*  3920 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  3930 */   451,  722,  722,  722,  722,  428,  722,  722,  722,  439,
 /*  3940 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3950 */   722,  449,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3960 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  3970 */   722,  722,  722,  155,  233,  477,  478,  479,  430,  432,
 /*  3980 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  3990 */   451,  722,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  4000 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4010 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4020 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4030 */   722,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  4040 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  4050 */   722,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  4060 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4070 */   722,  156,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  4080 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  4090 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  4100 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  722,
 /*  4110 */   722,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  4120 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  157,
 /*  4130 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  4140 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  722,
 /*  4150 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  4160 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  722,
 /*  4170 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4180 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  158,
 /*  4190 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  4200 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  421,
 /*  4210 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  4220 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4230 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4240 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  428,
 /*  4250 */   722,  722,  722,  439,   68,  722,  722,  722,  722,  722,
 /*  4260 */   722,  722,  722,  722,  722,  449,  722,  421,  438,  261,
 /*  4270 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  4280 */   722,  722,  722,  722,  722,  722,  722,  159,  233,  477,
 /*  4290 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  4300 */   445,  266,  722,  450,  451,  722,  722,  428,  722,  722,
 /*  4310 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  4320 */   722,  722,  722,  449,  722,  722,  722,  421,  438,  261,
 /*  4330 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  4340 */   722,  722,  722,  722,  722,  160,  233,  477,  478,  479,
 /*  4350 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  4360 */   722,  450,  451,  722,  722,  722,  722,  428,  722,  722,
 /*  4370 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  4380 */   722,  722,  722,  449,  722,  722,  722,  722,  722,  722,
 /*  4390 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4400 */   722,  722,  722,  722,  722,  135,  233,  477,  478,  479,
 /*  4410 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  4420 */   722,  450,  451,  722,  722,  421,  438,  261,  419,  260,
 /*  4430 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  4440 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4450 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4460 */   722,  722,  722,  722,  722,  428,  722,  722,  722,  439,
 /*  4470 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4480 */   722,  449,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  4490 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4500 */   722,  722,  722,  161,  233,  477,  478,  479,  430,  432,
 /*  4510 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  4520 */   451,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  4530 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  4540 */   722,  722,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  4550 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4560 */   722,  162,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  4570 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  4580 */   722,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  4590 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  449,
 /*  4600 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4610 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4620 */   722,  163,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  4630 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  4640 */   722,  421,  438,  261,  419,  260,  420,  441,  423,  722,
 /*  4650 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4660 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4670 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4680 */   722,  428,  722,  722,  722,  439,   68,  722,  722,  722,
 /*  4690 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  421,
 /*  4700 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  4710 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  164,
 /*  4720 */   233,  477,  478,  479,  430,  432,  433,  434,  435,  436,
 /*  4730 */   437,  262,  445,  266,  722,  450,  451,  722,  722,  428,
 /*  4740 */   722,  722,  722,  439,   68,  722,  722,  722,  722,  722,
 /*  4750 */   722,  722,  722,  722,  722,  449,  722,  722,  722,  421,
 /*  4760 */   438,  261,  419,  260,  420,  441,  423,  722,  722,  722,
 /*  4770 */   722,  722,  722,  722,  722,  722,  722,  165,  233,  477,
 /*  4780 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  4790 */   445,  266,  722,  450,  451,  722,  722,  722,  722,  428,
 /*  4800 */   722,  722,  722,  439,   68,  722,  722,  722,  722,  722,
 /*  4810 */   722,  722,  722,  722,  722,  449,  722,  722,  722,  722,
 /*  4820 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4830 */   722,  722,  722,  722,  722,  722,  722,  166,  233,  477,
 /*  4840 */   478,  479,  430,  432,  433,  434,  435,  436,  437,  262,
 /*  4850 */   445,  266,  722,  450,  451,  722,  722,  421,  438,  261,
 /*  4860 */   419,  260,  420,  441,  423,  722,  722,  722,  722,  722,
 /*  4870 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4880 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4890 */   722,  722,  722,  722,  722,  722,  722,  428,  722,  722,
 /*  4900 */   722,  439,   68,  722,  722,  722,  722,  722,  722,  722,
 /*  4910 */   722,  722,  722,  449,  722,  421,  438,  261,  419,  260,
 /*  4920 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  4930 */   722,  722,  722,  722,  722,  167,  233,  477,  478,  479,
 /*  4940 */   430,  432,  433,  434,  435,  436,  437,  262,  445,  266,
 /*  4950 */   722,  450,  451,  722,  722,  428,  722,  722,  722,  439,
 /*  4960 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  4970 */   722,  449,  722,  722,  722,  421,  438,  261,  419,  260,
 /*  4980 */   420,  441,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  4990 */   722,  722,  722,  168,  233,  477,  478,  479,  430,  432,
 /*  5000 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  5010 */   451,  722,  722,  722,  722,  428,  722,  722,  722,  439,
 /*  5020 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5030 */   722,  449,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5040 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5050 */   722,  722,  722,  169,  233,  477,  478,  479,  430,  432,
 /*  5060 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  5070 */   451,  722,  722,  421,  438,  261,  419,  260,  420,  441,
 /*  5080 */   423,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5090 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5100 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5110 */   722,  722,  722,  428,  722,  722,  722,  439,   68,  722,
 /*  5120 */   722,  722,  722,  722,  722,  722,  722,  722,  457,  449,
 /*  5130 */   722,  421,  722,  261,  419,  257,  420,  462,  423,  722,
 /*  5140 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5150 */   722,  170,  233,  477,  478,  479,  430,  432,  433,  434,
 /*  5160 */   435,  436,  437,  262,  445,  266,  722,  450,  451,  722,
 /*  5170 */   722,  428,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5180 */   722,  722,  722,  722,  722,  722,  722,  110,  722,  403,
 /*  5190 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5200 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5210 */   722,  722,  722,  722,  722,  421,  438,  261,  419,  260,
 /*  5220 */   420,  441,  423,  722,  722,  722,  468,  231,  313,  230,
 /*  5230 */   274,  275,  722,  473,  722,  456,  458,  459,  722,  421,
 /*  5240 */   722,  261,  419,  424,  420,  722,  423,  722,  722,  722,
 /*  5250 */   722,  722,  179,  722,  111,  428,  467,  469,  470,  439,
 /*  5260 */    68,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5270 */   457,  449,  722,  421,  722,  261,  419,  424,  420,  428,
 /*  5280 */   423,  722,  722,  722,  404,  722,  722,  722,  722,  722,
 /*  5290 */   722,  722,  722,  722,  722,  110,  722,  446,  430,  432,
 /*  5300 */   433,  434,  435,  436,  437,  262,  445,  266,  722,  450,
 /*  5310 */   451,  722,  722,  428,  722,  457,  722,  722,  421,  722,
 /*  5320 */   261,  419,  424,  420,  722,  423,  722,  722,  722,  110,
 /*  5330 */   722,  722,  722,  722,  468,  722,  722,  520,  722,  722,
 /*  5340 */   722,  722,  722,  722,  722,  722,  722,  188,  722,  722,
 /*  5350 */   722,  722,  189,  722,  722,  722,  722,  722,  428,  722,
 /*  5360 */   172,  722,  111,  722,  467,  469,  470,  722,  468,  259,
 /*  5370 */   471,  227,  274,  275,  110,  473,  722,  456,  458,  459,
 /*  5380 */   722,  722,  722,  457,  722,  722,  421,  722,  261,  419,
 /*  5390 */   424,  420,  722,  423,  179,  722,  111,  722,  467,  469,
 /*  5400 */   470,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5410 */   722,  722,  722,  468,  231,  471,  227,  274,  275,  722,
 /*  5420 */   473,  722,  456,  458,  459,  704,  428,  722,  457,  722,
 /*  5430 */   722,  421,  722,  261,  419,  424,  420,  722,  423,  179,
 /*  5440 */   722,  111,  110,  467,  469,  470,  722,  722,  722,  722,
 /*  5450 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5460 */   722,  722,  457,  722,  722,  421,  722,  261,  419,  424,
 /*  5470 */   420,  428,  423,  722,  722,  722,  722,  722,  722,  722,
 /*  5480 */   722,  468,  231,  313,  230,  274,  275,  110,  473,  722,
 /*  5490 */   456,  458,  459,  722,  722,  722,  722,  722,  722,  722,
 /*  5500 */   722,  722,  722,  722,  722,  428,  722,  179,  722,  111,
 /*  5510 */   722,  467,  469,  470,  722,  722,  722,  722,  722,  722,
 /*  5520 */   722,  110,  722,  722,  722,  722,  468,  231,  471,  230,
 /*  5530 */   274,  275,  722,  473,  722,  456,  458,  459,  722,  722,
 /*  5540 */   457,  722,  722,  421,  722,  261,  419,  424,  420,  722,
 /*  5550 */   423,  722,  179,  722,  111,  722,  467,  469,  470,  722,
 /*  5560 */   468,  258,  471,  227,  274,  275,  722,  473,  722,  456,
 /*  5570 */   458,  459,  722,  722,  457,  722,  722,  421,  722,  261,
 /*  5580 */   419,  424,  420,  428,  423,  722,  179,  722,  111,  722,
 /*  5590 */   467,  469,  470,  722,  722,  722,  722,  722,  722,  110,
 /*  5600 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5610 */   722,  722,  722,  722,  722,  722,  722,  428,  722,  722,
 /*  5620 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5630 */   722,  722,  722,  110,  722,  722,  722,  722,  468,  722,
 /*  5640 */   722,  229,  558,  327,   77,  473,  722,  456,  458,  459,
 /*  5650 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5660 */   722,  722,  722,  722,  179,  722,  111,  722,  467,  469,
 /*  5670 */   470,  722,  468,  722,  722,  228,  722,  722,   80,  555,
 /*  5680 */   453,  456,  458,  459,  457,  722,  722,  421,  722,  261,
 /*  5690 */   419,  424,  420,  722,  423,  722,  722,  722,  179,  722,
 /*  5700 */   111,  722,  467,  469,  470,  722,  722,  722,  722,  722,
 /*  5710 */   722,  722,  722,  722,  722,  722,  722,  722,  457,  722,
 /*  5720 */   722,  421,  722,  261,  419,  424,  420,  428,  423,  722,
 /*  5730 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5740 */   722,  722,  722,  110,  722,  722,  722,  722,  722,  722,
 /*  5750 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5760 */   722,  428,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5770 */   722,  722,  722,  722,  722,  722,  722,  110,  722,  722,
 /*  5780 */   722,  722,  468,  722,  722,  228,  722,  722,   79,  555,
 /*  5790 */   454,  456,  458,  459,  722,  457,  722,  722,  421,  722,
 /*  5800 */   261,  419,  424,  420,  722,  423,  722,  722,  179,  722,
 /*  5810 */   111,  722,  467,  469,  470,  722,  468,  722,  722,  229,
 /*  5820 */   558,  324,  722,  473,  722,  456,  458,  459,  722,  457,
 /*  5830 */   722,  722,  421,  722,  261,  419,  424,  420,  428,  423,
 /*  5840 */   722,  722,  179,  722,  111,  722,  467,  469,  470,  722,
 /*  5850 */   722,  722,  722,  722,  110,  722,  722,  722,  722,  722,
 /*  5860 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5870 */   722,  722,  428,  722,  722,  722,  722,  722,  722,  722,
 /*  5880 */   722,  722,  722,  722,  722,  722,  722,  722,  110,  722,
 /*  5890 */   722,  722,  722,  468,  722,  722,  229,  558,  325,  722,
 /*  5900 */   473,  722,  456,  458,  459,  722,  722,  722,  722,  722,
 /*  5910 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  179,
 /*  5920 */   722,  111,  722,  467,  469,  470,  722,  468,  722,  722,
 /*  5930 */   229,  558,  328,  722,  473,  722,  456,  458,  459,  457,
 /*  5940 */   722,  722,  421,  722,  261,  419,  424,  420,  722,  423,
 /*  5950 */   722,  722,  722,  179,  722,  111,  722,  467,  469,  470,
 /*  5960 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  5970 */   722,  722,  722,  457,  722,  722,  421,  722,  261,  419,
 /*  5980 */   424,  420,  428,  423,  722,  722,  457,  722,  722,  421,
 /*  5990 */   722,  261,  419,  424,  420,  722,  423,  722,  110,  722,
 /*  6000 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6010 */   722,  722,  722,  722,  722,  722,  428,  722,  722,  722,
 /*  6020 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  428,
 /*  6030 */   722,  722,  110,  722,  722,  722,  722,  468,  722,  722,
 /*  6040 */   229,  558,  329,  722,  473,  110,  456,  458,  459,  722,
 /*  6050 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6060 */   722,  722,  722,  179,  722,  111,  722,  467,  469,  470,
 /*  6070 */   722,  468,  722,  722,  228,  722,  722,  722,  555,  455,
 /*  6080 */   456,  458,  459,  722,  468,  722,  722,  228,  722,  722,
 /*  6090 */   722,  555,  557,  456,  458,  459,  722,  179,  722,  111,
 /*  6100 */   722,  467,  469,  470,  421,  722,  261,  419,  424,  420,
 /*  6110 */   179,  423,  111,  722,  467,  469,  470,  421,  722,  261,
 /*  6120 */   419,  424,  420,  722,  423,  722,  722,  722,  722,  722,
 /*  6130 */   722,  722,  722,  722,  722,  722,  722,  722,  421,  722,
 /*  6140 */   261,  419,  424,  420,  428,  423,  722,  722,  722,  722,
 /*  6150 */   722,  421,  722,  261,  419,  424,  420,  428,  423,  722,
 /*  6160 */   110,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6170 */   722,  722,  722,  110,  722,  722,  722,  722,  428,  722,
 /*  6180 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6190 */   722,  428,  722,  722,  110,  722,  722,  722,  722,  468,
 /*  6200 */   722,  722,  520,  722,  722,  722,  722,  110,  722,  722,
 /*  6210 */   722,  722,  468,  722,  722,  520,  722,  722,  722,  722,
 /*  6220 */   722,  722,  722,  722,  722,  180,  722,  111,  722,  467,
 /*  6230 */   469,  470,  722,  468,  722,  722,  520,  722,  113,  722,
 /*  6240 */   111,  722,  467,  469,  470,  722,  468,  722,  722,  520,
 /*  6250 */   722,  421,  722,  261,  419,  260,  420,  441,  423,  130,
 /*  6260 */   722,  111,  722,  467,  469,  470,  722,  722,  722,  722,
 /*  6270 */   722,  722,  131,  722,  111,  722,  467,  469,  470,  722,
 /*  6280 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6290 */   722,  428,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6300 */   722,  722,  722,  722,  722,  722,  722,  449,  722,  722,
 /*  6310 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6320 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6330 */   722,  722,  722,  722,  722,  722,  722,  576,  722,  722,
 /*  6340 */   722,  262,  722,  722,  722,  450,  722,  722,  722,  722,
 /*  6350 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6360 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6370 */   722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
 /*  6380 */   722,  722,  722,  722,  722,  722,  339,  577,
);
static $yy_lookahead = array(
 /*     0 */   156,  190,  191,  159,  160,  161,  162,  163,  164,  165,
 /*    10 */   166,    7,    2,    9,  173,  174,   49,   13,   14,   15,
 /*    20 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*    30 */   207,   27,   28,   29,   75,   76,   32,  107,  108,  109,
 /*    40 */   110,  111,  112,  199,  171,  174,  205,  203,  204,  176,
 /*    50 */   177,  178,  179,  180,  181,  182,   11,  184,  185,  215,
 /*    60 */    34,   35,   36,   37,   38,   39,  222,  223,  224,  225,
 /*    70 */   226,    6,  228,  229,  230,  231,  205,  233,  234,  235,
 /*    80 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*    90 */   246,  247,  248,  249,  250,  251,    2,  253,  254,  255,
 /*   100 */   256,  257,  258,  259,    6,  261,  214,  263,  264,  265,
 /*   110 */   156,  219,  220,  159,  160,  161,  162,  163,  164,  165,
 /*   120 */   166,  298,   77,   78,  280,   59,  282,    2,  284,  285,
 /*   130 */   286,  152,  153,  154,   40,  156,  157,  158,  192,  193,
 /*   140 */     3,  195,  196,  153,  154,  159,  156,  157,  158,  163,
 /*   150 */   164,  165,  287,  199,   11,  159,  232,  203,  204,  163,
 /*   160 */   164,  165,   97,  167,  168,  169,  170,  159,  194,  215,
 /*   170 */   196,  163,  164,  165,  204,   81,  222,  223,  224,  225,
 /*   180 */   226,   83,  228,  229,  230,  231,  221,  233,  234,  235,
 /*   190 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*   200 */   246,  247,  248,  249,  250,  251,   81,  253,  254,  255,
 /*   210 */   256,  257,  258,  259,  227,  261,    2,  263,  264,  265,
 /*   220 */    77,   78,   79,  156,  216,  217,  159,  160,  161,  162,
 /*   230 */   163,  164,  165,  166,  280,    6,  282,  159,  284,  285,
 /*   240 */   286,  163,  164,  165,  159,   10,  161,  162,  163,  164,
 /*   250 */   159,  166,  227,    6,  163,  164,  165,  271,  159,  168,
 /*   260 */   169,  170,  163,  164,    2,  166,  199,    5,   33,  159,
 /*   270 */   203,  204,   10,  163,  164,  165,   47,   48,  299,  300,
 /*   280 */   301,  302,  215,   69,  199,  306,  307,  308,  309,  299,
 /*   290 */   300,  301,  302,  208,   47,   48,  306,  307,  308,  309,
 /*   300 */   233,  234,    6,  236,  237,  238,  239,  240,  241,  242,
 /*   310 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  303,
 /*   320 */   253,  254,  255,  256,  257,  258,  259,  288,  261,  290,
 /*   330 */   263,  264,  265,    2,    3,    4,    5,    2,    3,    4,
 /*   340 */     5,   10,   80,   47,   48,   10,  218,  280,  189,  282,
 /*   350 */   191,  284,  285,  286,  159,  160,  161,  162,  163,  164,
 /*   360 */   165,  166,  100,  101,  159,   34,   35,   36,  163,  164,
 /*   370 */   165,    6,   50,   51,   52,   53,   11,   55,   47,   48,
 /*   380 */    57,   50,   47,   48,  159,    3,    4,   65,  163,  164,
 /*   390 */   165,  313,  314,  315,  199,  104,  105,  106,  203,  204,
 /*   400 */    77,   50,   71,   72,   73,   74,   71,   72,   73,   74,
 /*   410 */   215,   80,  221,    2,   49,   92,    5,   94,   95,  252,
 /*   420 */     2,   10,  217,    5,   42,   43,   44,   45,   46,   47,
 /*   430 */    48,  100,  101,  238,  103,   50,  241,  242,  243,  244,
 /*   440 */   245,  246,  247,  248,  249,  250,  251,    2,  253,  254,
 /*   450 */     5,  252,  160,   71,  103,  124,  125,  126,  127,  128,
 /*   460 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   470 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*   480 */   149,  150,    2,    3,    4,    5,   57,   76,  283,  279,
 /*   490 */    10,   80,  200,  201,  202,  203,  204,   10,  113,  114,
 /*   500 */   160,  159,  160,  161,  162,  163,  164,  165,  166,   47,
 /*   510 */    48,  100,  101,  102,   34,   35,   36,   30,   89,   90,
 /*   520 */    91,   92,   11,   94,   95,  188,    2,   47,   48,    5,
 /*   530 */     2,    3,    4,    5,   10,   57,  188,   59,   10,  314,
 /*   540 */   315,  199,   86,   87,  206,  203,  204,  209,  210,  211,
 /*   550 */   317,   71,   72,   73,   74,   77,    6,  215,    3,    4,
 /*   560 */    80,   11,   34,   35,   36,   57,   58,   89,   90,   91,
 /*   570 */    92,    1,   94,   95,   96,   47,   48,   66,   50,    8,
 /*   580 */   100,  101,  155,  241,  242,  243,  244,  245,  246,  247,
 /*   590 */   248,  249,  250,  251,    6,  253,  254,   47,   48,   71,
 /*   600 */    72,   73,   74,    6,  124,  125,  126,  127,  128,  129,
 /*   610 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   620 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*   630 */   150,  103,  159,   62,   63,  159,  163,  164,  165,  163,
 /*   640 */   164,  165,   34,   35,   36,   37,   38,   39,   11,   10,
 /*   650 */    62,   12,  124,  125,  126,  127,  128,  129,  130,  131,
 /*   660 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   670 */   142,  143,  144,  145,  146,  147,  148,  149,  150,    2,
 /*   680 */     3,    4,    5,   82,   47,   48,   89,   10,   91,  268,
 /*   690 */   217,   50,  287,  217,  289,    2,  291,  292,  159,  160,
 /*   700 */   161,  162,  163,  164,  165,  166,  118,   89,   50,   91,
 /*   710 */    97,   34,   35,   36,   10,  159,   11,   41,   41,  163,
 /*   720 */   164,  165,   46,   46,   47,   48,  273,    2,    3,    4,
 /*   730 */     5,   69,   70,   98,   30,   10,  159,  274,  199,    6,
 /*   740 */   163,  164,  203,  204,   11,  104,  105,  106,   71,   72,
 /*   750 */    73,   74,   47,   48,  215,   99,  283,    0,    1,   34,
 /*   760 */    35,   36,    2,    3,    4,    5,  115,  116,   11,  293,
 /*   770 */    10,  113,   47,   48,   81,  236,  237,  238,  239,  240,
 /*   780 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*   790 */   251,  275,  253,  254,   84,    6,   71,   72,   73,   74,
 /*   800 */    11,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   810 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   820 */   143,  144,  145,  146,  147,  148,  149,  150,  103,  276,
 /*   830 */   253,   71,   72,   73,   74,   78,   79,    2,   41,  159,
 /*   840 */     5,    6,  159,  163,  164,   10,  163,  164,    6,  124,
 /*   850 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   860 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*   870 */   145,  146,  147,  148,  149,  150,    2,    3,    4,    5,
 /*   880 */    11,  159,   11,    6,   10,  163,  164,  165,   11,   47,
 /*   890 */    48,  172,   11,   60,   61,  159,  160,  161,  162,  163,
 /*   900 */   164,  165,  166,  298,   11,   11,   11,  114,   34,   35,
 /*   910 */    36,   60,   61,   80,  298,    6,   47,   48,   47,   48,
 /*   920 */    11,   47,   48,   88,    2,    3,    4,    5,   47,   48,
 /*   930 */     6,   11,   10,  253,   56,  199,  253,   11,   59,  203,
 /*   940 */    47,   48,   47,   48,  213,   71,   72,   73,   74,    2,
 /*   950 */   117,  215,  119,  219,    6,  122,   34,   35,   36,   11,
 /*   960 */    66,  281,   77,   78,  281,    0,    1,   47,   48,   47,
 /*   970 */    48,   47,   48,   47,   48,  220,   11,  103,  242,  243,
 /*   980 */   244,  245,  246,  247,  248,  249,  250,  251,   59,  253,
 /*   990 */   254,   69,    6,   71,   72,   73,   74,   11,  124,  125,
 /*  1000 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1010 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1020 */   146,  147,  148,  149,  150,  159,    3,    6,   81,  163,
 /*  1030 */   164,  165,   11,    5,  159,  160,  161,  162,  163,  164,
 /*  1040 */   165,  166,  175,   78,   79,  183,  124,  125,  126,  127,
 /*  1050 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1060 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1070 */   148,  149,  150,  183,  199,    0,    1,    3,  203,  204,
 /*  1080 */     7,    2,    9,  217,    5,  183,   11,  183,  183,   10,
 /*  1090 */   215,   10,   10,   12,   12,  183,  183,  222,  223,  224,
 /*  1100 */   225,  226,  183,  228,  229,  230,  231,  186,  233,    3,
 /*  1110 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  1120 */   245,  246,  247,  248,  249,  250,  251,  183,  253,  254,
 /*  1130 */   159,  160,  161,  162,  163,  164,  165,  166,  183,  156,
 /*  1140 */    11,  183,  159,    6,  161,  162,  163,  164,   11,  166,
 /*  1150 */   183,   11,   77,   78,   79,   76,  187,  187,    2,   80,
 /*  1160 */    10,    5,   12,  297,  186,   10,   10,   12,    6,  187,
 /*  1170 */   199,  186,   30,   11,  203,  204,   47,   48,  186,  100,
 /*  1180 */   101,  102,  199,  188,   47,   48,  215,   47,   48,  188,
 /*  1190 */     3,  198,    3,  222,  223,  224,  225,  226,  215,  228,
 /*  1200 */   229,  230,  231,  197,  233,  197,  235,  236,  237,  238,
 /*  1210 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  1220 */   249,  250,  251,   11,  253,  254,  159,  160,  161,  162,
 /*  1230 */   163,  164,  165,  166,    6,  198,   80,  254,  120,   11,
 /*  1240 */   257,  258,  259,  260,  261,  304,  263,  264,  265,   11,
 /*  1250 */    97,   11,  310,   40,   40,   40,  100,  101,  102,   47,
 /*  1260 */    48,   10,   69,  280,   11,  282,  199,  284,  285,  286,
 /*  1270 */   203,  204,   10,   79,   10,   47,   48,    6,   90,   11,
 /*  1280 */    10,   79,  215,   11,   10,   47,   48,   47,   48,  222,
 /*  1290 */   223,  224,  225,  226,   10,  228,  229,  230,  231,   10,
 /*  1300 */   233,   10,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  1310 */   243,  244,  245,  246,  247,  248,  249,  250,  251,   11,
 /*  1320 */   253,  254,   11,   11,   11,   90,   11,   67,   11,   10,
 /*  1330 */   159,  160,  161,  162,  163,  164,  165,  166,   11,  156,
 /*  1340 */    10,   10,  159,   10,  161,  162,  163,  164,   10,  166,
 /*  1350 */    68,   11,   10,   68,   11,   47,   48,   10,   47,   48,
 /*  1360 */    47,   48,   47,   48,   47,   48,   10,   10,   10,   10,
 /*  1370 */   199,   10,   10,   10,  203,  204,   10,    2,   10,   10,
 /*  1380 */     5,  103,  199,   10,   10,   10,  215,   47,   48,   10,
 /*  1390 */    47,   48,   66,  222,  223,  224,  225,  226,  215,  228,
 /*  1400 */   229,  230,  231,   10,  233,   10,  235,  236,  237,  238,
 /*  1410 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  1420 */   249,  250,  251,   11,  253,  254,  159,  160,  161,  162,
 /*  1430 */   163,  164,  165,  166,   10,   85,   11,  254,   10,   10,
 /*  1440 */   257,  258,  259,  260,  261,   10,  263,  264,  265,   11,
 /*  1450 */    10,   76,   11,   93,   10,   80,   11,   11,   40,   47,
 /*  1460 */    48,    3,    3,  280,    3,  282,  199,  284,  285,  286,
 /*  1470 */   203,  204,   47,   48,   85,  100,  101,  102,    6,   85,
 /*  1480 */     2,    6,  215,    5,   10,   47,   48,   11,   10,  222,
 /*  1490 */   223,  224,  225,  226,  113,  228,  229,  230,  231,  101,
 /*  1500 */   233,  113,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  1510 */   243,  244,  245,  246,  247,  248,  249,  250,  251,   41,
 /*  1520 */   253,  254,   54,   47,   48,   11,   46,   11,   61,   11,
 /*  1530 */   159,  160,  161,  162,  163,  164,  165,  166,   10,  156,
 /*  1540 */    11,   64,  159,   60,  161,  162,  163,  164,   11,  166,
 /*  1550 */    10,    7,   11,    8,   11,   28,   10,   26,   80,   12,
 /*  1560 */    10,   47,   48,   47,   48,   47,   48,   31,   11,   10,
 /*  1570 */   199,   11,   11,   10,  203,  204,   11,   11,  100,  101,
 /*  1580 */    10,   10,  199,   11,   47,   48,  215,   11,   11,   11,
 /*  1590 */    10,   33,   11,  222,  223,  224,  225,  226,  215,  228,
 /*  1600 */   229,  230,  231,   10,  233,   11,  235,  236,  237,  238,
 /*  1610 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  1620 */   249,  250,  251,   10,  253,  254,   11,    2,    3,    4,
 /*  1630 */     5,   10,   33,   11,   10,   10,   10,  254,   11,   11,
 /*  1640 */   257,  258,  259,  260,  261,   11,  263,  264,  265,  159,
 /*  1650 */   160,  161,  162,  163,  164,  165,  166,   11,   11,   34,
 /*  1660 */    35,   36,   10,  280,   10,  282,   11,  284,  285,  286,
 /*  1670 */    11,   88,   47,   48,  101,  121,  123,   11,    8,  100,
 /*  1680 */   318,  107,  318,  318,  318,  318,  318,  318,  318,  199,
 /*  1690 */   318,  318,  318,  203,  204,  318,   71,   72,   73,   74,
 /*  1700 */   318,  318,  318,  318,  318,  215,  318,  318,  318,  318,
 /*  1710 */   318,  318,  318,  223,  224,  225,  226,  318,  228,  229,
 /*  1720 */   230,  231,  318,  233,  318,  235,  236,  237,  238,  239,
 /*  1730 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  1740 */   250,  251,  318,  253,  254,  318,  318,  318,  318,  124,
 /*  1750 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1760 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1770 */   145,  146,  147,  148,  149,  150,  159,  160,  161,  162,
 /*  1780 */   163,  164,  165,  166,  318,  318,  318,  318,  159,  318,
 /*  1790 */   161,  162,  163,  164,  318,  166,  318,  318,  318,  318,
 /*  1800 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  1810 */   318,  318,  318,  318,  318,  318,  199,  318,  318,  318,
 /*  1820 */   203,  204,  318,  318,  318,  318,  318,  318,  199,  318,
 /*  1830 */   318,  318,  215,  159,  160,  161,  162,  163,  164,  165,
 /*  1840 */   166,  224,  225,  226,  215,  228,  229,  230,  231,  318,
 /*  1850 */   233,  318,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  1860 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  318,
 /*  1870 */   253,  254,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  1880 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  1890 */   159,  160,  161,  162,  163,  164,  165,  166,  318,  225,
 /*  1900 */   226,  318,  228,  229,  230,  231,  318,  233,  318,  235,
 /*  1910 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  1920 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  1930 */   199,  318,  318,  318,  203,  204,  318,  318,  318,  318,
 /*  1940 */   318,  318,  318,  318,  318,  318,  215,  318,  159,  318,
 /*  1950 */   161,  162,  163,  164,  318,  166,  318,  318,  318,  318,
 /*  1960 */   318,  318,  231,  318,  233,  318,  235,  236,  237,  238,
 /*  1970 */   239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
 /*  1980 */   249,  250,  251,  318,  253,  254,  318,  318,  199,  318,
 /*  1990 */   318,  318,  159,  160,  161,  162,  163,  164,  165,  166,
 /*  2000 */   318,  318,  318,  318,  215,  318,  159,  318,  161,  162,
 /*  2010 */   163,  164,  165,  166,  318,  318,  318,  318,  318,  318,
 /*  2020 */   318,  318,  318,  318,  318,  318,  318,  296,  318,  318,
 /*  2030 */   318,  318,  199,  318,  318,  318,  203,  204,  318,  318,
 /*  2040 */   318,  318,  318,  318,  318,  318,  199,  318,  215,  159,
 /*  2050 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  2060 */   318,  318,  215,  318,  318,  318,  318,  318,  318,  236,
 /*  2070 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  2080 */   247,  248,  249,  250,  251,  318,  253,  254,  318,  199,
 /*  2090 */   318,  318,  245,  203,  204,  318,  249,  318,  318,  266,
 /*  2100 */   253,  318,  269,  270,  318,  215,  159,  160,  161,  162,
 /*  2110 */   163,  164,  165,  166,  318,  318,  318,  318,  318,  318,
 /*  2120 */   318,  231,  318,  233,  318,  235,  236,  237,  238,  239,
 /*  2130 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  2140 */   250,  251,  295,  253,  254,  318,  199,  318,  318,  318,
 /*  2150 */   203,  204,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2160 */   318,  318,  215,  318,  318,  318,  159,  318,  161,  162,
 /*  2170 */   163,  164,  318,  166,  318,  318,  318,  318,  318,  318,
 /*  2180 */   318,  318,  318,  236,  237,  238,  239,  240,  241,  242,
 /*  2190 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  318,
 /*  2200 */   253,  254,  318,  318,  318,  318,  199,  318,  159,  160,
 /*  2210 */   161,  162,  163,  164,  165,  166,  269,  270,  318,  212,
 /*  2220 */   318,  318,  215,  318,  318,  318,  318,  318,  318,  318,
 /*  2230 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2240 */   318,  318,  318,  318,  318,  318,  318,  318,  199,  318,
 /*  2250 */   318,  318,  203,  204,  318,  318,  318,  318,  318,  318,
 /*  2260 */   318,  318,  318,  318,  215,  159,  160,  161,  162,  163,
 /*  2270 */   164,  165,  166,  159,  318,  161,  162,  163,  164,  318,
 /*  2280 */   166,  318,  318,  318,  318,  236,  237,  238,  239,  240,
 /*  2290 */   241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
 /*  2300 */   251,  318,  253,  254,  318,  199,  318,  318,  318,  203,
 /*  2310 */   204,  318,  318,  199,  318,  318,  318,  318,  318,  318,
 /*  2320 */   318,  215,  318,  318,  318,  318,  277,  278,  318,  215,
 /*  2330 */   159,  318,  161,  162,  163,  164,  318,  166,  318,  318,
 /*  2340 */   318,  318,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  2350 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  2360 */   254,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  2370 */   199,  318,  318,  318,  318,  318,  159,  318,  161,  162,
 /*  2380 */   163,  164,  318,  166,  318,  318,  215,  318,  318,  318,
 /*  2390 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2400 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  2410 */   318,  318,  318,  318,  318,  318,  199,  215,  318,  305,
 /*  2420 */   318,  318,  316,  318,  159,  160,  161,  162,  163,  164,
 /*  2430 */   165,  166,  215,  318,  318,  233,  318,  318,  236,  237,
 /*  2440 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  2450 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  318,
 /*  2460 */   318,  318,  318,  318,  199,  318,  318,  318,  203,  204,
 /*  2470 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2480 */   215,  159,  160,  161,  162,  163,  164,  165,  166,  159,
 /*  2490 */   318,  161,  162,  163,  164,  318,  166,  318,  318,  318,
 /*  2500 */   318,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  2510 */   245,  246,  247,  248,  249,  250,  251,  318,  253,  254,
 /*  2520 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  199,
 /*  2530 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  2540 */   318,  318,  318,  278,  318,  215,  318,  318,  318,  318,
 /*  2550 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  2560 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  2570 */   248,  249,  250,  251,  318,  253,  254,  159,  160,  161,
 /*  2580 */   162,  163,  164,  165,  166,  159,  318,  161,  162,  163,
 /*  2590 */   164,  318,  166,  318,  318,  159,  160,  161,  162,  163,
 /*  2600 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  2610 */   318,  318,  318,  318,  318,  318,  318,  199,  318,  318,
 /*  2620 */   318,  203,  204,  318,  318,  199,  318,  318,  318,  318,
 /*  2630 */   318,  318,  318,  215,  318,  199,  318,  318,  318,  203,
 /*  2640 */   204,  215,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2650 */   318,  215,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  2660 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  2670 */   318,  253,  254,  237,  238,  239,  240,  241,  242,  243,
 /*  2680 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  2690 */   254,  318,  318,  318,  318,  318,  318,  159,  160,  161,
 /*  2700 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  2710 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2720 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2730 */   318,  318,  318,  318,  318,  318,  318,  199,  318,  318,
 /*  2740 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  2750 */   318,  318,  318,  215,  318,  159,  160,  161,  162,  163,
 /*  2760 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  2770 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  2780 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  2790 */   318,  253,  254,  318,  318,  199,  318,  318,  318,  203,
 /*  2800 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2810 */   318,  215,  318,  318,  318,  159,  160,  161,  162,  163,
 /*  2820 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  2830 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  2840 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  2850 */   254,  318,  318,  318,  318,  199,  318,  318,  318,  203,
 /*  2860 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2870 */   318,  215,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2880 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2890 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  2900 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  2910 */   254,  318,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  2920 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2930 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2940 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2950 */   318,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  2960 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  2970 */   318,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  2980 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  2990 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  3000 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  3010 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  3020 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  3030 */   318,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  3040 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  3050 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  3060 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  318,
 /*  3070 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  3080 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  3090 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3100 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  3110 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  3120 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  159,
 /*  3130 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  3140 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3150 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3160 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  199,
 /*  3170 */   318,  318,  318,  203,  204,  318,  318,  318,  318,  318,
 /*  3180 */   318,  318,  318,  318,  318,  215,  318,  159,  160,  161,
 /*  3190 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  3200 */   318,  318,  318,  318,  318,  318,  318,  237,  238,  239,
 /*  3210 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  3220 */   250,  251,  318,  253,  254,  318,  318,  199,  318,  318,
 /*  3230 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  3240 */   318,  318,  318,  215,  318,  318,  318,  159,  160,  161,
 /*  3250 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  3260 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  3270 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  3280 */   318,  253,  254,  318,  318,  318,  318,  199,  318,  318,
 /*  3290 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  3300 */   318,  318,  318,  215,  318,  318,  318,  318,  318,  318,
 /*  3310 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3320 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  3330 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  3340 */   318,  253,  254,  318,  318,  159,  160,  161,  162,  163,
 /*  3350 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  3360 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3370 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3380 */   318,  318,  318,  318,  318,  199,  318,  318,  318,  203,
 /*  3390 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3400 */   318,  215,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  3410 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3420 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  3430 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  3440 */   254,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  3450 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  3460 */   318,  318,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  3470 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3480 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  3490 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  3500 */   318,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  3510 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  3520 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3530 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3540 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  3550 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  3560 */   318,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  3570 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3580 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3590 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3600 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  3610 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  159,
 /*  3620 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  3630 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  3640 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  3650 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  199,
 /*  3660 */   318,  318,  318,  203,  204,  318,  318,  318,  318,  318,
 /*  3670 */   318,  318,  318,  318,  318,  215,  318,  318,  318,  159,
 /*  3680 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  3690 */   318,  318,  318,  318,  318,  318,  318,  237,  238,  239,
 /*  3700 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  3710 */   250,  251,  318,  253,  254,  318,  318,  318,  318,  199,
 /*  3720 */   318,  318,  318,  203,  204,  318,  318,  318,  318,  318,
 /*  3730 */   318,  318,  318,  318,  318,  215,  318,  318,  318,  318,
 /*  3740 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3750 */   318,  318,  318,  318,  318,  318,  318,  237,  238,  239,
 /*  3760 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  3770 */   250,  251,  318,  253,  254,  318,  318,  159,  160,  161,
 /*  3780 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  3790 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3800 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3810 */   318,  318,  318,  318,  318,  318,  318,  199,  318,  318,
 /*  3820 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  3830 */   318,  318,  318,  215,  318,  159,  160,  161,  162,  163,
 /*  3840 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  3850 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  3860 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  3870 */   318,  253,  254,  318,  318,  199,  318,  318,  318,  203,
 /*  3880 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3890 */   318,  215,  318,  318,  318,  159,  160,  161,  162,  163,
 /*  3900 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  3910 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  3920 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  3930 */   254,  318,  318,  318,  318,  199,  318,  318,  318,  203,
 /*  3940 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3950 */   318,  215,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3960 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  3970 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  3980 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  3990 */   254,  318,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  4000 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4010 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4020 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4030 */   318,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  4040 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  4050 */   318,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  4060 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4070 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  4080 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  4090 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  4100 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  4110 */   318,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  4120 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  4130 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  4140 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  318,
 /*  4150 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  4160 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  4170 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4180 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  4190 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  4200 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  159,
 /*  4210 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  4220 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4230 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4240 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  199,
 /*  4250 */   318,  318,  318,  203,  204,  318,  318,  318,  318,  318,
 /*  4260 */   318,  318,  318,  318,  318,  215,  318,  159,  160,  161,
 /*  4270 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  4280 */   318,  318,  318,  318,  318,  318,  318,  237,  238,  239,
 /*  4290 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4300 */   250,  251,  318,  253,  254,  318,  318,  199,  318,  318,
 /*  4310 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  4320 */   318,  318,  318,  215,  318,  318,  318,  159,  160,  161,
 /*  4330 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  4340 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  4350 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  4360 */   318,  253,  254,  318,  318,  318,  318,  199,  318,  318,
 /*  4370 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  4380 */   318,  318,  318,  215,  318,  318,  318,  318,  318,  318,
 /*  4390 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4400 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  4410 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  4420 */   318,  253,  254,  318,  318,  159,  160,  161,  162,  163,
 /*  4430 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  4440 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4450 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4460 */   318,  318,  318,  318,  318,  199,  318,  318,  318,  203,
 /*  4470 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4480 */   318,  215,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  4490 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4500 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  4510 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  4520 */   254,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  4530 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  4540 */   318,  318,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  4550 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4560 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  4570 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  4580 */   318,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  4590 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  215,
 /*  4600 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4610 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4620 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  4630 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  4640 */   318,  159,  160,  161,  162,  163,  164,  165,  166,  318,
 /*  4650 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4660 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4670 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4680 */   318,  199,  318,  318,  318,  203,  204,  318,  318,  318,
 /*  4690 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  159,
 /*  4700 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  4710 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  237,
 /*  4720 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
 /*  4730 */   248,  249,  250,  251,  318,  253,  254,  318,  318,  199,
 /*  4740 */   318,  318,  318,  203,  204,  318,  318,  318,  318,  318,
 /*  4750 */   318,  318,  318,  318,  318,  215,  318,  318,  318,  159,
 /*  4760 */   160,  161,  162,  163,  164,  165,  166,  318,  318,  318,
 /*  4770 */   318,  318,  318,  318,  318,  318,  318,  237,  238,  239,
 /*  4780 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4790 */   250,  251,  318,  253,  254,  318,  318,  318,  318,  199,
 /*  4800 */   318,  318,  318,  203,  204,  318,  318,  318,  318,  318,
 /*  4810 */   318,  318,  318,  318,  318,  215,  318,  318,  318,  318,
 /*  4820 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4830 */   318,  318,  318,  318,  318,  318,  318,  237,  238,  239,
 /*  4840 */   240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
 /*  4850 */   250,  251,  318,  253,  254,  318,  318,  159,  160,  161,
 /*  4860 */   162,  163,  164,  165,  166,  318,  318,  318,  318,  318,
 /*  4870 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4880 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4890 */   318,  318,  318,  318,  318,  318,  318,  199,  318,  318,
 /*  4900 */   318,  203,  204,  318,  318,  318,  318,  318,  318,  318,
 /*  4910 */   318,  318,  318,  215,  318,  159,  160,  161,  162,  163,
 /*  4920 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  4930 */   318,  318,  318,  318,  318,  237,  238,  239,  240,  241,
 /*  4940 */   242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  4950 */   318,  253,  254,  318,  318,  199,  318,  318,  318,  203,
 /*  4960 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  4970 */   318,  215,  318,  318,  318,  159,  160,  161,  162,  163,
 /*  4980 */   164,  165,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  4990 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  5000 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  5010 */   254,  318,  318,  318,  318,  199,  318,  318,  318,  203,
 /*  5020 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5030 */   318,  215,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5040 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5050 */   318,  318,  318,  237,  238,  239,  240,  241,  242,  243,
 /*  5060 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  5070 */   254,  318,  318,  159,  160,  161,  162,  163,  164,  165,
 /*  5080 */   166,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5090 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5100 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5110 */   318,  318,  318,  199,  318,  318,  318,  203,  204,  318,
 /*  5120 */   318,  318,  318,  318,  318,  318,  318,  318,  156,  215,
 /*  5130 */   318,  159,  318,  161,  162,  163,  164,  165,  166,  318,
 /*  5140 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5150 */   318,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  5160 */   246,  247,  248,  249,  250,  251,  318,  253,  254,  318,
 /*  5170 */   318,  199,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5180 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  217,
 /*  5190 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5200 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5210 */   318,  318,  318,  318,  318,  159,  160,  161,  162,  163,
 /*  5220 */   164,  165,  166,  318,  318,  318,  254,  255,  256,  257,
 /*  5230 */   258,  259,  318,  261,  318,  263,  264,  265,  318,  159,
 /*  5240 */   318,  161,  162,  163,  164,  318,  166,  318,  318,  318,
 /*  5250 */   318,  318,  280,  318,  282,  199,  284,  285,  286,  203,
 /*  5260 */   204,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5270 */   156,  215,  318,  159,  318,  161,  162,  163,  164,  199,
 /*  5280 */   166,  318,  318,  318,  312,  318,  318,  318,  318,  318,
 /*  5290 */   318,  318,  318,  318,  318,  215,  318,  241,  242,  243,
 /*  5300 */   244,  245,  246,  247,  248,  249,  250,  251,  318,  253,
 /*  5310 */   254,  318,  318,  199,  318,  156,  318,  318,  159,  318,
 /*  5320 */   161,  162,  163,  164,  318,  166,  318,  318,  318,  215,
 /*  5330 */   318,  318,  318,  318,  254,  318,  318,  257,  318,  318,
 /*  5340 */   318,  318,  318,  318,  318,  318,  318,  267,  318,  318,
 /*  5350 */   318,  318,  272,  318,  318,  318,  318,  318,  199,  318,
 /*  5360 */   280,  318,  282,  318,  284,  285,  286,  318,  254,  255,
 /*  5370 */   256,  257,  258,  259,  215,  261,  318,  263,  264,  265,
 /*  5380 */   318,  318,  318,  156,  318,  318,  159,  318,  161,  162,
 /*  5390 */   163,  164,  318,  166,  280,  318,  282,  318,  284,  285,
 /*  5400 */   286,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5410 */   318,  318,  318,  254,  255,  256,  257,  258,  259,  318,
 /*  5420 */   261,  318,  263,  264,  265,  311,  199,  318,  156,  318,
 /*  5430 */   318,  159,  318,  161,  162,  163,  164,  318,  166,  280,
 /*  5440 */   318,  282,  215,  284,  285,  286,  318,  318,  318,  318,
 /*  5450 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5460 */   318,  318,  156,  318,  318,  159,  318,  161,  162,  163,
 /*  5470 */   164,  199,  166,  318,  318,  318,  318,  318,  318,  318,
 /*  5480 */   318,  254,  255,  256,  257,  258,  259,  215,  261,  318,
 /*  5490 */   263,  264,  265,  318,  318,  318,  318,  318,  318,  318,
 /*  5500 */   318,  318,  318,  318,  318,  199,  318,  280,  318,  282,
 /*  5510 */   318,  284,  285,  286,  318,  318,  318,  318,  318,  318,
 /*  5520 */   318,  215,  318,  318,  318,  318,  254,  255,  256,  257,
 /*  5530 */   258,  259,  318,  261,  318,  263,  264,  265,  318,  318,
 /*  5540 */   156,  318,  318,  159,  318,  161,  162,  163,  164,  318,
 /*  5550 */   166,  318,  280,  318,  282,  318,  284,  285,  286,  318,
 /*  5560 */   254,  255,  256,  257,  258,  259,  318,  261,  318,  263,
 /*  5570 */   264,  265,  318,  318,  156,  318,  318,  159,  318,  161,
 /*  5580 */   162,  163,  164,  199,  166,  318,  280,  318,  282,  318,
 /*  5590 */   284,  285,  286,  318,  318,  318,  318,  318,  318,  215,
 /*  5600 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5610 */   318,  318,  318,  318,  318,  318,  318,  199,  318,  318,
 /*  5620 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5630 */   318,  318,  318,  215,  318,  318,  318,  318,  254,  318,
 /*  5640 */   318,  257,  258,  259,  260,  261,  318,  263,  264,  265,
 /*  5650 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5660 */   318,  318,  318,  318,  280,  318,  282,  318,  284,  285,
 /*  5670 */   286,  318,  254,  318,  318,  257,  318,  318,  260,  261,
 /*  5680 */   262,  263,  264,  265,  156,  318,  318,  159,  318,  161,
 /*  5690 */   162,  163,  164,  318,  166,  318,  318,  318,  280,  318,
 /*  5700 */   282,  318,  284,  285,  286,  318,  318,  318,  318,  318,
 /*  5710 */   318,  318,  318,  318,  318,  318,  318,  318,  156,  318,
 /*  5720 */   318,  159,  318,  161,  162,  163,  164,  199,  166,  318,
 /*  5730 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5740 */   318,  318,  318,  215,  318,  318,  318,  318,  318,  318,
 /*  5750 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5760 */   318,  199,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5770 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  5780 */   318,  318,  254,  318,  318,  257,  318,  318,  260,  261,
 /*  5790 */   262,  263,  264,  265,  318,  156,  318,  318,  159,  318,
 /*  5800 */   161,  162,  163,  164,  318,  166,  318,  318,  280,  318,
 /*  5810 */   282,  318,  284,  285,  286,  318,  254,  318,  318,  257,
 /*  5820 */   258,  259,  318,  261,  318,  263,  264,  265,  318,  156,
 /*  5830 */   318,  318,  159,  318,  161,  162,  163,  164,  199,  166,
 /*  5840 */   318,  318,  280,  318,  282,  318,  284,  285,  286,  318,
 /*  5850 */   318,  318,  318,  318,  215,  318,  318,  318,  318,  318,
 /*  5860 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5870 */   318,  318,  199,  318,  318,  318,  318,  318,  318,  318,
 /*  5880 */   318,  318,  318,  318,  318,  318,  318,  318,  215,  318,
 /*  5890 */   318,  318,  318,  254,  318,  318,  257,  258,  259,  318,
 /*  5900 */   261,  318,  263,  264,  265,  318,  318,  318,  318,  318,
 /*  5910 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  280,
 /*  5920 */   318,  282,  318,  284,  285,  286,  318,  254,  318,  318,
 /*  5930 */   257,  258,  259,  318,  261,  318,  263,  264,  265,  156,
 /*  5940 */   318,  318,  159,  318,  161,  162,  163,  164,  318,  166,
 /*  5950 */   318,  318,  318,  280,  318,  282,  318,  284,  285,  286,
 /*  5960 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  5970 */   318,  318,  318,  156,  318,  318,  159,  318,  161,  162,
 /*  5980 */   163,  164,  199,  166,  318,  318,  156,  318,  318,  159,
 /*  5990 */   318,  161,  162,  163,  164,  318,  166,  318,  215,  318,
 /*  6000 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6010 */   318,  318,  318,  318,  318,  318,  199,  318,  318,  318,
 /*  6020 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  199,
 /*  6030 */   318,  318,  215,  318,  318,  318,  318,  254,  318,  318,
 /*  6040 */   257,  258,  259,  318,  261,  215,  263,  264,  265,  318,
 /*  6050 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6060 */   318,  318,  318,  280,  318,  282,  318,  284,  285,  286,
 /*  6070 */   318,  254,  318,  318,  257,  318,  318,  318,  261,  262,
 /*  6080 */   263,  264,  265,  318,  254,  318,  318,  257,  318,  318,
 /*  6090 */   318,  261,  262,  263,  264,  265,  318,  280,  318,  282,
 /*  6100 */   318,  284,  285,  286,  159,  318,  161,  162,  163,  164,
 /*  6110 */   280,  166,  282,  318,  284,  285,  286,  159,  318,  161,
 /*  6120 */   162,  163,  164,  318,  166,  318,  318,  318,  318,  318,
 /*  6130 */   318,  318,  318,  318,  318,  318,  318,  318,  159,  318,
 /*  6140 */   161,  162,  163,  164,  199,  166,  318,  318,  318,  318,
 /*  6150 */   318,  159,  318,  161,  162,  163,  164,  199,  166,  318,
 /*  6160 */   215,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6170 */   318,  318,  318,  215,  318,  318,  318,  318,  199,  318,
 /*  6180 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6190 */   318,  199,  318,  318,  215,  318,  318,  318,  318,  254,
 /*  6200 */   318,  318,  257,  318,  318,  318,  318,  215,  318,  318,
 /*  6210 */   318,  318,  254,  318,  318,  257,  318,  318,  318,  318,
 /*  6220 */   318,  318,  318,  318,  318,  280,  318,  282,  318,  284,
 /*  6230 */   285,  286,  318,  254,  318,  318,  257,  318,  280,  318,
 /*  6240 */   282,  318,  284,  285,  286,  318,  254,  318,  318,  257,
 /*  6250 */   318,  159,  318,  161,  162,  163,  164,  165,  166,  280,
 /*  6260 */   318,  282,  318,  284,  285,  286,  318,  318,  318,  318,
 /*  6270 */   318,  318,  280,  318,  282,  318,  284,  285,  286,  318,
 /*  6280 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6290 */   318,  199,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6300 */   318,  318,  318,  318,  318,  318,  318,  215,  318,  318,
 /*  6310 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6320 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6330 */   318,  318,  318,  318,  318,  318,  318,  245,  318,  318,
 /*  6340 */   318,  249,  318,  318,  318,  253,  318,  318,  318,  318,
 /*  6350 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6360 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6370 */   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
 /*  6380 */   318,  318,  318,  318,  318,  318,  294,  295,
);
  const YY_SHIFT_USE_DFLT = -71;
  const YY_SHIFT_MAX = 408;
static $yy_shift_ofst = array(
 /*     0 */   833,  331,  331,  480,  528,  528,  528,  528,  528,  528,
 /*    10 */   528,  528,  725,  874,  922,  874, 1625, 1625,  677, 1625,
 /*    20 */  1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
 /*    30 */  1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
 /*    40 */  1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
 /*    50 */  1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,  262,
 /*    60 */   335,  335,  335, 1478,  262,  262,  262,  262,  760,  411,
 /*    70 */  1079, 1156, 1156, 1375, 1156,  262,  262,  262,  262,  262,
 /*    80 */   262,  835,  524,  524,  524,  524,  418,  833,  418,    4,
 /*    90 */   418,  418,  418,  418,  445,  418,  418,  418,  418,  418,
 /*   100 */   445,   10,  382,   10,   10,   10,   10,   10,   10,   94,
 /*   110 */   125,  125,  693,  478,  322,   26,  214,   10,   10,   10,
 /*   120 */    10,   10,  -33,   66,  608,  323,  365,  385,  137,  137,
 /*   130 */   429,  429,  -70,  550, 1137, 1228,  641,  637,  705,  869,
 /*   140 */   871,  229,  881,  893,  895,  920,  926, 1129, 1140, 1212,
 /*   150 */   247, 1238, 1240, 1308, 1311, 1313,  296, 1315,  842, 1317,
 /*   160 */  1340, 1343, 1412, 1425, 1438, 1476,  924, 1514, 1516, 1518,
 /*   170 */  1537,  291,  597,  571,  571,  588,  -41,  462,  -41,  618,
 /*   180 */   618,  456,  508,  555,  487,  704,   65,  570,  601,  613,
 /*   190 */   635,  656,  710,  797,  793,  793,  878,  879,  929, 1028,
 /*   200 */  1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
 /*   210 */  1023, 1023, 1074, 1106, 1074, 1106, 1074, 1106, 1074, 1142,
 /*   220 */  1142, 1187, 1189, 1189, 1187, 1118, 1153, 1075,  757,  965,
 /*   230 */   143,   45,  662,  662,  733,  947,  511,  351,  789,   98,
 /*   240 */   877,  658,  651,  676,  851,  894,  639, 1073, 1081, 1082,
 /*   250 */  1150, 1155,  909,  948,  986,  235, 1021, 1162,  885,  885,
 /*   260 */  1213, 1214, 1215, 1251, 1193, 1253, 1262, 1194, 1264, 1271,
 /*   270 */  1268, 1270, 1272, 1188, 1202, 1194, 1274, 1284, 1289, 1291,
 /*   280 */  1319, 1330, 1331, 1333, 1338, 1342, 1347, 1356, 1357, 1358,
 /*   290 */  1359, 1361, 1362, 1363, 1366, 1312, 1368, 1369, 1373, 1374,
 /*   300 */  1379, 1395, 1424, 1428, 1429, 1435, 1440, 1235, 1260, 1282,
 /*   310 */  1260, 1285, 1278, 1327, 1326, 1393, 1271, 1441, 1360, 1350,
 /*   320 */  1444, 1271, 1445, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
 /*   330 */  1446, 1418, 1458, 1459, 1461, 1389, 1472, 1326, 1394, 1475,
 /*   340 */  1326, 1398, 1474, 1381, 1388, 1480, 1468, 1467, 1477, 1483,
 /*   350 */  1528, 1529, 1271, 1540, 1544, 1545, 1541, 1546, 1543, 1547,
 /*   360 */  1550, 1557, 1559, 1560, 1561, 1563, 1565, 1566, 1570, 1572,
 /*   370 */  1576, 1571, 1577, 1578, 1580, 1581, 1593, 1594, 1613, 1615,
 /*   380 */  1621, 1622, 1624, 1627, 1531, 1628, 1527, 1536, 1634, 1558,
 /*   390 */  1626, 1646, 1647, 1599, 1652, 1654, 1655, 1659, 1573, 1554,
 /*   400 */  1583, 1326, 1553, 1271, 1666, 1579, 1670, 1574, 1326,
);
  const YY_REDUCE_USE_DFLT = -190;
  const YY_REDUCE_MAX = 226;
static $yy_reduce_ofst = array(
 /*     0 */   -21, -156,  -46,   67,  875,  971, 1067, 1171, 1267, 1371,
 /*    10 */  1490, 1617, 1674, 1731, 1833, 1890, 1947, 2049, 2106, 2202,
 /*    20 */  2265,  539, 2322, 2418, 2436, 2538, 2596, 2656, 2754, 2812,
 /*    30 */  2872, 2970, 3028, 3088, 3186, 3244, 3304, 3402, 3460, 3520,
 /*    40 */  3618, 3676, 3736, 3834, 3892, 3952, 4050, 4108, 4168, 4266,
 /*    50 */  4324, 4384, 4482, 4540, 4600, 4698, 4756, 4816, 4914, 4972,
 /*    60 */   195,  342, 5056, 5114, 5159, 5227, 5272, 5306,  736,  983,
 /*    70 */  1183, 1383, 5384, 5418, 5528, 5562, 5639, 5673, 5783, 5817,
 /*    80 */  5830, 5080, 5945, 5958, 5979, 5992, 6092,  -10, 1847, -127,
 /*    90 */  2007, 2114, 1629, 1789,   -4,   85, 2171, 2217, 2330, 2426,
 /*   100 */    91,   78,  292,  205,  473,  476,  866,    8,  225,  680,
 /*   110 */   680,  683,  -14,  405,  338,  -54,  110,   99,  110,  556,
 /*   120 */   577,  722, -159, -108,  -26,   39, -129, -177,  159, -189,
 /*   130 */  -135, -135,  -76,  -30,  -30,  -30,  -13,  -30,  -30,  -30,
 /*   140 */   -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
 /*   150 */   -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
 /*   160 */   -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
 /*   170 */   -30,   25, -135,  -35,  191,   16,  167,  -30,  199, -135,
 /*   180 */  -135,  210,  128,  340,  337,  348,  233,  427,  421,  453,
 /*   190 */   463,  516,  553,  719,  605,  616,  731,  755,  734,  867,
 /*   200 */   862,  890,  902,  904,  905,  912,  913,  919,  944,  955,
 /*   210 */   958,  967,  921,  969,  978,  970,  985,  982,  992,  995,
 /*   220 */  1001,  993, 1006, 1008, 1037,  941,  942,
);
static $yy_default = array(
 /*     0 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    10 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    20 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    30 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    40 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    50 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    60 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    70 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*    80 */  1117, 1117, 1117, 1117, 1117, 1117, 1117,  719, 1117, 1117,
 /*    90 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   100 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,  974,
 /*   110 */   974, 1117,  955, 1000, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   120 */  1117, 1117,  738,  864, 1117,  992,  843, 1039, 1117, 1117,
 /*   130 */   972,  973, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   140 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   150 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   160 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   170 */  1117, 1117,  990, 1117, 1117, 1054,  923,  894,  923,  990,
 /*   180 */   988,  969, 1117, 1117,  801,  801, 1082,  718,  960, 1006,
 /*   190 */  1008, 1013,  964,  828, 1043, 1045,  860,  865,  867, 1117,
 /*   200 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   210 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,  801,
 /*   220 */   801, 1117, 1117, 1117, 1117, 1058, 1067,  977,  977,  977,
 /*   230 */   977, 1117,  898,  895, 1117,  926, 1117, 1117,  890,  961,
 /*   240 */  1117, 1040, 1117, 1117, 1117, 1117,  750, 1117,  760,  762,
 /*   250 */   764,  773, 1117, 1117, 1117,  821, 1117,  731, 1070, 1071,
 /*   260 */   730, 1117, 1117, 1117, 1117, 1117, 1117,  931,  978,  982,
 /*   270 */  1117,  979, 1117, 1117,  930, 1117, 1117, 1117, 1117, 1117,
 /*   280 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   290 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   300 */  1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,  876,  882,
 /*   310 */   877,  906, 1117,  928, 1003, 1117, 1005, 1117,  994, 1020,
 /*   320 */  1117, 1022, 1117,  932,  934,  933,  935,  936,  938,  937,
 /*   330 */  1117, 1117, 1117, 1117, 1117, 1117,  965, 1014, 1117, 1009,
 /*   340 */  1007, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   350 */   854, 1117,  857, 1117,  742, 1117, 1117,  753, 1117,  751,
 /*   360 */   755, 1117,  757, 1117, 1117,  766, 1117, 1117,  768, 1117,
 /*   370 */  1117,  770, 1117, 1117,  775, 1117,  779, 1117,  782, 1117,
 /*   380 */   785, 1117,  792, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
 /*   390 */   818, 1117, 1117,  822,  823, 1117, 1117, 1117, 1117, 1117,
 /*   400 */  1117, 1068, 1117, 1073, 1117, 1117, 1117, 1117, 1083,  715,
 /*   410 */   716,  720,  721,  722,  924,  925,  723,  724,  725,  726,
 /*   420 */   727,  728,  729,  826,  731,  827,  840,  841,  856,  900,
 /*   430 */   902,  903,  904,  905,  906,  907,  908,  909,  910,  911,
 /*   440 */   912,  913,  730,  914,  915,  916,  901,  918,  919,  920,
 /*   450 */   921,  926,  927,  940,  941,  943,  944,  946,  947,  948,
 /*   460 */   922,  975,  858,  859,  980,  981,  976,  983,  984,  985,
 /*   470 */   986,  928,  987,  939,  890,  891,  893,  896,  897,  899,
 /*   480 */  1026, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
 /*   490 */  1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
 /*   500 */  1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
 /*   510 */  1113, 1114, 1115, 1116, 1017, 1025,  892, 1015, 1016, 1027,
 /*   520 */   977,  989,  991, 1001, 1002,  879,  880,  881,  883,  884,
 /*   530 */  1028, 1029, 1030,  885,  878,  887,  888,  889, 1031, 1032,
 /*   540 */  1033, 1034, 1035, 1036, 1037, 1038,  886,  945, 1004,  993,
 /*   550 */   995,  996,  997,  998,  999, 1023, 1021,  942, 1018,  917,
 /*   560 */   954,  949,  962,  963,  952,  953,  956,  957,  958,  959,
 /*   570 */   967,  968,  970,  971,  966, 1011, 1012, 1010,  950,  951,
 /*   580 */  1049, 1050, 1051,  732,  733,  734,  735,  736,  740,  842,
 /*   590 */  1041, 1042, 1044, 1047, 1048, 1046,  846,  847,  848,  849,
 /*   600 */   850,  851,  852,  853,  866,  870,  871,  872,  873,  874,
 /*   610 */   868,  869,  861,  862,  863,  855,  875,  844,  845,  739,
 /*   620 */   829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
 /*   630 */   839,  741,  743,  744,  745,  746,  747,  748,  749,  752,
 /*   640 */   759,  754,  756,  758,  761,  767,  763,  769,  765,  771,
 /*   650 */   772,  774,  776,  777,  778,  780,  781,  791,  790,  783,
 /*   660 */   784,  786,  787,  788,  789,  793,  794,  795,  796,  797,
 /*   670 */   798,  802,  803,  804,  799,  800,  805,  806,  807,  811,
 /*   680 */   812,  813,  814,  815,  817,  819,  820,  808,  816,  824,
 /*   690 */   825, 1052, 1053, 1055, 1056, 1057, 1061, 1060, 1059, 1062,
 /*   700 */  1063, 1064, 1065, 1066, 1069, 1072, 1074, 1076, 1078, 1079,
 /*   710 */  1080, 1077, 1081, 1075,  717,
);

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
static $yyFallback = array(
);

/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
function ParseTrace(/* stream */ $TraceFILE, /* string */ $zTracePrompt){
  $this->yyTraceFILE = $TraceFILE;
  $this->yyTracePrompt = $zTracePrompt;
  if( $this->yyTraceFILE===null ) $this->yyTracePrompt = null;
  else if( $this->yyTracePrompt===null ) $this->yyTraceFILE = null;
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static $yyTokenName = array( 
  '$',             'SEMI',          'NAME',          'INTNUM',      
  'APPROXNUM',     'DEADTOKEN',     'COMMA',         'CHARACTER',   
  'SET',           'CHAR',          'LPAR',          'RPAR',        
  'VARYING',       'VARCHAR',       'NATIONAL',      'NCHAR',       
  'BLOB',          'BIT',           'NUMERIC',       'DECIMAL',     
  'DEC',           'INTEGER',       'SMALLINT',      'FLOAT',       
  'REAL',          'DOUBLE',        'PRECISION',     'DATE',        
  'TIME',          'TIMESTAMP',     'WITH',          'ZONE',        
  'INTERVAL',      'TO',            'YEAR',          'MONTH',       
  'DAY',           'HOUR',          'MINUTE',        'SECOND',      
  'PERIOD',        'DEFAULT',       'USER',          'CURRENT_USER',
  'SESSION_USER',  'SYSTEM_USER',   'NULL',          'PLUS_SIGN',   
  'MINUS_SIGN',    'CONSTRAINT',    'NOT',           'UNIQUE',      
  'AUTO_INCREMENT',  'PRIMARY',       'KEY',           'REFERENCES',  
  'MATCH',         'FULL',          'PARTIAL',       'ON',          
  'UPDATE',        'DELETE',        'CASCADE',       'NO',          
  'ACTION',        'CHECK',         'OR',            'AND',         
  'IS',            'ASTERISK',      'SOLIDUS',       'STRING',      
  'COUNT',         'MAX',           'MIN',           'DISTINCT',    
  'ALL',           'UNION',         'EXCEPT',        'INTERSECT',   
  'SELECT',        'AS',            'LIMIT',         'OFFSET',      
  'ORDER',         'BY',            'ASC',           'DESC',        
  'FROM',          'CROSS',         'JOIN',          'NATURAL',     
  'INNER',         'OUTER',         'LEFT',          'RIGHT',       
  'USING',         'WHERE',         'GROUP',         'HAVING',      
  'VALUES',        'TABLE',         'CORRESPONDING',  'NULLX',       
  'TRUE',          'FALSE',         'UNKNOWN',       'OP_EQ',       
  'OP_GTLT',       'OP_LT',         'OP_GT',         'OP_LTEQ',     
  'OP_GTEQ',       'DEFERRABLE',    'INITIALLY',     'DEFERRED',    
  'IMMEDIATE',     'CREATE',        'RESTRICT',      'DROP',        
  'IF',            'EXISTS',        'INSERT',        'INTO',        
  'ABS',           'ACOS',          'ASIN',          'ATAN',        
  'ATAN2',         'CEIL',          'COS',           'COT',         
  'CRC32',         'DEGREES',       'EXP',           'FLOOR',       
  'FORMAT',        'LN',            'LOG',           'LOG2',        
  'LOG10',         'MOD',           'PI',            'POW',         
  'RADIANS',       'ROUND',         'SIGN',          'SIN',         
  'SQRT',          'TAN',           'TRUNCATE',      'error',       
  'statement',     'query_list',    'query',         'optional_semi',
  'query_specification',  'sql_data_statement',  'sql_schema_statement',  'regular_identifier',
  'unsigned_numeric_literal',  'schema_name',   'unqualified_schema_name',  'identifier',  
  'actual_identifier',  'column_name',   'qualified_identifier',  'table_element_list',
  'table_element',  'column_definition',  'table_constraint_definition',  'data_type',   
  'default_clause',  'column_constraints',  'column_constraint_definition',  'character_set_specification',
  'character_string_type',  'national_character_string_type',  'binary_large_object_type',  'bit_string_type',
  'numeric_type',  'datetime_type',  'interval_type',  'length',      
  'exact_numeric_type',  'approximate_numeric_type',  'precision',     'scale',       
  'with_time_zone',  'time_precision',  'timestamp_precision',  'time_fractional_seconds_precision',
  'interval_qualifier',  'start_field',   'end_field',     'single_datetime_field',
  'non_second_datetime_field',  'interval_leading_field_precision',  'interval_fractional_seconds_precision',  'qualified_name',
  'default_option',  'literal',       'signed_numeric_literal',  'general_literal',
  'sign',          'constraint_name_definition',  'column_constraint',  'constraint_attributes',
  'constraint_name',  'unique_specification',  'references_specification',  'check_constraint_definition',
  'referenced_table_and_columns',  'reference_match_type',  'referential_triggered_action',  'table_name',  
  'reference_column_list',  'column_name_list',  'match_type',    'update_rule', 
  'delete_rule',   'referential_action',  'search_condition',  'boolean_term',
  'boolean_factor',  'boolean_test',  'boolean_primary',  'truth_value', 
  'predicate',     'comparison_predicate',  'null_predicate',  'row_value_constructor',
  'comp_op',       'row_value_constructor_element',  'row_value_constructor_list',  'row_subquery',
  'value_expression',  'numeric_value_expression',  'term',          'math_numeric_value_expression',
  'date_value_expression',  'factor',        'numeric_primary',  'value_expression_primary',
  'unsigned_value_specification',  'column_reference',  'scalar_subquery',  'set_function_specification',
  'unsigned_literal',  'qualifier',     'general_set_function',  'set_function_type',
  'set_quantifier',  'correlation_name',  'subquery',      'query_expression',
  'non_join_query_expression',  'joined_table',  'non_join_query_term',  'query_term',  
  'corresponding_spec',  'non_join_query_primary',  'query_primary',  'simple_table',
  'table_value_constructor',  'explicit_table',  'select_list',   'table_expression',
  'limit_clause',  'select_sublist',  'derived_column',  'as_clause',   
  'from_clause',   'where_clause',  'group_by_clause',  'having_clause',
  'orderby_clause',  'orderby_expression_list',  'orderby_expression',  'ordering',    
  'table_reference',  'correlation_specification',  'derived_table',  'derived_column_list',
  'table_subquery',  'cross_join',    'qualified_join',  'natural_join',
  'join_type',     'join_specification',  'outer_join_type',  'join_condition',
  'named_columns_join',  'join_column_list',  'grouping_column_reference_list',  'grouping_column_reference',
  'table_value_constructor_list',  'corresponding_column_list',  'constraint_check_time',  'sql_schema_definition_statement',
  'sql_schema_manipulation_statement',  'table_definition',  'drop_table_statement',  'drop_behaviour',
  'drop_if_exists',  'tables_list',   'sql_data_change_statement',  'delete_statement_searched',
  'insert_statement',  'update_statement_searched',  'delete_statement_where_search',  'insert_columns_and_source',
  'insert_column_list',  'set_clause_list',  'set_clause',    'object_column',
  'update_source',  'update_statement_where_search',
);

/* For tracing reduce actions, the names of all rules are required.
*/
static $yyRuleName = array(
 /*   0 */ "statement ::= query_list",
 /*   1 */ "query_list ::= query SEMI query_list",
 /*   2 */ "query_list ::= query optional_semi",
 /*   3 */ "optional_semi ::=",
 /*   4 */ "optional_semi ::= SEMI",
 /*   5 */ "query ::= query_specification",
 /*   6 */ "query ::= sql_data_statement",
 /*   7 */ "query ::= sql_schema_statement",
 /*   8 */ "regular_identifier ::= NAME",
 /*   9 */ "unsigned_numeric_literal ::= INTNUM",
 /*  10 */ "unsigned_numeric_literal ::= APPROXNUM",
 /*  11 */ "schema_name ::= unqualified_schema_name",
 /*  12 */ "identifier ::= actual_identifier",
 /*  13 */ "actual_identifier ::= regular_identifier",
 /*  14 */ "unqualified_schema_name ::= DEADTOKEN",
 /*  15 */ "column_name ::= identifier",
 /*  16 */ "qualified_identifier ::= identifier",
 /*  17 */ "table_element_list ::= table_element",
 /*  18 */ "table_element_list ::= table_element_list COMMA table_element",
 /*  19 */ "table_element ::= column_definition",
 /*  20 */ "table_element ::= table_constraint_definition",
 /*  21 */ "table_constraint_definition ::= DEADTOKEN",
 /*  22 */ "column_definition ::= column_name data_type default_clause column_constraints",
 /*  23 */ "column_constraints ::=",
 /*  24 */ "column_constraints ::= column_constraint_definition",
 /*  25 */ "column_constraints ::= column_constraints column_constraint_definition",
 /*  26 */ "character_set_specification ::= DEADTOKEN",
 /*  27 */ "data_type ::= character_string_type",
 /*  28 */ "data_type ::= character_string_type CHARACTER SET character_set_specification",
 /*  29 */ "data_type ::= national_character_string_type",
 /*  30 */ "data_type ::= binary_large_object_type",
 /*  31 */ "data_type ::= bit_string_type",
 /*  32 */ "data_type ::= numeric_type",
 /*  33 */ "data_type ::= datetime_type",
 /*  34 */ "data_type ::= interval_type",
 /*  35 */ "character_string_type ::= CHARACTER",
 /*  36 */ "character_string_type ::= CHAR",
 /*  37 */ "character_string_type ::= CHARACTER LPAR length RPAR",
 /*  38 */ "character_string_type ::= CHARACTER VARYING",
 /*  39 */ "character_string_type ::= CHARACTER VARYING LPAR length RPAR",
 /*  40 */ "character_string_type ::= CHAR VARYING",
 /*  41 */ "character_string_type ::= CHAR VARYING LPAR length RPAR",
 /*  42 */ "character_string_type ::= VARCHAR",
 /*  43 */ "character_string_type ::= VARCHAR LPAR length RPAR",
 /*  44 */ "length ::= INTNUM",
 /*  45 */ "national_character_string_type ::= NATIONAL CHARACTER",
 /*  46 */ "national_character_string_type ::= NATIONAL CHARACTER LPAR length RPAR",
 /*  47 */ "national_character_string_type ::= NATIONAL CHAR",
 /*  48 */ "national_character_string_type ::= NATIONAL CHAR LPAR length RPAR",
 /*  49 */ "national_character_string_type ::= NCHAR",
 /*  50 */ "national_character_string_type ::= NCHAR LPAR length RPAR",
 /*  51 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING",
 /*  52 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING LPAR length RPAR",
 /*  53 */ "national_character_string_type ::= NATIONAL CHAR VARYING",
 /*  54 */ "national_character_string_type ::= NATIONAL CHAR VARYING LPAR length RPAR",
 /*  55 */ "national_character_string_type ::= NCHAR VARYING",
 /*  56 */ "national_character_string_type ::= NCHAR VARYING LPAR length RPAR",
 /*  57 */ "binary_large_object_type ::= BLOB",
 /*  58 */ "bit_string_type ::= BIT",
 /*  59 */ "bit_string_type ::= BIT LPAR length RPAR",
 /*  60 */ "bit_string_type ::= BIT VARYING",
 /*  61 */ "bit_string_type ::= BIT VARYING LPAR length RPAR",
 /*  62 */ "numeric_type ::= exact_numeric_type",
 /*  63 */ "numeric_type ::= approximate_numeric_type",
 /*  64 */ "exact_numeric_type ::= NUMERIC",
 /*  65 */ "exact_numeric_type ::= NUMERIC LPAR precision RPAR",
 /*  66 */ "exact_numeric_type ::= NUMERIC LPAR precision COMMA scale RPAR",
 /*  67 */ "exact_numeric_type ::= DECIMAL",
 /*  68 */ "exact_numeric_type ::= DECIMAL LPAR precision RPAR",
 /*  69 */ "exact_numeric_type ::= DECIMAL LPAR precision COMMA scale RPAR",
 /*  70 */ "exact_numeric_type ::= DEC",
 /*  71 */ "exact_numeric_type ::= DEC LPAR precision RPAR",
 /*  72 */ "exact_numeric_type ::= DEC LPAR precision COMMA scale RPAR",
 /*  73 */ "exact_numeric_type ::= INTEGER",
 /*  74 */ "exact_numeric_type ::= SMALLINT",
 /*  75 */ "precision ::= INTNUM",
 /*  76 */ "scale ::= INTNUM",
 /*  77 */ "approximate_numeric_type ::= FLOAT",
 /*  78 */ "approximate_numeric_type ::= FLOAT LPAR precision RPAR",
 /*  79 */ "approximate_numeric_type ::= REAL",
 /*  80 */ "approximate_numeric_type ::= DOUBLE PRECISION",
 /*  81 */ "datetime_type ::= DATE",
 /*  82 */ "datetime_type ::= TIME with_time_zone",
 /*  83 */ "datetime_type ::= TIME LPAR time_precision RPAR with_time_zone",
 /*  84 */ "datetime_type ::= TIMESTAMP with_time_zone",
 /*  85 */ "datetime_type ::= TIMESTAMP LPAR timestamp_precision RPAR with_time_zone",
 /*  86 */ "with_time_zone ::=",
 /*  87 */ "with_time_zone ::= WITH TIME ZONE",
 /*  88 */ "time_precision ::= time_fractional_seconds_precision",
 /*  89 */ "time_fractional_seconds_precision ::= INTNUM",
 /*  90 */ "timestamp_precision ::= time_fractional_seconds_precision",
 /*  91 */ "interval_type ::= INTERVAL interval_qualifier",
 /*  92 */ "interval_qualifier ::= start_field TO end_field",
 /*  93 */ "interval_qualifier ::= single_datetime_field",
 /*  94 */ "start_field ::= non_second_datetime_field",
 /*  95 */ "start_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /*  96 */ "non_second_datetime_field ::= YEAR",
 /*  97 */ "non_second_datetime_field ::= MONTH",
 /*  98 */ "non_second_datetime_field ::= DAY",
 /*  99 */ "non_second_datetime_field ::= HOUR",
 /* 100 */ "non_second_datetime_field ::= MINUTE",
 /* 101 */ "interval_leading_field_precision ::= INTNUM",
 /* 102 */ "end_field ::= non_second_datetime_field",
 /* 103 */ "end_field ::= SECOND",
 /* 104 */ "end_field ::= SECOND LPAR interval_fractional_seconds_precision RPAR",
 /* 105 */ "interval_fractional_seconds_precision ::= INTNUM",
 /* 106 */ "single_datetime_field ::= non_second_datetime_field",
 /* 107 */ "single_datetime_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /* 108 */ "single_datetime_field ::= SECOND",
 /* 109 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision RPAR",
 /* 110 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision COMMA LPAR interval_fractional_seconds_precision RPAR RPAR",
 /* 111 */ "qualified_name ::= qualified_identifier",
 /* 112 */ "qualified_name ::= schema_name PERIOD qualified_identifier",
 /* 113 */ "default_clause ::=",
 /* 114 */ "default_clause ::= DEFAULT default_option",
 /* 115 */ "default_option ::= literal",
 /* 116 */ "default_option ::= USER",
 /* 117 */ "default_option ::= CURRENT_USER",
 /* 118 */ "default_option ::= SESSION_USER",
 /* 119 */ "default_option ::= SYSTEM_USER",
 /* 120 */ "default_option ::= NULL",
 /* 121 */ "literal ::= signed_numeric_literal",
 /* 122 */ "literal ::= general_literal",
 /* 123 */ "signed_numeric_literal ::= unsigned_numeric_literal",
 /* 124 */ "signed_numeric_literal ::= sign unsigned_numeric_literal",
 /* 125 */ "sign ::= PLUS_SIGN",
 /* 126 */ "sign ::= MINUS_SIGN",
 /* 127 */ "column_constraint_definition ::= constraint_name_definition column_constraint constraint_attributes",
 /* 128 */ "constraint_name_definition ::=",
 /* 129 */ "constraint_name_definition ::= CONSTRAINT constraint_name",
 /* 130 */ "constraint_name ::= qualified_name",
 /* 131 */ "column_constraint ::= NOT NULL",
 /* 132 */ "column_constraint ::= unique_specification",
 /* 133 */ "column_constraint ::= references_specification",
 /* 134 */ "column_constraint ::= check_constraint_definition",
 /* 135 */ "unique_specification ::= UNIQUE",
 /* 136 */ "unique_specification ::= AUTO_INCREMENT",
 /* 137 */ "unique_specification ::= PRIMARY KEY",
 /* 138 */ "references_specification ::= REFERENCES referenced_table_and_columns reference_match_type referential_triggered_action",
 /* 139 */ "referenced_table_and_columns ::= table_name",
 /* 140 */ "referenced_table_and_columns ::= table_name LPAR reference_column_list RPAR",
 /* 141 */ "table_name ::= qualified_name",
 /* 142 */ "reference_column_list ::= column_name_list",
 /* 143 */ "column_name_list ::= column_name",
 /* 144 */ "column_name_list ::= column_name_list COMMA column_name",
 /* 145 */ "reference_match_type ::=",
 /* 146 */ "reference_match_type ::= MATCH match_type",
 /* 147 */ "match_type ::= FULL",
 /* 148 */ "match_type ::= PARTIAL",
 /* 149 */ "referential_triggered_action ::=",
 /* 150 */ "referential_triggered_action ::= update_rule",
 /* 151 */ "referential_triggered_action ::= update_rule delete_rule",
 /* 152 */ "referential_triggered_action ::= delete_rule",
 /* 153 */ "referential_triggered_action ::= delete_rule update_rule",
 /* 154 */ "update_rule ::= ON UPDATE referential_action",
 /* 155 */ "delete_rule ::= ON DELETE referential_action",
 /* 156 */ "referential_action ::= CASCADE",
 /* 157 */ "referential_action ::= SET NULL",
 /* 158 */ "referential_action ::= SET DEFAULT",
 /* 159 */ "referential_action ::= NO ACTION",
 /* 160 */ "check_constraint_definition ::= CHECK LPAR search_condition RPAR",
 /* 161 */ "search_condition ::= boolean_term",
 /* 162 */ "search_condition ::= search_condition OR boolean_term",
 /* 163 */ "boolean_term ::= boolean_factor",
 /* 164 */ "boolean_term ::= boolean_term AND boolean_factor",
 /* 165 */ "boolean_factor ::= boolean_test",
 /* 166 */ "boolean_factor ::= NOT boolean_test",
 /* 167 */ "boolean_test ::= boolean_primary",
 /* 168 */ "boolean_test ::= boolean_primary IS truth_value",
 /* 169 */ "boolean_test ::= boolean_primary IS NOT truth_value",
 /* 170 */ "boolean_primary ::= predicate",
 /* 171 */ "boolean_primary ::= LPAR search_condition RPAR",
 /* 172 */ "predicate ::= comparison_predicate",
 /* 173 */ "predicate ::= null_predicate",
 /* 174 */ "comparison_predicate ::= row_value_constructor comp_op row_value_constructor",
 /* 175 */ "row_value_constructor ::= row_value_constructor_element",
 /* 176 */ "row_value_constructor ::= LPAR row_value_constructor_list RPAR",
 /* 177 */ "row_value_constructor ::= row_subquery",
 /* 178 */ "row_value_constructor_element ::= value_expression",
 /* 179 */ "value_expression ::= numeric_value_expression",
 /* 180 */ "numeric_value_expression ::= term",
 /* 181 */ "numeric_value_expression ::= math_numeric_value_expression",
 /* 182 */ "numeric_value_expression ::= date_value_expression",
 /* 183 */ "numeric_value_expression ::= numeric_value_expression sign term",
 /* 184 */ "term ::= factor",
 /* 185 */ "term ::= term ASTERISK factor",
 /* 186 */ "term ::= term SOLIDUS factor",
 /* 187 */ "factor ::= numeric_primary",
 /* 188 */ "factor ::= sign numeric_primary",
 /* 189 */ "numeric_primary ::= value_expression_primary",
 /* 190 */ "value_expression_primary ::= unsigned_value_specification",
 /* 191 */ "value_expression_primary ::= column_reference",
 /* 192 */ "value_expression_primary ::= scalar_subquery",
 /* 193 */ "value_expression_primary ::= set_function_specification",
 /* 194 */ "unsigned_value_specification ::= unsigned_literal",
 /* 195 */ "unsigned_literal ::= unsigned_numeric_literal",
 /* 196 */ "unsigned_literal ::= general_literal",
 /* 197 */ "general_literal ::= STRING",
 /* 198 */ "column_reference ::= column_name",
 /* 199 */ "column_reference ::= qualifier PERIOD column_name",
 /* 200 */ "set_function_specification ::= COUNT LPAR ASTERISK RPAR",
 /* 201 */ "set_function_specification ::= general_set_function",
 /* 202 */ "general_set_function ::= set_function_type LPAR set_quantifier value_expression RPAR",
 /* 203 */ "set_function_type ::= MAX",
 /* 204 */ "set_function_type ::= MIN",
 /* 205 */ "qualifier ::= table_name",
 /* 206 */ "qualifier ::= correlation_name",
 /* 207 */ "correlation_name ::= identifier",
 /* 208 */ "set_quantifier ::=",
 /* 209 */ "set_quantifier ::= DISTINCT",
 /* 210 */ "set_quantifier ::= ALL",
 /* 211 */ "scalar_subquery ::= subquery",
 /* 212 */ "subquery ::= LPAR query_expression RPAR",
 /* 213 */ "query_expression ::= non_join_query_expression",
 /* 214 */ "query_expression ::= joined_table",
 /* 215 */ "non_join_query_expression ::= non_join_query_term",
 /* 216 */ "non_join_query_expression ::= query_expression UNION query_term",
 /* 217 */ "non_join_query_expression ::= query_expression UNION ALL query_term",
 /* 218 */ "non_join_query_expression ::= query_expression UNION corresponding_spec query_term",
 /* 219 */ "non_join_query_expression ::= query_expression UNION ALL corresponding_spec query_term",
 /* 220 */ "non_join_query_expression ::= query_expression EXCEPT query_term",
 /* 221 */ "non_join_query_expression ::= query_expression EXCEPT ALL query_term",
 /* 222 */ "non_join_query_expression ::= query_expression EXCEPT corresponding_spec query_term",
 /* 223 */ "non_join_query_expression ::= query_expression EXCEPT ALL corresponding_spec query_term",
 /* 224 */ "non_join_query_term ::= non_join_query_primary",
 /* 225 */ "non_join_query_term ::= query_term INTERSECT query_primary",
 /* 226 */ "non_join_query_term ::= query_term INTERSECT ALL query_primary",
 /* 227 */ "non_join_query_term ::= query_term INTERSECT corresponding_spec query_primary",
 /* 228 */ "non_join_query_term ::= query_term INTERSECT ALL corresponding_spec query_primary",
 /* 229 */ "non_join_query_primary ::= simple_table",
 /* 230 */ "non_join_query_primary ::= LPAR non_join_query_expression RPAR",
 /* 231 */ "simple_table ::= query_specification",
 /* 232 */ "simple_table ::= table_value_constructor",
 /* 233 */ "simple_table ::= explicit_table",
 /* 234 */ "query_specification ::= SELECT set_quantifier select_list table_expression limit_clause",
 /* 235 */ "select_list ::= ASTERISK",
 /* 236 */ "select_list ::= select_sublist",
 /* 237 */ "select_list ::= select_list COMMA select_sublist",
 /* 238 */ "select_sublist ::= derived_column",
 /* 239 */ "select_sublist ::= qualifier PERIOD ASTERISK",
 /* 240 */ "derived_column ::= value_expression",
 /* 241 */ "derived_column ::= value_expression as_clause",
 /* 242 */ "as_clause ::= column_name",
 /* 243 */ "as_clause ::= AS column_name",
 /* 244 */ "table_expression ::= from_clause where_clause group_by_clause having_clause orderby_clause",
 /* 245 */ "limit_clause ::=",
 /* 246 */ "limit_clause ::= LIMIT INTNUM",
 /* 247 */ "limit_clause ::= LIMIT INTNUM OFFSET INTNUM",
 /* 248 */ "limit_clause ::= LIMIT INTNUM COMMA INTNUM",
 /* 249 */ "orderby_clause ::=",
 /* 250 */ "orderby_clause ::= ORDER BY orderby_expression_list",
 /* 251 */ "orderby_expression_list ::= orderby_expression",
 /* 252 */ "orderby_expression_list ::= orderby_expression_list COMMA orderby_expression",
 /* 253 */ "orderby_expression ::= value_expression ordering",
 /* 254 */ "ordering ::=",
 /* 255 */ "ordering ::= ASC",
 /* 256 */ "ordering ::= DESC",
 /* 257 */ "from_clause ::= FROM table_reference",
 /* 258 */ "from_clause ::= table_reference COMMA table_reference",
 /* 259 */ "table_reference ::= table_name",
 /* 260 */ "table_reference ::= table_name correlation_specification",
 /* 261 */ "table_reference ::= derived_table correlation_specification",
 /* 262 */ "table_reference ::= joined_table",
 /* 263 */ "correlation_specification ::= correlation_name",
 /* 264 */ "correlation_specification ::= AS correlation_name",
 /* 265 */ "correlation_specification ::= correlation_name LPAR derived_column_list RPAR",
 /* 266 */ "correlation_specification ::= AS correlation_name LPAR derived_column_list RPAR",
 /* 267 */ "derived_column_list ::= column_name_list",
 /* 268 */ "derived_table ::= table_subquery",
 /* 269 */ "table_subquery ::= subquery",
 /* 270 */ "joined_table ::= cross_join",
 /* 271 */ "joined_table ::= qualified_join",
 /* 272 */ "joined_table ::= LPAR joined_table RPAR",
 /* 273 */ "cross_join ::= table_reference CROSS JOIN table_reference",
 /* 274 */ "qualified_join ::= table_reference natural_join join_type JOIN table_reference join_specification",
 /* 275 */ "natural_join ::=",
 /* 276 */ "natural_join ::= NATURAL",
 /* 277 */ "join_type ::=",
 /* 278 */ "join_type ::= INNER",
 /* 279 */ "join_type ::= outer_join_type",
 /* 280 */ "join_type ::= outer_join_type OUTER",
 /* 281 */ "join_type ::= UNION",
 /* 282 */ "outer_join_type ::= LEFT",
 /* 283 */ "outer_join_type ::= RIGHT",
 /* 284 */ "outer_join_type ::= FULL",
 /* 285 */ "join_specification ::=",
 /* 286 */ "join_specification ::= join_condition",
 /* 287 */ "join_specification ::= named_columns_join",
 /* 288 */ "join_condition ::= ON search_condition",
 /* 289 */ "named_columns_join ::= USING LPAR join_column_list RPAR",
 /* 290 */ "join_column_list ::= column_name_list",
 /* 291 */ "where_clause ::=",
 /* 292 */ "where_clause ::= WHERE search_condition",
 /* 293 */ "group_by_clause ::=",
 /* 294 */ "group_by_clause ::= GROUP BY grouping_column_reference_list",
 /* 295 */ "grouping_column_reference_list ::= grouping_column_reference",
 /* 296 */ "grouping_column_reference_list ::= grouping_column_reference_list COMMA grouping_column_reference",
 /* 297 */ "grouping_column_reference ::= column_reference",
 /* 298 */ "having_clause ::=",
 /* 299 */ "having_clause ::= HAVING search_condition",
 /* 300 */ "table_value_constructor ::= VALUES table_value_constructor_list",
 /* 301 */ "table_value_constructor_list ::= row_value_constructor",
 /* 302 */ "explicit_table ::= TABLE table_name",
 /* 303 */ "query_term ::= non_join_query_term",
 /* 304 */ "query_term ::= joined_table",
 /* 305 */ "corresponding_spec ::= CORRESPONDING",
 /* 306 */ "corresponding_spec ::= CORRESPONDING BY LPAR corresponding_column_list RPAR",
 /* 307 */ "corresponding_column_list ::= column_name_list",
 /* 308 */ "query_primary ::= non_join_query_primary",
 /* 309 */ "query_primary ::= joined_table",
 /* 310 */ "row_value_constructor_list ::= row_value_constructor_element",
 /* 311 */ "row_value_constructor_list ::= row_value_constructor_list COMMA row_value_constructor_element",
 /* 312 */ "row_subquery ::= NULLX",
 /* 313 */ "truth_value ::= TRUE",
 /* 314 */ "truth_value ::= FALSE",
 /* 315 */ "truth_value ::= UNKNOWN",
 /* 316 */ "comp_op ::= OP_EQ",
 /* 317 */ "comp_op ::= OP_GTLT",
 /* 318 */ "comp_op ::= OP_LT",
 /* 319 */ "comp_op ::= OP_GT",
 /* 320 */ "comp_op ::= OP_LTEQ",
 /* 321 */ "comp_op ::= OP_GTEQ",
 /* 322 */ "null_predicate ::= column_reference IS NULLX",
 /* 323 */ "null_predicate ::= column_reference IS NOT NULLX",
 /* 324 */ "constraint_attributes ::=",
 /* 325 */ "constraint_attributes ::= constraint_check_time",
 /* 326 */ "constraint_attributes ::= constraint_check_time DEFERRABLE",
 /* 327 */ "constraint_attributes ::= constraint_check_time NOT DEFERRABLE",
 /* 328 */ "constraint_attributes ::= DEFERRABLE",
 /* 329 */ "constraint_attributes ::= DEFERRABLE constraint_check_time",
 /* 330 */ "constraint_attributes ::= NOT DEFERRABLE",
 /* 331 */ "constraint_attributes ::= NOT DEFERRABLE constraint_check_time",
 /* 332 */ "constraint_check_time ::= INITIALLY DEFERRED",
 /* 333 */ "constraint_check_time ::= INITIALLY IMMEDIATE",
 /* 334 */ "sql_schema_statement ::= sql_schema_definition_statement",
 /* 335 */ "sql_schema_statement ::= sql_schema_manipulation_statement",
 /* 336 */ "sql_schema_definition_statement ::= table_definition",
 /* 337 */ "table_definition ::= CREATE TABLE table_name LPAR table_element_list RPAR",
 /* 338 */ "sql_schema_manipulation_statement ::= drop_table_statement",
 /* 339 */ "drop_behaviour ::=",
 /* 340 */ "drop_behaviour ::= CASCADE",
 /* 341 */ "drop_behaviour ::= RESTRICT",
 /* 342 */ "drop_table_statement ::= DROP TABLE drop_if_exists tables_list drop_behaviour",
 /* 343 */ "drop_if_exists ::=",
 /* 344 */ "drop_if_exists ::= IF EXISTS",
 /* 345 */ "tables_list ::= table_name",
 /* 346 */ "tables_list ::= tables_list COMMA table_name",
 /* 347 */ "sql_data_statement ::= sql_data_change_statement",
 /* 348 */ "sql_data_change_statement ::= delete_statement_searched",
 /* 349 */ "sql_data_change_statement ::= insert_statement",
 /* 350 */ "sql_data_change_statement ::= update_statement_searched",
 /* 351 */ "delete_statement_searched ::= DELETE FROM table_name delete_statement_where_search",
 /* 352 */ "delete_statement_where_search ::=",
 /* 353 */ "delete_statement_where_search ::= WHERE search_condition",
 /* 354 */ "insert_statement ::= INSERT INTO table_name insert_columns_and_source",
 /* 355 */ "insert_columns_and_source ::= LPAR insert_column_list RPAR query_expression",
 /* 356 */ "insert_columns_and_source ::= query_expression",
 /* 357 */ "insert_columns_and_source ::= DEFAULT VALUES",
 /* 358 */ "insert_column_list ::= column_name_list",
 /* 359 */ "set_clause_list ::= set_clause_list COMMA set_clause",
 /* 360 */ "set_clause_list ::= set_clause",
 /* 361 */ "set_clause ::= object_column OP_EQ update_source",
 /* 362 */ "object_column ::= column_name",
 /* 363 */ "update_source ::= value_expression",
 /* 364 */ "update_source ::= NULL",
 /* 365 */ "update_source ::= DEFAULT",
 /* 366 */ "update_statement_searched ::= UPDATE table_name SET set_clause_list update_statement_where_search",
 /* 367 */ "update_statement_where_search ::=",
 /* 368 */ "update_statement_where_search ::= WHERE search_condition",
 /* 369 */ "math_numeric_value_expression ::= ABS LPAR numeric_value_expression RPAR",
 /* 370 */ "math_numeric_value_expression ::= ACOS LPAR numeric_value_expression RPAR",
 /* 371 */ "math_numeric_value_expression ::= ASIN LPAR numeric_value_expression RPAR",
 /* 372 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression RPAR",
 /* 373 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 374 */ "math_numeric_value_expression ::= ATAN2 LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 375 */ "math_numeric_value_expression ::= CEIL LPAR numeric_value_expression RPAR",
 /* 376 */ "math_numeric_value_expression ::= COS LPAR numeric_value_expression RPAR",
 /* 377 */ "math_numeric_value_expression ::= COT LPAR numeric_value_expression RPAR",
 /* 378 */ "math_numeric_value_expression ::= CRC32 LPAR numeric_value_expression RPAR",
 /* 379 */ "math_numeric_value_expression ::= DEGREES LPAR numeric_value_expression RPAR",
 /* 380 */ "math_numeric_value_expression ::= EXP LPAR numeric_value_expression RPAR",
 /* 381 */ "math_numeric_value_expression ::= FLOOR LPAR numeric_value_expression RPAR",
 /* 382 */ "math_numeric_value_expression ::= FORMAT LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 383 */ "math_numeric_value_expression ::= LN LPAR numeric_value_expression RPAR",
 /* 384 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression RPAR",
 /* 385 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 386 */ "math_numeric_value_expression ::= LOG2 LPAR numeric_value_expression RPAR",
 /* 387 */ "math_numeric_value_expression ::= LOG10 LPAR numeric_value_expression RPAR",
 /* 388 */ "math_numeric_value_expression ::= MOD LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 389 */ "math_numeric_value_expression ::= PI LPAR RPAR",
 /* 390 */ "math_numeric_value_expression ::= POW LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 391 */ "math_numeric_value_expression ::= RADIANS LPAR numeric_value_expression RPAR",
 /* 392 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression RPAR",
 /* 393 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 394 */ "math_numeric_value_expression ::= SIGN LPAR numeric_value_expression RPAR",
 /* 395 */ "math_numeric_value_expression ::= SIN LPAR numeric_value_expression RPAR",
 /* 396 */ "math_numeric_value_expression ::= SQRT LPAR numeric_value_expression RPAR",
 /* 397 */ "math_numeric_value_expression ::= TAN LPAR numeric_value_expression RPAR",
 /* 398 */ "math_numeric_value_expression ::= TRUNCATE LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 399 */ "date_value_expression ::= DAY LPAR numeric_value_expression RPAR",
 /* 400 */ "date_value_expression ::= MONTH LPAR numeric_value_expression RPAR",
 /* 401 */ "date_value_expression ::= YEAR LPAR numeric_value_expression RPAR",
);

/*
** This function returns the symbolic name associated with a token
** value.
*/
function ParseTokenName(/* int */ $tokenType){
  if (isset(self::$yyTokenName[$tokenType]))
    return self::$yyTokenName[$tokenType];
  return "Unknown";
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
private function yy_destructor($yymajor, $yypminor){
  switch( $yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
private function yy_pop_parser_stack() {
  if ($this->yyidx < 0) return 0;
  $yytos = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE ) {
    fprintf($this->yyTraceFILE,"%sPopping %s\n",
      $this->yyTracePrompt,
      self::$yyTokenName[$yytos->major]);
  }
  $this->yy_destructor( $yytos->major, $yytos->minor);
  unset($this->yystack[$this->yyidx]);
  $this->yyidx--;
  return $yytos->major;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
function __destruct()
{
  while($this->yyidx >= 0)
    $this->yy_pop_parser_stack();
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_shift_action(
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
  $stateno = $this->yystack[$this->yyidx]->stateno;
 
  if( $stateno>self::YY_SHIFT_MAX || 
      ($i = self::$yy_shift_ofst[$stateno])==self::YY_SHIFT_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    if( $iLookAhead>0 ){
      if (isset(self::$yyFallback[$iLookAhead]) &&
        ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n",
             $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], 
             self::$yyTokenName[$iFallback]);
        }
        return $this->yy_find_shift_action($iFallback);
      }
      {
        $j = $i - $iLookAhead + self::YYWILDCARD;
        if( $j>=0 && $j<count(self::$yy_action) && self::$yy_lookahead[$j]==self::YYWILDCARD ){
          if( $this->yyTraceFILE ){
            fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n",
               $this->yyTracePrompt, self::$yyTokenName[$iLookAhead],
               self::$yyTokenName[self::YYWILDCARD]);
          }
          return self::$yy_action[$j];
        }
      }
    }
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_reduce_action(
  $stateno,              /* Current state number */
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
 
  if( $stateno>self::YY_REDUCE_MAX ||
      ($i = self::$yy_reduce_ofst[$stateno])==self::YY_REDUCE_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Perform a shift action.
*/
private function yy_shift(
  $yyNewState,               /* The new state to shift in */
  $yyMajor,                  /* The major token to shift in */
  $yypMinor         /* Pointer ot the minor token to shift in */
){
  $this->yyidx++;
  if (isset($this->yystack[$this->yyidx])) {
    $yytos = $this->yystack[$this->yyidx];
  } else {
    $yytos = new ParseyyStackEntry;
    $this->yystack[$this->yyidx] = $yytos;
  }
  $yytos->stateno = $yyNewState;
  $yytos->major = $yyMajor;
  $yytos->minor = $yypMinor;
  if( $this->yyTraceFILE) {
    fprintf($this->yyTraceFILE,"%sShift %d\n",$this->yyTracePrompt,$yyNewState);
    fprintf($this->yyTraceFILE,"%sStack:",$this->yyTracePrompt);
    for ($i = 1; $i <= $this->yyidx; $i++) {
      $ent = $this->yystack[$i];
      fprintf($this->yyTraceFILE," %s",self::$yyTokenName[$ent->major]);
    }
    fprintf($this->yyTraceFILE,"\n");
  }
}

private function __overflow_dead_code() {
  /* if the stack can overflow (it can't in the PHP implementation)
   * Then the following code would be emitted */
}

/* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule 
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
static $yyRuleInfo = array(
  152, 1,
  153, 3,
  153, 2,
  155, 0,
  155, 1,
  154, 1,
  154, 1,
  154, 1,
  159, 1,
  160, 1,
  160, 1,
  161, 1,
  163, 1,
  164, 1,
  162, 1,
  165, 1,
  166, 1,
  167, 1,
  167, 3,
  168, 1,
  168, 1,
  170, 1,
  169, 4,
  173, 0,
  173, 1,
  173, 2,
  175, 1,
  171, 1,
  171, 4,
  171, 1,
  171, 1,
  171, 1,
  171, 1,
  171, 1,
  171, 1,
  176, 1,
  176, 1,
  176, 4,
  176, 2,
  176, 5,
  176, 2,
  176, 5,
  176, 1,
  176, 4,
  183, 1,
  177, 2,
  177, 5,
  177, 2,
  177, 5,
  177, 1,
  177, 4,
  177, 3,
  177, 6,
  177, 3,
  177, 6,
  177, 2,
  177, 5,
  178, 1,
  179, 1,
  179, 4,
  179, 2,
  179, 5,
  180, 1,
  180, 1,
  184, 1,
  184, 4,
  184, 6,
  184, 1,
  184, 4,
  184, 6,
  184, 1,
  184, 4,
  184, 6,
  184, 1,
  184, 1,
  186, 1,
  187, 1,
  185, 1,
  185, 4,
  185, 1,
  185, 2,
  181, 1,
  181, 2,
  181, 5,
  181, 2,
  181, 5,
  188, 0,
  188, 3,
  189, 1,
  191, 1,
  190, 1,
  182, 2,
  192, 3,
  192, 1,
  193, 1,
  193, 4,
  196, 1,
  196, 1,
  196, 1,
  196, 1,
  196, 1,
  197, 1,
  194, 1,
  194, 1,
  194, 4,
  198, 1,
  195, 1,
  195, 4,
  195, 1,
  195, 4,
  195, 8,
  199, 1,
  199, 3,
  172, 0,
  172, 2,
  200, 1,
  200, 1,
  200, 1,
  200, 1,
  200, 1,
  200, 1,
  201, 1,
  201, 1,
  202, 1,
  202, 2,
  204, 1,
  204, 1,
  174, 3,
  205, 0,
  205, 2,
  208, 1,
  206, 2,
  206, 1,
  206, 1,
  206, 1,
  209, 1,
  209, 1,
  209, 2,
  210, 4,
  212, 1,
  212, 4,
  215, 1,
  216, 1,
  217, 1,
  217, 3,
  213, 0,
  213, 2,
  218, 1,
  218, 1,
  214, 0,
  214, 1,
  214, 2,
  214, 1,
  214, 2,
  219, 3,
  220, 3,
  221, 1,
  221, 2,
  221, 2,
  221, 2,
  211, 4,
  222, 1,
  222, 3,
  223, 1,
  223, 3,
  224, 1,
  224, 2,
  225, 1,
  225, 3,
  225, 4,
  226, 1,
  226, 3,
  228, 1,
  228, 1,
  229, 3,
  231, 1,
  231, 3,
  231, 1,
  233, 1,
  236, 1,
  237, 1,
  237, 1,
  237, 1,
  237, 3,
  238, 1,
  238, 3,
  238, 3,
  241, 1,
  241, 2,
  242, 1,
  243, 1,
  243, 1,
  243, 1,
  243, 1,
  244, 1,
  248, 1,
  248, 1,
  203, 1,
  245, 1,
  245, 3,
  247, 4,
  247, 1,
  250, 5,
  251, 1,
  251, 1,
  249, 1,
  249, 1,
  253, 1,
  252, 0,
  252, 1,
  252, 1,
  246, 1,
  254, 3,
  255, 1,
  255, 1,
  256, 1,
  256, 3,
  256, 4,
  256, 4,
  256, 5,
  256, 3,
  256, 4,
  256, 4,
  256, 5,
  258, 1,
  258, 3,
  258, 4,
  258, 4,
  258, 5,
  261, 1,
  261, 3,
  263, 1,
  263, 1,
  263, 1,
  156, 5,
  266, 1,
  266, 1,
  266, 3,
  269, 1,
  269, 3,
  270, 1,
  270, 2,
  271, 1,
  271, 2,
  267, 5,
  268, 0,
  268, 2,
  268, 4,
  268, 4,
  276, 0,
  276, 3,
  277, 1,
  277, 3,
  278, 2,
  279, 0,
  279, 1,
  279, 1,
  272, 2,
  272, 3,
  280, 1,
  280, 2,
  280, 2,
  280, 1,
  281, 1,
  281, 2,
  281, 4,
  281, 5,
  283, 1,
  282, 1,
  284, 1,
  257, 1,
  257, 1,
  257, 3,
  285, 4,
  286, 6,
  287, 0,
  287, 1,
  288, 0,
  288, 1,
  288, 1,
  288, 2,
  288, 1,
  290, 1,
  290, 1,
  290, 1,
  289, 0,
  289, 1,
  289, 1,
  291, 2,
  292, 4,
  293, 1,
  273, 0,
  273, 2,
  274, 0,
  274, 3,
  294, 1,
  294, 3,
  295, 1,
  275, 0,
  275, 2,
  264, 2,
  296, 1,
  265, 2,
  259, 1,
  259, 1,
  260, 1,
  260, 5,
  297, 1,
  262, 1,
  262, 1,
  234, 1,
  234, 3,
  235, 1,
  227, 1,
  227, 1,
  227, 1,
  232, 1,
  232, 1,
  232, 1,
  232, 1,
  232, 1,
  232, 1,
  230, 3,
  230, 4,
  207, 0,
  207, 1,
  207, 2,
  207, 3,
  207, 1,
  207, 2,
  207, 2,
  207, 3,
  298, 2,
  298, 2,
  158, 1,
  158, 1,
  299, 1,
  301, 6,
  300, 1,
  303, 0,
  303, 1,
  303, 1,
  302, 5,
  304, 0,
  304, 2,
  305, 1,
  305, 3,
  157, 1,
  306, 1,
  306, 1,
  306, 1,
  307, 4,
  310, 0,
  310, 2,
  308, 4,
  311, 4,
  311, 1,
  311, 2,
  312, 1,
  313, 3,
  313, 1,
  314, 3,
  315, 1,
  316, 1,
  316, 1,
  316, 1,
  309, 5,
  317, 0,
  317, 2,
  239, 4,
  239, 4,
  239, 4,
  239, 4,
  239, 6,
  239, 6,
  239, 4,
  239, 4,
  239, 4,
  239, 4,
  239, 4,
  239, 4,
  239, 4,
  239, 6,
  239, 4,
  239, 4,
  239, 6,
  239, 4,
  239, 4,
  239, 6,
  239, 3,
  239, 6,
  239, 4,
  239, 4,
  239, 6,
  239, 4,
  239, 4,
  239, 4,
  239, 4,
  239, 6,
  240, 4,
  240, 4,
  240, 4,
);

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
private function yy_reduce(
  $yyruleno                 /* Number of the rule by which to reduce */
){
  $yygoto = 0;                     /* The next state */
  $yyact = 0;                      /* The next action */
  $yygotominor = null;        /* The LHS of the rule reduced */
  $yymsp = null;            /* The top of the parser's stack */
  $yysize = 0;                     /* Amount to pop the stack */
  
  $yymsp = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
    fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt,
      self::$yyRuleName[$yyruleno]);
  }

  switch( $yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 15:
      case 16:
      case 19:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 44:
      case 62:
      case 63:
      case 111:
      case 132:
      case 141:
      case 161:
      case 163:
      case 165:
      case 167:
      case 170:
      case 172:
      case 173:
      case 175:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 184:
      case 187:
      case 189:
      case 190:
      case 191:
      case 194:
      case 195:
      case 196:
      case 201:
      case 205:
      case 207:
      case 213:
      case 215:
      case 224:
      case 229:
      case 232:
      case 238:
      case 240:
      case 262:
      case 263:
      case 264:
      case 271:
      case 279:
      case 288:
      case 297:
      case 300:
      case 301:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 334:
      case 335:
      case 338:
      case 347:
      case 348:
      case 349:
      case 350:
      case 353:
      case 358:
      case 363:
      case 368:
#line 6 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;}
#line 2813 "sql.php"
        break;
      case 1:
#line 8 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->actions=array_merge($yygotominor->actions, $this->yystack[$this->yyidx + 0]->minor->actions);}
#line 2818 "sql.php"
        break;
      case 2:
      case 127:
      case 176:
#line 9 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 2825 "sql.php"
        break;
      case 5:
#line 14 "sql.y"
{
		$this->yystack[$this->yyidx + 0]->minor->actions[] = new qpAction_returnRelation($this->yystack[$this->yyidx + 0]->minor->last_relation_id);		
		$yygotominor=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 2833 "sql.php"
        break;
      case 9:
#line 26 "sql.y"
{$yygotominor = new filter_StaticIntnum($this->yystack[$this->yyidx + 0]->minor->value);}
#line 2838 "sql.php"
        break;
      case 17:
      case 310:
      case 360:
#line 47 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;
	}
#line 2848 "sql.php"
        break;
      case 18:
#line 51 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2856 "sql.php"
        break;
      case 22:
#line 61 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->name = $this->yystack[$this->yyidx + -3]->minor->value;
		if(isset($this->yystack[$this->yyidx + 0]->minor)){
			foreach($this->yystack[$this->yyidx + 0]->minor as $constraint){
				if(strtoupper($constraint)=="AUTO_INCREMENT")
					$this->yystack[$this->yyidx + -2]->minor->autoinc=1;
					$this->yystack[$this->yyidx + -2]->minor->is_unique=1;
			}
		}
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2871 "sql.php"
        break;
      case 24:
      case 345:
#line 74 "sql.y"
{$yygotominor = Array(); $yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;}
#line 2877 "sql.php"
        break;
      case 25:
#line 75 "sql.y"
{$this->yystack[$this->yyidx + -1]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 2882 "sql.php"
        break;
      case 37:
#line 99 "sql.y"
{$yygotominor = new PHPFDB_char(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 2887 "sql.php"
        break;
      case 42:
#line 104 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, 666);}
#line 2892 "sql.php"
        break;
      case 43:
#line 105 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 2897 "sql.php"
        break;
      case 57:
#line 122 "sql.y"
{$yygotominor = new PHPFDB_blob(NULL);}
#line 2902 "sql.php"
        break;
      case 73:
#line 141 "sql.y"
{$yygotominor = new PHPFDB_int();}
#line 2907 "sql.php"
        break;
      case 77:
#line 148 "sql.y"
{$yygotominor = new PHPFDB_float();}
#line 2912 "sql.php"
        break;
      case 81:
#line 153 "sql.y"
{$yygotominor = new PHPFDB_date();}
#line 2917 "sql.php"
        break;
      case 125:
#line 222 "sql.y"
{$yygotominor="plus_sign";}
#line 2922 "sql.php"
        break;
      case 126:
#line 223 "sql.y"
{$yygotominor="minus_sign";}
#line 2927 "sql.php"
        break;
      case 136:
      case 242:
      case 243:
      case 282:
      case 283:
      case 284:
#line 242 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2937 "sql.php"
        break;
      case 143:
#line 254 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor->value;
	}
#line 2945 "sql.php"
        break;
      case 144:
#line 258 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor->value;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2953 "sql.php"
        break;
      case 162:
#line 292 "sql.y"
{
		$yygotominor= new filter_OR($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2960 "sql.php"
        break;
      case 164:
#line 297 "sql.y"
{
		$yygotominor= new filter_AND($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2967 "sql.php"
        break;
      case 174:
#line 314 "sql.y"
{
		$yygotominor= new filter_COMP($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2974 "sql.php"
        break;
      case 183:
#line 334 "sql.y"
{ ECHO "TODOTODOTODOTODO";}
#line 2979 "sql.php"
        break;
      case 188:
#line 341 "sql.y"
{$yygotominor= new filter_UnaryMathFunction($this->yystack[$this->yyidx + -1]->minor); $yygotominor->expression=$this->yystack[$this->yyidx + 0]->minor;}
#line 2984 "sql.php"
        break;
      case 193:
#line 349 "sql.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor;}
#line 2989 "sql.php"
        break;
      case 197:
#line 364 "sql.y"
{
	$yygotominor = new filter_StaticString(substr($this->yystack[$this->yyidx + 0]->minor->value, 1, strlen($this->yystack[$this->yyidx + 0]->minor->value)-2));
}
#line 2996 "sql.php"
        break;
      case 198:
      case 362:
#line 396 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3002 "sql.php"
        break;
      case 199:
#line 397 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value, $this->yystack[$this->yyidx + -2]->minor->value);}
#line 3007 "sql.php"
        break;
      case 200:
#line 399 "sql.y"
{$yygotominor = new filter_SetFunction("count_asterisk"); $yygotominor->expression = new filter_EmptyExpression();}
#line 3012 "sql.php"
        break;
      case 202:
#line 402 "sql.y"
{$this->yystack[$this->yyidx + -4]->minor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor=$this->yystack[$this->yyidx + -4]->minor;}
#line 3017 "sql.php"
        break;
      case 203:
#line 404 "sql.y"
{$yygotominor = new filter_SetFunction("max");}
#line 3022 "sql.php"
        break;
      case 204:
#line 405 "sql.y"
{$yygotominor = new filter_SetFunction("min");}
#line 3027 "sql.php"
        break;
      case 208:
      case 367:
#line 412 "sql.y"
{$yygotominor=NULL;}
#line 3033 "sql.php"
        break;
      case 209:
#line 413 "sql.y"
{$yygotominor="DISTINCT";}
#line 3038 "sql.php"
        break;
      case 210:
#line 414 "sql.y"
{$yygotominor="ALL";}
#line 3043 "sql.php"
        break;
      case 234:
#line 451 "sql.y"
{
		$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		
		if(isset($this->yystack[$this->yyidx + -1]->minor->filter)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_filterResults($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->filter);
		}
		$total_group = false;
		$expression_columns = Array();	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection))
			foreach($this->yystack[$this->yyidx + -2]->minor->columns_projection as $p){
				if($p->is_set_function) {
					$total_group=true;
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				} elseif($p->is_math_function) {
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				}
			}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $this->yystack[$this->yyidx + -1]->minor->grouping_columns);
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
		} elseif(!(empty($expression_columns))) {
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $expression_columns);
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->grouping_columns, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
			$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		} else {
			if($total_group){
				$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, array(), $this->yystack[$this->yyidx + -2]->minor->columns_projection);
				$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
			}
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->ordering)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_orderRelation($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->ordering);
		}			
		if($this->yystack[$this->yyidx + -3]->minor=="DISTINCT")
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_distinctValues($this->yystack[$this->yyidx + -1]->minor->last_relation_id);
		elseif($this->yystack[$this->yyidx + -3]->minor=="ALL"){
		}	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$indexes = Array();
			for($i=0;$i<count($this->yystack[$this->yyidx + -2]->minor->columns_projection);$i++)
				$indexes[] = $i;
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_selectColumnsByIndexes($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $indexes);
		}		
		if(isset($this->yystack[$this->yyidx + 0]->minor))
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_limitRows($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + 0]->minor->rows, $this->yystack[$this->yyidx + 0]->minor->offset);
		$yygotominor=$this->yystack[$this->yyidx + -1]->minor;
	}
#line 3100 "sql.php"
        break;
      case 235:
#line 505 "sql.y"
{$yygotominor = new stdClass();$yygotominor->columns_projection = NULL;$yygotominor->set_functions=NULL;}
#line 3105 "sql.php"
        break;
      case 236:
#line 506 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->columns_projection = Array();
		$yygotominor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;

	}
#line 3115 "sql.php"
        break;
      case 237:
#line 512 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3123 "sql.php"
        break;
      case 241:
#line 521 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor; $yygotominor->alias=$this->yystack[$this->yyidx + 0]->minor;}
#line 3128 "sql.php"
        break;
      case 244:
#line 526 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = $this->yystack[$this->yyidx + -4]->minor->actions;
		if(isset($this->yystack[$this->yyidx + -2]->minor)&&isset($this->yystack[$this->yyidx + -2]->minor->grouping_columns))
			$yygotominor->grouping_columns = $this->yystack[$this->yyidx + -2]->minor->grouping_columns;
		if(isset($this->yystack[$this->yyidx + -3]->minor)&&isset($this->yystack[$this->yyidx + -3]->minor->filter))
			$yygotominor->filter = $this->yystack[$this->yyidx + -3]->minor->filter;
		if(isset($this->yystack[$this->yyidx + 0]->minor)&&isset($this->yystack[$this->yyidx + 0]->minor->ordering))
			$yygotominor->ordering = $this->yystack[$this->yyidx + 0]->minor->ordering;
	}
#line 3142 "sql.php"
        break;
      case 246:
#line 538 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=0;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3147 "sql.php"
        break;
      case 247:
#line 539 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + -2]->minor->value;}
#line 3152 "sql.php"
        break;
      case 248:
#line 540 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + -2]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3157 "sql.php"
        break;
      case 250:
#line 543 "sql.y"
{$yygotominor = new stdClass();$yygotominor->ordering=$this->yystack[$this->yyidx + 0]->minor;}
#line 3162 "sql.php"
        break;
      case 251:
#line 544 "sql.y"
{$yygotominor=Array();$yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3167 "sql.php"
        break;
      case 252:
      case 296:
#line 545 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;$yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3173 "sql.php"
        break;
      case 253:
#line 546 "sql.y"
{$yygotominor = new stdClass();$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor->order=$this->yystack[$this->yyidx + 0]->minor;}
#line 3178 "sql.php"
        break;
      case 254:
      case 255:
#line 547 "sql.y"
{$yygotominor='asc';}
#line 3184 "sql.php"
        break;
      case 256:
#line 549 "sql.y"
{$yygotominor='desc';}
#line 3189 "sql.php"
        break;
      case 257:
#line 552 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;
	}
#line 3197 "sql.php"
        break;
      case 259:
#line 558 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3202 "sql.php"
        break;
      case 260:
#line 559 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value);}
#line 3207 "sql.php"
        break;
      case 274:
#line 581 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->join_type = $this->yystack[$this->yyidx + -3]->minor;
	$b_last_relation = $this->yystack[$this->yyidx + -5]->minor->actions[count($this->yystack[$this->yyidx + -5]->minor->actions)-1];
	$e_last_relation = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1];
	$yygotominor->actions = array_merge($this->yystack[$this->yyidx + -5]->minor->actions, $this->yystack[$this->yyidx + -1]->minor->actions);
	$yygotominor->actions[] = new qpAction_joinRelationsLeft($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
}
#line 3219 "sql.php"
        break;
      case 286:
#line 604 "sql.y"
{$yygotominor = new stdClass();$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;}
#line 3224 "sql.php"
        break;
      case 292:
#line 614 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;
}
#line 3232 "sql.php"
        break;
      case 293:
#line 619 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = NULL;}
#line 3237 "sql.php"
        break;
      case 294:
#line 620 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = $this->yystack[$this->yyidx + 0]->minor;}
#line 3242 "sql.php"
        break;
      case 295:
#line 622 "sql.y"
{$yygotominor = Array(); $yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3247 "sql.php"
        break;
      case 311:
      case 359:
#line 668 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor = $this->yystack[$this->yyidx + -2]->minor;
	}
#line 3256 "sql.php"
        break;
      case 322:
#line 689 "sql.y"
{
		$yygotominor = new filter_IsNullColumn($this->yystack[$this->yyidx + -2]->minor);
	}
#line 3263 "sql.php"
        break;
      case 323:
#line 692 "sql.y"
{
		$yygotominor = new filter_IsNotNullColumn($this->yystack[$this->yyidx + -3]->minor);
	}
#line 3270 "sql.php"
        break;
      case 336:
#line 738 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3278 "sql.php"
        break;
      case 337:
#line 786 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->action = new qpAction_createTable($this->yystack[$this->yyidx + -3]->minor->value, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3286 "sql.php"
        break;
      case 342:
#line 956 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		foreach($this->yystack[$this->yyidx + -1]->minor as $c){
			$yygotominor->actions[] = new qpAction_dropTable($c->value);
		}
	}
#line 3297 "sql.php"
        break;
      case 346:
#line 968 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3302 "sql.php"
        break;
      case 351:
#line 1056 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		if(is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_bulkDelete($this->yystack[$this->yyidx + -1]->minor->value);
		} else {
			$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value);
			$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
			$yygotominor->actions[] = new qpAction_addressedDelete($last_relation_id);
		}
	}
#line 3318 "sql.php"
        break;
      case 352:
#line 1069 "sql.y"
{
		$yygotominor = NULL;
	}
#line 3325 "sql.php"
        break;
      case 354:
#line 1076 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[] = new qpAction_insertRow($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3333 "sql.php"
        break;
      case 355:
#line 1081 "sql.y"
{
		$yygotominor = Array();
		foreach($this->yystack[$this->yyidx + -2]->minor as $key => $column_name){
			$yygotominor[$column_name] = $this->yystack[$this->yyidx + 0]->minor[$key];
		}
	}
#line 3343 "sql.php"
        break;
      case 356:
#line 1087 "sql.y"
{print_r($this->yystack[$this->yyidx + 0]->minor);}
#line 3348 "sql.php"
        break;
      case 361:
#line 1108 "sql.y"
{$yygotominor = new stdClass();$yygotominor->column=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->new_value=$this->yystack[$this->yyidx + 0]->minor;}
#line 3353 "sql.php"
        break;
      case 366:
#line 1116 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -3]->minor->value);
		$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;

		if(!is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
		}
		$yygotominor->actions[]=new qpAction_updateValues($last_relation_id, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3368 "sql.php"
        break;
      case 369:
#line 1178 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("abs");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3373 "sql.php"
        break;
      case 370:
#line 1179 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("acos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3378 "sql.php"
        break;
      case 371:
#line 1180 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("asin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3383 "sql.php"
        break;
      case 372:
#line 1181 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("atan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3388 "sql.php"
        break;
      case 373:
      case 374:
#line 1182 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("atan2");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3394 "sql.php"
        break;
      case 375:
#line 1184 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ceil");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3399 "sql.php"
        break;
      case 376:
#line 1185 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3404 "sql.php"
        break;
      case 377:
#line 1186 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cot");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3409 "sql.php"
        break;
      case 378:
#line 1187 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("crc32");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3414 "sql.php"
        break;
      case 379:
#line 1188 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("degrees");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3419 "sql.php"
        break;
      case 380:
#line 1189 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("exp");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3424 "sql.php"
        break;
      case 381:
#line 1190 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("floor");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3429 "sql.php"
        break;
      case 382:
#line 1191 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("format");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3434 "sql.php"
        break;
      case 383:
      case 384:
#line 1192 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ln");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3440 "sql.php"
        break;
      case 385:
#line 1194 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3445 "sql.php"
        break;
      case 386:
#line 1195 "sql.y"
{$val2 = new filter_StaticIntnum(2);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val2;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3450 "sql.php"
        break;
      case 387:
#line 1196 "sql.y"
{$val10 = new filter_StaticIntnum(10);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val10;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3455 "sql.php"
        break;
      case 388:
#line 1197 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("mod");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3460 "sql.php"
        break;
      case 389:
#line 1198 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("pi");$yygotominor->expression=new filter_EmptyExpression();}
#line 3465 "sql.php"
        break;
      case 390:
#line 1199 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("pow");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3470 "sql.php"
        break;
      case 391:
#line 1200 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("radians");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3475 "sql.php"
        break;
      case 392:
#line 1201 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("round");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3480 "sql.php"
        break;
      case 393:
#line 1202 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("round");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3485 "sql.php"
        break;
      case 394:
#line 1203 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sign");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3490 "sql.php"
        break;
      case 395:
#line 1204 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3495 "sql.php"
        break;
      case 396:
#line 1205 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sqrt");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3500 "sql.php"
        break;
      case 397:
#line 1206 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("tan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3505 "sql.php"
        break;
      case 398:
#line 1207 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("truncate");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3510 "sql.php"
        break;
      case 399:
#line 1214 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("day");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3515 "sql.php"
        break;
      case 400:
#line 1215 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("month");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3520 "sql.php"
        break;
      case 401:
#line 1216 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("year");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3525 "sql.php"
        break;
  };
  $yygoto = self::$yyRuleInfo[2*$yyruleno];
  $yysize = self::$yyRuleInfo[(2*$yyruleno)+1];

  $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;
  
  $this->yyidx -= $yysize;
  $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);
  if( $yyact < self::YYNSTATE ){
    $this->yy_shift($yyact, $yygoto, $yygotominor);
  }else if( $yyact == self::YYNSTATE + self::YYNRULE + 1 ){
    $this->yy_accept();
  }
}

/*
** The following code executes when the parse fails
*/
private function yy_parse_failed(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sFail!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
}

/*
** The following code executes when a syntax error first occurs.
*/
private function yy_syntax_error(
  $yymajor,                   /* The major type of the error token */
  $yyminor            /* The minor type of the error token */
){
}

/*
** The following is executed when the parser accepts
*/
private function yy_accept(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sAccept!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 2 "sql.y"

      //echo "PARSING COMPLETE!!";
   
#line 3580 "sql.php"
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
function Parse(
  $yymajor,                 /* The major token code number */
  $yyminor = null           /* The value for the token */
){
  $yyact = 0;            /* The parser action. */
  $yyendofinput = 0;     /* True if we are at the end of input */
  $yyerrorhit = 0;   /* True if yymajor has invoked an error */

  /* (re)initialize the parser, if necessary */
  if( $this->yyidx<0 ){
    $this->yyidx = 0;
    $this->yyerrcnt = -1;
    $ent = new ParseyyStackEntry;
    $ent->stateno = 0;
    $ent->major = 0;
    $this->yystack = array( 0 => $ent );

    $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    $this->YY_ACCEPT_ACTION  = self::YYNSTATE + self::YYNRULE + 1;
    $this->YY_ERROR_ACTION   = self::YYNSTATE + self::YYNRULE;
  }
  $yyendofinput = ($yymajor==0);

  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sInput %s\n",$this->yyTracePrompt,
      self::$yyTokenName[$yymajor]);
  }

  do{
    $yyact = $this->yy_find_shift_action($yymajor);
    if( $yyact<self::YYNSTATE ){
      $this->yy_shift($yyact,$yymajor,$yyminor);
      $this->yyerrcnt--;
      if( $yyendofinput && $this->yyidx>=0 ){
        $yymajor = 0;
      }else{
        $yymajor = self::YYNOCODE;
      }
    }else if( $yyact < self::YYNSTATE + self::YYNRULE ){
      $this->yy_reduce($yyact-self::YYNSTATE);
    }else if( $yyact == $this->YY_ERROR_ACTION ){
      if( $this->yyTraceFILE ){
        fprintf($this->yyTraceFILE,"%sSyntax Error!\n",$this->yyTracePrompt);
      }
if (self::YYERRORSYMBOL) {
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( $this->yyerrcnt<0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $yymx = $this->yystack[$this->yyidx]->major;
      if( $yymx==self::YYERRORSYMBOL || $yyerrorhit ){
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE,"%sDiscard input token %s\n",
             $this->yyTracePrompt,self::$yyTokenName[$yymajor]);
        }
        $this->yy_destructor($yymajor,$yyminor);
        $yymajor = self::YYNOCODE;
      }else{
         while(
          $this->yyidx >= 0 &&
          $yymx != self::YYERRORSYMBOL &&
          ($yyact = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::YYERRORSYMBOL)) >= self::YYNSTATE
        ){
          $this->yy_pop_parser_stack();
        }
        if( $this->yyidx < 0 || $yymajor==0 ){
          $this->yy_destructor($yymajor,$yyminor);
          $this->yy_parse_failed();
          $yymajor = self::YYNOCODE;
        }else if( $yymx!=self::YYERRORSYMBOL ){
          $this->yy_shift($yyact,self::YYERRORSYMBOL,0);
        }
      }
      $this->yyerrcnt = 3;
      $yyerrorhit = 1;
} else {  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( $this->yyerrcnt<=0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $this->yyerrcnt = 3;
      $this->yy_destructor($yymajor,$yyminor);
      if( $yyendofinput ){
        $this->yy_parse_failed();
      }
      $yymajor = self::YYNOCODE;
}
    }else{
      $this->yy_accept();
      $yymajor = self::YYNOCODE;
    }
  }while( $yymajor!=self::YYNOCODE && $this->yyidx>=0 );
}

}
