<?php # vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */


/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
class ParseyyStackEntry {
  var /* int */ $stateno;       /* The state-number */
  var /* int */ $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  var $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

/* The state of the parser is completely contained in an instance of
** the following structure */
class ParseParser {
  var /* int */ $yyidx = -1;                    /* Index of top element in stack */
  var /* int */ $yyerrcnt;                 /* Shifts left before out of the error */
  // ParseARG_SDECL                /* A place to hold %extra_argument */
  var /* yyStackEntry */ $yystack = array(
  	/* of YYSTACKDEPTH elements */
	);  /* The parser's stack */

  var $yyTraceFILE = null;
  var $yyTracePrompt = null;



/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
  const TK_SEMI =  1;
  const TK_NAME =  2;
  const TK_INTNUM =  3;
  const TK_APPROXNUM =  4;
  const TK_DEADTOKEN =  5;
  const TK_COMMA =  6;
  const TK_CHARACTER =  7;
  const TK_SET =  8;
  const TK_CHAR =  9;
  const TK_LPAR = 10;
  const TK_RPAR = 11;
  const TK_VARYING = 12;
  const TK_VARCHAR = 13;
  const TK_NATIONAL = 14;
  const TK_NCHAR = 15;
  const TK_BLOB = 16;
  const TK_BIT = 17;
  const TK_NUMERIC = 18;
  const TK_DECIMAL = 19;
  const TK_DEC = 20;
  const TK_INTEGER = 21;
  const TK_SMALLINT = 22;
  const TK_FLOAT = 23;
  const TK_REAL = 24;
  const TK_DOUBLE = 25;
  const TK_PRECISION = 26;
  const TK_DATE = 27;
  const TK_DATETIME = 28;
  const TK_TIME = 29;
  const TK_TIMESTAMP = 30;
  const TK_WITH = 31;
  const TK_ZONE = 32;
  const TK_INTERVAL = 33;
  const TK_TO = 34;
  const TK_YEAR = 35;
  const TK_MONTH = 36;
  const TK_DAY = 37;
  const TK_HOUR = 38;
  const TK_MINUTE = 39;
  const TK_SECOND = 40;
  const TK_PERIOD = 41;
  const TK_DEFAULT = 42;
  const TK_USER = 43;
  const TK_CURRENT_USER = 44;
  const TK_SESSION_USER = 45;
  const TK_SYSTEM_USER = 46;
  const TK_NULL = 47;
  const TK_PLUS_SIGN = 48;
  const TK_MINUS_SIGN = 49;
  const TK_CURRENT_TIMESTAMP = 50;
  const TK_CONSTRAINT = 51;
  const TK_NOT = 52;
  const TK_UNIQUE = 53;
  const TK_AUTO_INCREMENT = 54;
  const TK_PRIMARY = 55;
  const TK_KEY = 56;
  const TK_REFERENCES = 57;
  const TK_MATCH = 58;
  const TK_FULL = 59;
  const TK_PARTIAL = 60;
  const TK_ON = 61;
  const TK_UPDATE = 62;
  const TK_DELETE = 63;
  const TK_CASCADE = 64;
  const TK_NO = 65;
  const TK_ACTION = 66;
  const TK_CHECK = 67;
  const TK_OR = 68;
  const TK_AND = 69;
  const TK_IS = 70;
  const TK_ASTERISK = 71;
  const TK_SOLIDUS = 72;
  const TK_STRING = 73;
  const TK_COUNT = 74;
  const TK_MAX = 75;
  const TK_MIN = 76;
  const TK_DISTINCT = 77;
  const TK_ALL = 78;
  const TK_UNION = 79;
  const TK_EXCEPT = 80;
  const TK_INTERSECT = 81;
  const TK_SELECT = 82;
  const TK_AS = 83;
  const TK_LIMIT = 84;
  const TK_OFFSET = 85;
  const TK_ORDER = 86;
  const TK_BY = 87;
  const TK_ASC = 88;
  const TK_DESC = 89;
  const TK_FROM = 90;
  const TK_CROSS = 91;
  const TK_JOIN = 92;
  const TK_NATURAL = 93;
  const TK_INNER = 94;
  const TK_OUTER = 95;
  const TK_LEFT = 96;
  const TK_RIGHT = 97;
  const TK_USING = 98;
  const TK_WHERE = 99;
  const TK_GROUP = 100;
  const TK_HAVING = 101;
  const TK_VALUES = 102;
  const TK_TABLE = 103;
  const TK_CORRESPONDING = 104;
  const TK_NULLX = 105;
  const TK_TRUE = 106;
  const TK_FALSE = 107;
  const TK_UNKNOWN = 108;
  const TK_OP_EQ = 109;
  const TK_OP_GTLT = 110;
  const TK_OP_LT = 111;
  const TK_OP_GT = 112;
  const TK_OP_LTEQ = 113;
  const TK_OP_GTEQ = 114;
  const TK_OP_LIKE = 115;
  const TK_DEFERRABLE = 116;
  const TK_INITIALLY = 117;
  const TK_DEFERRED = 118;
  const TK_IMMEDIATE = 119;
  const TK_CREATE = 120;
  const TK_RESTRICT = 121;
  const TK_DROP = 122;
  const TK_IF = 123;
  const TK_EXISTS = 124;
  const TK_INSERT = 125;
  const TK_INTO = 126;
  const TK_ABS = 127;
  const TK_ACOS = 128;
  const TK_ASIN = 129;
  const TK_ATAN = 130;
  const TK_ATAN2 = 131;
  const TK_CEIL = 132;
  const TK_COS = 133;
  const TK_COT = 134;
  const TK_CRC32 = 135;
  const TK_DEGREES = 136;
  const TK_EXP = 137;
  const TK_FLOOR = 138;
  const TK_FORMAT = 139;
  const TK_LN = 140;
  const TK_LOG = 141;
  const TK_LOG2 = 142;
  const TK_LOG10 = 143;
  const TK_MOD = 144;
  const TK_PI = 145;
  const TK_POW = 146;
  const TK_RADIANS = 147;
  const TK_ROUND = 148;
  const TK_SIGN = 149;
  const TK_SIN = 150;
  const TK_SQRT = 151;
  const TK_TAN = 152;
  const TK_TRUNCATE = 153;
  const TK_DAYOFWEEK = 154;
  const TK_DAYOFYEAR = 155;
  const TK_NOW = 156;
  const TK_WEEKDAY = 157;
  const TK_WEEKOFYEAR = 158;
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
  const YYNOCODE = 328;
#define ParseTOKENTYPE void*
  const YYSTACKDEPTH = 100;
  const YYNSTATE = 748;
  const YYNRULE = 415;
  const YYERRORSYMBOL = 159;

  /* QUESTE LE HO AGGIUNTE IO */
  const   YYWILDCARD = 0;
  public $operations_list= Array();
  /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
  var $YY_NO_ACTION;
  var $YY_ACCEPT_ACTION;
  var $YY_ERROR_ACTION;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static $yy_action = array(
 /*     0 */   478,  407,  707,  442,  459,  272,  440,  271,  441,  462,
 /*    10 */   444,  257,  233,  381,  560,  561,  562,  384,  258,  261,
 /*    20 */   684,  262,  398,  400,  402,  697,  698,  404,  700,  406,
 /*    30 */   437,  702,  703,  197,  709,  437,  841,  122,  443,   16,
 /*    40 */   634,   92,  449,   73,  205,  209,  210,  460,   75,  376,
 /*    50 */   667,  668,  669,  670,  671,  672,  254,  687,  688,  103,
 /*    60 */   116,  712,  713,  714,  715,  716,  415,  247,  330,  564,
 /*    70 */   556,  331,  437,  563,  565,  566,  136,  255,  249,  245,
 /*    80 */   546,  497,  190,  244,  498,  499,  500,  451,  453,  454,
 /*    90 */   333,  456,  457,  458,  273,  466,  277,  708,  471,  246,
 /*   100 */   242,  492,  238,  285,  286,  661,  494,  437,  477,  479,
 /*   110 */   480,  478,  637,  370,  442,  459,  272,  440,  271,  441,
 /*   120 */   462,  444,   15,   91,   28,  192,  284,  118,  552,  488,
 /*   130 */   490,  491, 1164,  430,  199,  437,  432,  433,  434,  710,
 /*   140 */   410,  591,  720,  266,  651,  652,  653,  659,  660,  196,
 /*   150 */   663,  431,  199,  449,  432,  433,  434,  132,  460,   75,
 /*   160 */   473,  437,  438,  439,  443,  437,  447,  448,  443,   71,
 /*   170 */   132,  116,  551,   72,  553,  554,  435,  436,  247,  330,
 /*   180 */   564,  556,  331,   67,  563,  565,  566,  136,  127,  249,
 /*   190 */   245,  546,  497,  190,  244,  498,  499,  500,  451,  453,
 /*   200 */   454,  333,  456,  457,  458,  273,  466,  277,  184,  471,
 /*   210 */   246,  242,  335,  241,  285,  286,  128,  494,  356,  477,
 /*   220 */   479,  480,  437,  438,  439,  443,  447,  448,   76,   77,
 /*   230 */     2,  558,  461,  274,  468,  469,  192,  559,  118,  442,
 /*   240 */   488,  490,  491,  445,  441,  189,  446,  442,  459,  272,
 /*   250 */   440,  271,  441,  462,  444,  328,  322,  317,  320,  321,
 /*   260 */   325,  636,  560,  561,  562,   13,  100,  341,  447,  448,
 /*   270 */   315,  619,   12,  134,  438,  439,  628,  629,  630,  770,
 /*   280 */   611,  612,  613,  725,  770,  642,  449,  732,  733,  734,
 /*   290 */   735,  460,   75,  461,  274,  468,  469,  355,  611,  612,
 /*   300 */   613,  725,  189,  121,  470,  732,  733,  734,  735,  711,
 /*   310 */   728,  717,  133,  650,  654,  655,  656,  657,  658,  447,
 /*   320 */   448,  664,   13,  100,  103,  549,  143,  244,  498,  499,
 /*   330 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*   340 */   277,   19,  471,  472,  461,  121,  496,  287,  288,  289,
 /*   350 */   290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
 /*   360 */   300,  301,  302,  303,  304,  305,  307,  308,  309,  310,
 /*   370 */   311,  312,  313,  314,  318,  319,  323,  326,  327,  437,
 /*   380 */   438,  439,  443,  437,  438,  439,  443,   72,  329,  334,
 /*   390 */   340,   71,  568,  569,  570,  571,  572,  573,  574, 1025,
 /*   400 */   437,    4,   14,  443,  442,  459,  272,  440,  271,  441,
 /*   410 */   462,  444,  328,  322,  317,  320,  321,  325,  442, 1025,
 /*   420 */   603,  604,  463,  441,  483,  447,  448,  315,   21,  447,
 /*   430 */   448,  284, 1025,  552, 1025,  442, 1025, 1025,  337,  463,
 /*   440 */   441,   96,  575,  449,  615,  616,  617,  662,  460,   75,
 /*   450 */   461,  274,  468,  469,  461,  274,  468,  469,  442,  189,
 /*   460 */   135,  470,  463,  441,   96,  602,  251,  614,  616,  617,
 /*   470 */   712,  713,  714,  715,  716,  411,  366,  343,  704,   13,
 /*   480 */   100,  408,  741,  190,  244,  498,  499,  500,  451,  453,
 /*   490 */   454,  455,  456,  457,  458,  273,  466,  277,  442,  471,
 /*   500 */   472,  643,  481,  441,  287,  288,  289,  290,  291,  292,
 /*   510 */   293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
 /*   520 */   303,  304,  305,  307,  308,  309,  310,  311,  312,  313,
 /*   530 */   314,  318,  319,  323,  326,  327,  437,  438,  439,  443,
 /*   540 */   206,  253,  437, 1025,    1,  618,  442,  115,  272,  440,
 /*   550 */   445,  441,  437,  444,  620,  443,  437,  344,  437,  443,
 /*   560 */    72,  443,  740,   26,   66,  284,   72,  552,  505,  328,
 /*   570 */   322,  317,  320,  321,  325,  284, 1025,  552, 1025,  745,
 /*   580 */  1025, 1025,  447,  448,  315,  449,   12,  442,   37,  272,
 /*   590 */   440,  445,  441,  279,  444,   94,  426,  104,  354,   40,
 /*   600 */   208,  644,  645,  372,  517,  447,  448,  461,  274,  468,
 /*   610 */   469, 1060,  367,  631,  632,  368, 1060,   97,  964,  964,
 /*   620 */   442,  482, 1059, 1059,  481,  441,  449,  375,   78,  964,
 /*   630 */   447,  448,  189, 1059,   79,  212,  189,  379,  189,  549,
 /*   640 */     9,  447,  448,  442,  730,  252,  747,  463,  441,  598,
 /*   650 */   592, 1019,   13,  100,  341,  726,   13,  100,   13,  100,
 /*   660 */   341,  287,  288,  289,  290,  291,  292,  293,  294,  295,
 /*   670 */   296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
 /*   680 */   307,  308,  309,  310,  311,  312,  313,  314,  318,  319,
 /*   690 */   323,  326,  327,  437,  438,  439,  443,  964,  964, 1054,
 /*   700 */   577,   71, 1059, 1059,  442,  459,  272,  440,  271,  441,
 /*   710 */   462,  444,  727,    6,  437,  282,  442,  443,  272,  440,
 /*   720 */   445,  441,   73,  444,  438,  439,  328,  322,  317,  320,
 /*   730 */   321,  325, 1019,  743,  188,   68,   69,  108,  742,  447,
 /*   740 */   448,  315,  724,  449,  624,  625,  442,  365,  460,   75,
 /*   750 */   463,  441,  483,  647,  442,  449,  597,   10,  463,  441,
 /*   760 */   744,  470,  187,  186,  461,  274,  468,  469,  336,  330,
 /*   770 */   564,  556,  331,  544,  563,  565,  566,  136,  585,  495,
 /*   780 */   202,  546,  497,  190,  244,  498,  499,  500,  451,  453,
 /*   790 */   454,  333,  456,  457,  458,  273,  466,  277,  582,  471,
 /*   800 */   472,  259,  442,  260,  493,  280,  463,  441,  483,  360,
 /*   810 */    10,  621,   49,  580,   44,  583,  584,  525,  287,  288,
 /*   820 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*   830 */   299,  300,  301,  302,  303,  304,  305,  307,  308,  309,
 /*   840 */   310,  311,  312,  313,  314,  318,  319,  323,  326,  327,
 /*   850 */   437,  438,  439,  443,  447,  448,  447,  448,    1,  203,
 /*   860 */   442,  280,  272,  440,  445,  441,  216,  444,  387,    5,
 /*   870 */    46,  281,  964,  964, 1054,  442,  459,  272,  440,  271,
 /*   880 */   441,  462,  444,  328,  322,  317,  320,  321,  325,  442,
 /*   890 */   218,  437,  390,  463,  441,  483,  447,  448,  315,  449,
 /*   900 */   220,  442,  393,  272,  440,  445,  441,  502,  444,  198,
 /*   910 */   746,  428,  447,  448,  449,  204,  222,  364,  396,  460,
 /*   920 */    75,  461,  274,  468,  469,  357,  639,  283,  600,  442,
 /*   930 */   955,  638,  470,  463,  441,  744,  503,  442, 1054, 1054,
 /*   940 */   649,  481,  441,   99,  447,  448,  129,  225,  338, 1054,
 /*   950 */   253,  648,  689,  549,  144,  244,  498,  499,  500,  451,
 /*   960 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  623,
 /*   970 */   471,  472,  127,  447,  448,  287,  288,  289,  290,  291,
 /*   980 */   292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
 /*   990 */   302,  303,  304,  305,  307,  308,  309,  310,  311,  312,
 /*  1000 */   313,  314,  318,  319,  323,  326,  327,  437,  438,  439,
 /*  1010 */   443,  504,  227,   76,   77,    3,  442,  693, 1054, 1054,
 /*  1020 */   463,  441,  483,  626,  339,  195,  442,  130,  272,  440,
 /*  1030 */   445,  441,  279,  444,  369,  371,  635,  641,  665,  674,
 /*  1040 */   328,  322,  317,  320,  321,  325,  442,  692,  447,  448,
 /*  1050 */   463,  441,  464,  447,  448,  315,  437,  438,  439,  443,
 /*  1060 */   487,  666,  229,  378,   71,  449,  442,  695,  272,  440,
 /*  1070 */   445,  441,  380,  444,  373,  374,  383,  506,  461,  274,
 /*  1080 */   468,  469,  507,  729,  385,  739,  428,  691,  386,  328,
 /*  1090 */   322,  317,  320,  321,  325,  442,  388,  263,  389,  463,
 /*  1100 */   441,  484,  447,  448,  315,  449,  391,  442,  392,  394,
 /*  1110 */   549,  463,  441,  599,  447,  448,  399,  416,  395,  447,
 /*  1120 */   448,  763,  722,  237,  397,  609,  763,  461,  274,  468,
 /*  1130 */   469,  508,  287,  288,  289,  290,  291,  292,  293,  294,
 /*  1140 */   295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
 /*  1150 */   305,  307,  308,  309,  310,  311,  312,  313,  314,  318,
 /*  1160 */   319,  323,  326,  327,  437,  264,  265,  443,  447,  448,
 /*  1170 */   401,  403,   72,  405,  408,  719,  705,  721,  420,   98,
 /*  1180 */     8,  287,  288,  289,  290,  291,  292,  293,  294,  295,
 /*  1190 */   296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
 /*  1200 */   307,  308,  309,  310,  311,  312,  313,  314,  318,  319,
 /*  1210 */   323,  326,  327,  437,  438,  439,  443,  107,  421,  509,
 /*  1220 */   412,   71,  413,  267,  442,  459,  272,  440,  271,  441,
 /*  1230 */   462,  444,  417,  736,  764,  124,  510,  189,  125,  275,
 /*  1240 */    81,  511,  276,  465,  189,  191,  328,  322,  317,  320,
 /*  1250 */   321,  325,  110,  126,   80,  485,  447,  448,  111,  447,
 /*  1260 */   448,  315,  486,  449,   13,  100,  341,   89,  460,   75,
 /*  1270 */  1053,   22,   23,  447,  448,  363,   24,  419,  447,  448,
 /*  1280 */   423,  470,   25,   27,  461,  274,  468,  469,  359,  330,
 /*  1290 */   564,  556,  331,   29,  563,  565,  566,  136,  512,  495,
 /*  1300 */    30,  546,  497,  190,  244,  498,  499,  500,  451,  453,
 /*  1310 */   454,  333,  456,  457,  458,  273,  466,  277,   31,  471,
 /*  1320 */   472,   32,  437,   33,   11,  443,   34,   35,   36,   38,
 /*  1330 */    72,   39,   41,   90,  513,  447,  448,   42,  287,  288,
 /*  1340 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*  1350 */   299,  300,  301,  302,  303,  304,  305,  307,  308,  309,
 /*  1360 */   310,  311,  312,  313,  314,  318,  319,  323,  326,  327,
 /*  1370 */   478,  447,  448,  442,  459,  272,  440,  271,  441,  462,
 /*  1380 */   444,  442,   43,  272,  440,  445,  441,  514,  444,  442,
 /*  1390 */   306,  272,  440,  445,  441,  515,  444,  516,  522,  518,
 /*  1400 */    45,   47,  189,  519,  532,  520,  539,  521,   48,   50,
 /*  1410 */    51,   52,  449,   53,   54,   56,  316,  460,   75,   57,
 /*  1420 */   449,   58,   13,  100,  447,  448,   59,   60,  449,   61,
 /*  1430 */   116,  324,  447,  448,  447,  448,  447,  448,   70,   62,
 /*  1440 */   447,  448,  447,  448,  447,  448,  427,   63,  545,  245,
 /*  1450 */    64,  497,  190,  244,  498,  499,  500,  451,  453,  454,
 /*  1460 */   455,  456,  457,  458,  273,  466,  277,  523,  471,  246,
 /*  1470 */   242,  492,  238,  285,  286,  524,  494,  526,  477,  479,
 /*  1480 */   480,  442,  459,  272,  440,  271,  441,  462,  444,  578,
 /*  1490 */   527,   10,  528,   55,  529,  192,  530,  118,   65,  488,
 /*  1500 */   490,  491,  531,  142,  447,  448,  533,  576,  248,  112,
 /*  1510 */   581,  579,  447,  448,  447,  448,  113,  342,  587,  590,
 /*  1520 */   449,  123,  250,  593,   20,  460,   75,  447,  448,  447,
 /*  1530 */   448,  447,  448,  447,  448,  447,  448,  594,  470,  447,
 /*  1540 */   448,  534,   17,  447,  448,  362,  330,  564,  556,  331,
 /*  1550 */    93,  563,  565,  566,  136,  535,  495,  536,  546,  497,
 /*  1560 */   190,  244,  498,  499,  500,  451,  453,  454,  333,  456,
 /*  1570 */   457,  458,  273,  466,  277,  537,  471,  472,  447,  448,
 /*  1580 */   442,  459,  272,  440,  271,  441,  462,  444,   95,  538,
 /*  1590 */   622,  540,  447,  448,  447,  448,  541,  101,  542,  102,
 /*  1600 */   207,  543,  627,  633,  186,  640,  114,  187,  646,    7,
 /*  1610 */   377,  673,  447,  448,  211,  213,  382,  701,  675,  449,
 /*  1620 */   214,  409,  676,  215,  460,   75,  447,  448,  447,  448,
 /*  1630 */   677,  236,  678,  447,  448,  447,  448,  470,  447,  448,
 /*  1640 */   217,  706,  679,  219,  256,  330,  564,  556,  331,  680,
 /*  1650 */   563,  565,  566,  136,  681,  495,  682,  546,  497,  190,
 /*  1660 */   244,  498,  499,  500,  451,  453,  454,  333,  456,  457,
 /*  1670 */   458,  273,  466,  277,  221,  471,  472,  683,  685,  223,
 /*  1680 */   131,  686,  224,  842,  690,  226,  731,  694,  442,  459,
 /*  1690 */   272,  440,  271,  441,  462,  444,  228,  106,  105,  696,
 /*  1700 */   230,  109,  699,  231,  232,  744,  718,  414,  418,   74,
 /*  1710 */   234,  235,  744,  744,  723,  744,  738,  744,  744,  744,
 /*  1720 */   744,   18,  744,  744,  744,  744,  744,  449,  744,  744,
 /*  1730 */   744,  744,  460,   75,  744,  744,  744,  744,  744,  744,
 /*  1740 */   744,  744,  744,  744,  744,  470,  744,  744,  744,  744,
 /*  1750 */   744,  744,  422,  330,  564,  556,  331,  744,  563,  565,
 /*  1760 */   566,  136,  744,  495,  744,  546,  497,  190,  244,  498,
 /*  1770 */   499,  500,  451,  453,  454,  333,  456,  457,  458,  273,
 /*  1780 */   466,  277,  744,  471,  472,  744,  744,  442,  459,  272,
 /*  1790 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  1800 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  1810 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  1820 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  1830 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  1840 */   744,  744,  744,  744,  470,  744,  744,  744,  744,  744,
 /*  1850 */   744,  429,  330,  564,  556,  331,  744,  563,  565,  566,
 /*  1860 */   136,  744,  495,  744,  546,  497,  190,  244,  498,  499,
 /*  1870 */   500,  451,  453,  454,  333,  456,  457,  458,  273,  466,
 /*  1880 */   277,  744,  471,  472,  744,  744,  744,  744,  744,  744,
 /*  1890 */   744,  744,  744,  744,  744,  442,  459,  272,  440,  271,
 /*  1900 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  1910 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  1920 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  1930 */   744,  744,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  1940 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  1950 */   744,  744,  470,  744,  744,  744,  744,  744,  744,  744,
 /*  1960 */   332,  564,  556,  331,  744,  563,  565,  566,  136,  744,
 /*  1970 */   495,  744,  546,  497,  190,  244,  498,  499,  500,  451,
 /*  1980 */   453,  454,  333,  456,  457,  458,  273,  466,  277,  744,
 /*  1990 */   471,  472,  744,  744,  442,  459,  272,  440,  271,  441,
 /*  2000 */   462,  444,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2010 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2020 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2030 */   744,  744,  744,  449,  744,  744,  744,  744,  460,   75,
 /*  2040 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2050 */   744,  470,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2060 */   555,  556,  331,  744,  563,  565,  566,  136,  744,  495,
 /*  2070 */   744,  546,  497,  190,  244,  498,  499,  500,  451,  453,
 /*  2080 */   454,  333,  456,  457,  458,  273,  466,  277,  744,  471,
 /*  2090 */   472,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2100 */   744,  744,  442,  459,  272,  440,  271,  441,  462,  444,
 /*  2110 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2120 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2130 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2140 */   744,  449,  744,  744,  744,  744,  460,   75,  744,  744,
 /*  2150 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  470,
 /*  2160 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  557,
 /*  2170 */   331,  744,  563,  565,  566,  136,  744,  495,  744,  546,
 /*  2180 */   497,  190,  244,  498,  499,  500,  451,  453,  454,  333,
 /*  2190 */   456,  457,  458,  273,  466,  277,  744,  471,  472,  744,
 /*  2200 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  2210 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2220 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2230 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2240 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  2250 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  2260 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2270 */   744,  744,  744,  744,  548,  744,  495,  744,  546,  497,
 /*  2280 */   190,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  2290 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  2300 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  442,
 /*  2310 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  2320 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2330 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  547,
 /*  2340 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  2350 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  2360 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  442,
 /*  2370 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  2380 */   744,  744,  744,  744,  744,  744,  744,  119,  190,  244,
 /*  2390 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  2400 */   353,  466,  277,  744,  471,  472,  744,  744,  449,  744,
 /*  2410 */   744,  744,  744,  460,   75,  744,  744,   88,  744,  744,
 /*  2420 */   610,  596,  744,  744,  744,  744,  470,  744,  744,  744,
 /*  2430 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2440 */   744,  744,  567,  744,  495,  744,  546,  497,  190,  244,
 /*  2450 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  2460 */   273,  466,  277,  744,  471,  472,  744,  744,  744,  744,
 /*  2470 */   744,  744,  744,  744,  744,  744,  744,  442,  459,  272,
 /*  2480 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  2490 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2500 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2510 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  2520 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  2530 */   744,  744,  744,  744,  470,  744,  744,  442,  459,  272,
 /*  2540 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  2550 */   744,  744,  744,  744,  744,  119,  190,  244,  498,  499,
 /*  2560 */   500,  451,  453,  454,  455,  456,  457,  458,  353,  466,
 /*  2570 */   277,  744,  471,  472,  744,  744,  449,  744,  744,  744,
 /*  2580 */   744,  460,   75,  744,  744,  744,  744,  744,  595,  596,
 /*  2590 */   744,  744,  744,  744,  470,  744,  744,  744,  744,  744,
 /*  2600 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2610 */   744,  744,  744,  744,  744,  194,  190,  244,  498,  499,
 /*  2620 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  2630 */   277,  744,  471,  472,  744,  744,  744,  744,  744,  744,
 /*  2640 */   744,  744,  744,  744,  744,  442,  459,  272,  440,  271,
 /*  2650 */   441,  462,  444,  744,  744,  744,  358,  605,  744,  744,
 /*  2660 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2670 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2680 */   744,  744,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  2690 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2700 */   744,  744,  470,  744,  744,  442,  459,  272,  440,  271,
 /*  2710 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  2720 */   501,  744,  744,  497,  190,  244,  498,  499,  500,  451,
 /*  2730 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  2740 */   471,  472,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  2750 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2760 */   744,  744,  470,  744,  744,  744,  744,  744,  744,  744,
 /*  2770 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2780 */   744,  744,  744,  194,  190,  244,  498,  499,  500,  451,
 /*  2790 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  2800 */   471,  472,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2810 */   744,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  2820 */   444,  744,  744,  744,  744,  601,  744,  744,  744,  744,
 /*  2830 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2840 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2850 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  2860 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2870 */   470,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  2880 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2890 */   744,  352,  190,  244,  498,  499,  500,  451,  453,  454,
 /*  2900 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  2910 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  2920 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2930 */   470,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2940 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2950 */   744,  744,  145,  244,  498,  499,  500,  451,  453,  454,
 /*  2960 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  2970 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  2980 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  2990 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3000 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3010 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3020 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  3030 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  3040 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  3050 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3060 */   139,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  3070 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  3080 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  3090 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  3100 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3110 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3120 */   146,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  3130 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  3140 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  442,
 /*  3150 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  3160 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3170 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3180 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  3190 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  3200 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  442,
 /*  3210 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  3220 */   744,  744,  744,  744,  744,  744,  744,  744,  147,  244,
 /*  3230 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  3240 */   273,  466,  277,  744,  471,  472,  744,  744,  449,  744,
 /*  3250 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  3260 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  744,
 /*  3270 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3280 */   744,  744,  744,  744,  744,  744,  744,  744,  148,  244,
 /*  3290 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  3300 */   273,  466,  277,  744,  471,  472,  744,  744,  744,  744,
 /*  3310 */   744,  744,  744,  744,  744,  744,  744,  442,  459,  272,
 /*  3320 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  3330 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3340 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3350 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  3360 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  3370 */   744,  744,  744,  744,  470,  744,  744,  442,  459,  272,
 /*  3380 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  3390 */   744,  744,  744,  744,  744,  744,  149,  244,  498,  499,
 /*  3400 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  3410 */   277,  744,  471,  472,  744,  744,  449,  744,  744,  744,
 /*  3420 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  3430 */   744,  744,  744,  744,  470,  744,  744,  744,  744,  744,
 /*  3440 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3450 */   744,  744,  744,  744,  744,  744,  150,  244,  498,  499,
 /*  3460 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  3470 */   277,  744,  471,  472,  744,  744,  744,  744,  744,  744,
 /*  3480 */   744,  744,  744,  744,  744,  442,  459,  272,  440,  271,
 /*  3490 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  3500 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3510 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3520 */   744,  744,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  3530 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3540 */   744,  744,  470,  744,  744,  442,  459,  272,  440,  271,
 /*  3550 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  3560 */   744,  744,  744,  744,  151,  244,  498,  499,  500,  451,
 /*  3570 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  3580 */   471,  472,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  3590 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3600 */   744,  744,  470,  744,  744,  744,  744,  744,  744,  744,
 /*  3610 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3620 */   744,  744,  744,  744,  152,  244,  498,  499,  500,  451,
 /*  3630 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  3640 */   471,  472,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3650 */   744,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  3660 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3670 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3680 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3690 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  3700 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3710 */   470,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  3720 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3730 */   744,  744,  153,  244,  498,  499,  500,  451,  453,  454,
 /*  3740 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  3750 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  3760 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3770 */   470,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3780 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3790 */   744,  744,  154,  244,  498,  499,  500,  451,  453,  454,
 /*  3800 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  3810 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3820 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  3830 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3840 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3850 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3860 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  3870 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  3880 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  3890 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3900 */   155,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  3910 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  3920 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  3930 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  3940 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3950 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  3960 */   156,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  3970 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  3980 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  442,
 /*  3990 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  4000 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4010 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4020 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  4030 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  4040 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  442,
 /*  4050 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  4060 */   744,  744,  744,  744,  744,  744,  744,  744,  157,  244,
 /*  4070 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  4080 */   273,  466,  277,  744,  471,  472,  744,  744,  449,  744,
 /*  4090 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  4100 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  744,
 /*  4110 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4120 */   744,  744,  744,  744,  744,  744,  744,  744,  158,  244,
 /*  4130 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  4140 */   273,  466,  277,  744,  471,  472,  744,  744,  744,  744,
 /*  4150 */   744,  744,  744,  744,  744,  744,  744,  442,  459,  272,
 /*  4160 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  4170 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4180 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4190 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  4200 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  4210 */   744,  744,  744,  744,  470,  744,  744,  442,  459,  272,
 /*  4220 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  4230 */   744,  744,  744,  744,  744,  744,  140,  244,  498,  499,
 /*  4240 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  4250 */   277,  744,  471,  472,  744,  744,  449,  744,  744,  744,
 /*  4260 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  4270 */   744,  744,  744,  744,  470,  744,  744,  744,  744,  744,
 /*  4280 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4290 */   744,  744,  744,  744,  744,  744,  159,  244,  498,  499,
 /*  4300 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  4310 */   277,  744,  471,  472,  744,  744,  744,  744,  744,  744,
 /*  4320 */   744,  744,  744,  744,  744,  442,  459,  272,  440,  271,
 /*  4330 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  4340 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4350 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4360 */   744,  744,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  4370 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4380 */   744,  744,  470,  744,  744,  442,  459,  272,  440,  271,
 /*  4390 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  4400 */   744,  744,  744,  744,  160,  244,  498,  499,  500,  451,
 /*  4410 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  4420 */   471,  472,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  4430 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4440 */   744,  744,  470,  744,  744,  744,  744,  744,  744,  744,
 /*  4450 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4460 */   744,  744,  744,  744,  161,  244,  498,  499,  500,  451,
 /*  4470 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  4480 */   471,  472,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4490 */   744,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  4500 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4510 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4520 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4530 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  4540 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4550 */   470,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  4560 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4570 */   744,  744,  162,  244,  498,  499,  500,  451,  453,  454,
 /*  4580 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  4590 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  4600 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4610 */   470,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4620 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4630 */   744,  744,  163,  244,  498,  499,  500,  451,  453,  454,
 /*  4640 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  4650 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4660 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  4670 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4680 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4690 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4700 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  4710 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  4720 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  4730 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4740 */   164,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  4750 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  4760 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  4770 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  4780 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4790 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4800 */   165,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  4810 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  4820 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  442,
 /*  4830 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  4840 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4850 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4860 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  4870 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  4880 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  442,
 /*  4890 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  4900 */   744,  744,  744,  744,  744,  744,  744,  744,  166,  244,
 /*  4910 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  4920 */   273,  466,  277,  744,  471,  472,  744,  744,  449,  744,
 /*  4930 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  4940 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  744,
 /*  4950 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  4960 */   744,  744,  744,  744,  744,  744,  744,  744,  141,  244,
 /*  4970 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  4980 */   273,  466,  277,  744,  471,  472,  744,  744,  744,  744,
 /*  4990 */   744,  744,  744,  744,  744,  744,  744,  442,  459,  272,
 /*  5000 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  5010 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5020 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5030 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  5040 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  5050 */   744,  744,  744,  744,  470,  744,  744,  442,  459,  272,
 /*  5060 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  5070 */   744,  744,  744,  744,  744,  744,  167,  244,  498,  499,
 /*  5080 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  5090 */   277,  744,  471,  472,  744,  744,  449,  744,  744,  744,
 /*  5100 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  5110 */   744,  744,  744,  744,  470,  744,  744,  744,  744,  744,
 /*  5120 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5130 */   744,  744,  744,  744,  744,  744,  168,  244,  498,  499,
 /*  5140 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  5150 */   277,  744,  471,  472,  744,  744,  744,  744,  744,  744,
 /*  5160 */   744,  744,  744,  744,  744,  442,  459,  272,  440,  271,
 /*  5170 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  5180 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5190 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5200 */   744,  744,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  5210 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5220 */   744,  744,  470,  744,  744,  442,  459,  272,  440,  271,
 /*  5230 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  5240 */   744,  744,  744,  744,  169,  244,  498,  499,  500,  451,
 /*  5250 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  5260 */   471,  472,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  5270 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5280 */   744,  744,  470,  744,  744,  744,  744,  744,  744,  744,
 /*  5290 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5300 */   744,  744,  744,  744,  170,  244,  498,  499,  500,  451,
 /*  5310 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  5320 */   471,  472,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5330 */   744,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  5340 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5350 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5360 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5370 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  5380 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5390 */   470,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  5400 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5410 */   744,  744,  171,  244,  498,  499,  500,  451,  453,  454,
 /*  5420 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  5430 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  5440 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5450 */   470,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5460 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5470 */   744,  744,  172,  244,  498,  499,  500,  451,  453,  454,
 /*  5480 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  5490 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5500 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  5510 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5520 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5530 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5540 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  5550 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  5560 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  5570 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5580 */   173,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  5590 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  5600 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  5610 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  744,
 /*  5620 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5630 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5640 */   174,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  5650 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  5660 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  442,
 /*  5670 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  5680 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5690 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5700 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  5710 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  5720 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  442,
 /*  5730 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  5740 */   744,  744,  744,  744,  744,  744,  744,  744,  175,  244,
 /*  5750 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  5760 */   273,  466,  277,  744,  471,  472,  744,  744,  449,  744,
 /*  5770 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  5780 */   744,  744,  744,  744,  744,  744,  470,  744,  744,  744,
 /*  5790 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5800 */   744,  744,  744,  744,  744,  744,  744,  744,  176,  244,
 /*  5810 */   498,  499,  500,  451,  453,  454,  455,  456,  457,  458,
 /*  5820 */   273,  466,  277,  744,  471,  472,  744,  744,  744,  744,
 /*  5830 */   744,  744,  744,  744,  744,  744,  744,  442,  459,  272,
 /*  5840 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  5850 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5860 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5870 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  5880 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  5890 */   744,  744,  744,  744,  470,  744,  744,  442,  459,  272,
 /*  5900 */   440,  271,  441,  462,  444,  744,  744,  744,  744,  744,
 /*  5910 */   744,  744,  744,  744,  744,  744,  177,  244,  498,  499,
 /*  5920 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  5930 */   277,  744,  471,  472,  744,  744,  449,  744,  744,  744,
 /*  5940 */   744,  460,   75,  744,  744,  744,  744,  744,  744,  744,
 /*  5950 */   744,  744,  744,  744,  470,  744,  744,  744,  744,  744,
 /*  5960 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  5970 */   744,  744,  744,  744,  744,  744,  178,  244,  498,  499,
 /*  5980 */   500,  451,  453,  454,  455,  456,  457,  458,  273,  466,
 /*  5990 */   277,  744,  471,  472,  744,  744,  744,  744,  744,  744,
 /*  6000 */   744,  744,  744,  744,  744,  442,  459,  272,  440,  271,
 /*  6010 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  6020 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6030 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6040 */   744,  744,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  6050 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6060 */   744,  744,  470,  744,  744,  442,  459,  272,  440,  271,
 /*  6070 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  6080 */   744,  744,  744,  744,  179,  244,  498,  499,  500,  451,
 /*  6090 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  6100 */   471,  472,  744,  744,  449,  744,  744,  744,  744,  460,
 /*  6110 */    75,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6120 */   744,  744,  470,  744,  744,  744,  744,  744,  744,  744,
 /*  6130 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6140 */   744,  744,  744,  744,  180,  244,  498,  499,  500,  451,
 /*  6150 */   453,  454,  455,  456,  457,  458,  273,  466,  277,  744,
 /*  6160 */   471,  472,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6170 */   744,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  6180 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6190 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6200 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6210 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  6220 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6230 */   470,  744,  744,  442,  459,  272,  440,  271,  441,  462,
 /*  6240 */   444,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6250 */   744,  744,  181,  244,  498,  499,  500,  451,  453,  454,
 /*  6260 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  6270 */   744,  744,  449,  744,  744,  744,  744,  460,   75,  744,
 /*  6280 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6290 */   470,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6300 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6310 */   744,  744,  182,  244,  498,  499,  500,  451,  453,  454,
 /*  6320 */   455,  456,  457,  458,  273,  466,  277,  744,  471,  472,
 /*  6330 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6340 */   744,  442,  459,  272,  440,  271,  441,  462,  444,  744,
 /*  6350 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6360 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6370 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6380 */   449,  744,  744,  744,  744,  460,   75,  744,  744,  744,
 /*  6390 */   744,  744,  744,  744,  744,  744,  744,  744,  470,  478,
 /*  6400 */   744,  744,  442,  744,  272,  440,  268,  441,  483,  444,
 /*  6410 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6420 */   183,  244,  498,  499,  500,  451,  453,  454,  455,  456,
 /*  6430 */   457,  458,  273,  466,  277,  744,  471,  472,  744,  744,
 /*  6440 */   744,  449,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6450 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  117,
 /*  6460 */   744,  424,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6470 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6480 */   744,  744,  744,  744,  744,  744,  744,  744,  442,  459,
 /*  6490 */   272,  440,  271,  441,  462,  444,  744,  744,  489,  242,
 /*  6500 */   335,  241,  285,  286,  744,  494,  744,  477,  479,  480,
 /*  6510 */   442,  459,  272,  440,  271,  441,  462,  444,  744,  744,
 /*  6520 */   744,  744,  744,  744,  192,  744,  118,  449,  488,  490,
 /*  6530 */   491,  744,  460,   75,  744,  744,  744,  744,  744,  744,
 /*  6540 */   744,  744,  744,  744,  744,  470,  744,  744,  744,  449,
 /*  6550 */   744,  744,  744,  744,  460,   75,  425,  744,  744,  744,
 /*  6560 */   744,  744,  744,  744,  744,  744,  744,  470,  243,  744,
 /*  6570 */   744,  500,  451,  453,  454,  455,  456,  457,  458,  273,
 /*  6580 */   466,  277,  744,  471,  472,  744,  744,  744,  744,  744,
 /*  6590 */   744,  744,  744,  450,  451,  453,  454,  455,  456,  457,
 /*  6600 */   458,  273,  466,  277,  744,  471,  472,  744,  744,  442,
 /*  6610 */   459,  272,  440,  271,  441,  462,  444,  744,  744,  744,
 /*  6620 */   744,  744,  744,  744,  744,  744,  478,  744,  744,  442,
 /*  6630 */   744,  272,  440,  445,  441,  744,  444,  744,  744,  744,
 /*  6640 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  6650 */   744,  744,  744,  460,   75,  744,  744,  744,  744,  744,
 /*  6660 */   744,  744,  744,  744,  478,  744,  470,  442,  449,  272,
 /*  6670 */   440,  445,  441,  744,  444,  744,  744,  478,  744,  744,
 /*  6680 */   442,  744,  272,  440,  445,  441,  117,  444,  744,  744,
 /*  6690 */   744,  744,  467,  451,  453,  454,  455,  456,  457,  458,
 /*  6700 */   273,  466,  277,  744,  471,  472,  449,  744,  744,  744,
 /*  6710 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  449,
 /*  6720 */   744,  744,  744,  744,  117,  489,  270,  492,  238,  285,
 /*  6730 */   286,  744,  494,  744,  477,  479,  480,  117,  744,  744,
 /*  6740 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6750 */   744,  192,  744,  118,  744,  488,  490,  491,  744,  744,
 /*  6760 */   744,  744,  744,  489,  242,  492,  238,  285,  286,  744,
 /*  6770 */   494,  744,  477,  479,  480,  744,  489,  242,  335,  241,
 /*  6780 */   285,  286,  737,  494,  744,  477,  479,  480,  744,  192,
 /*  6790 */   744,  118,  744,  488,  490,  491,  744,  744,  744,  744,
 /*  6800 */   744,  744,  192,  744,  118,  744,  488,  490,  491,  744,
 /*  6810 */   744,  744,  744,  478,  744,  744,  442,  744,  272,  440,
 /*  6820 */   445,  441,  744,  444,  744,  744,  744,  744,  744,  744,
 /*  6830 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6840 */   442,  459,  272,  440,  271,  441,  462,  444,  744,  744,
 /*  6850 */   744,  478,  744,  744,  442,  449,  272,  440,  445,  441,
 /*  6860 */   744,  444,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6870 */   744,  744,  744,  117,  744,  744,  744,  744,  744,  449,
 /*  6880 */   744,  744,  744,  744,  460,  744,  744,  744,  744,  744,
 /*  6890 */   744,  744,  744,  449,  744,  744,  744,  470,  744,  744,
 /*  6900 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  6910 */   744,  117,  489,  242,  492,  241,  285,  286,  744,  494,
 /*  6920 */   744,  477,  479,  480,  452,  453,  454,  455,  456,  457,
 /*  6930 */   458,  273,  466,  277,  744,  471,  472,  744,  192,  744,
 /*  6940 */   118,  744,  488,  490,  491,  744,  744,  744,  744,  744,
 /*  6950 */   489,  269,  492,  238,  285,  286,  744,  494,  744,  477,
 /*  6960 */   479,  480,  744,  744,  744,  744,  744,  478,  744,  744,
 /*  6970 */   442,  744,  272,  440,  445,  441,  192,  444,  118,  744,
 /*  6980 */   488,  490,  491,  744,  744,  744,  744,  744,  744,  744,
 /*  6990 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7000 */   744,  744,  744,  744,  744,  478,  744,  744,  442,  449,
 /*  7010 */   272,  440,  445,  441,  744,  444,  744,  744,  744,  744,
 /*  7020 */   744,  744,  744,  744,  744,  744,  744,  117,  744,  744,
 /*  7030 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7040 */   744,  744,  744,  744,  744,  744,  744,  449,  744,  744,
 /*  7050 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7060 */   744,  744,  744,  744,  744,  117,  489,  744,  744,  240,
 /*  7070 */   589,  278,   83,  494,  744,  477,  479,  480,  478,  744,
 /*  7080 */   744,  442,  744,  272,  440,  445,  441,  744,  444,  744,
 /*  7090 */   744,  744,  192,  744,  118,  744,  488,  490,  491,  744,
 /*  7100 */   744,  744,  744,  744,  489,  744,  744,  240,  589,  348,
 /*  7110 */    85,  494,  744,  477,  479,  480,  478,  744,  744,  442,
 /*  7120 */   449,  272,  440,  445,  441,  744,  444,  744,  744,  744,
 /*  7130 */   192,  744,  118,  744,  488,  490,  491,  744,  117,  744,
 /*  7140 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7150 */   744,  744,  744,  744,  744,  744,  744,  744,  449,  744,
 /*  7160 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7170 */   744,  744,  744,  744,  744,  744,  117,  489,  744,  744,
 /*  7180 */   240,  589,  345,   82,  494,  744,  477,  479,  480,  744,
 /*  7190 */   744,  744,  478,  744,  744,  442,  744,  272,  440,  445,
 /*  7200 */   441,  744,  444,  192,  744,  118,  744,  488,  490,  491,
 /*  7210 */   744,  744,  744,  744,  744,  489,  744,  744,  240,  589,
 /*  7220 */   349,   84,  494,  744,  477,  479,  480,  744,  744,  744,
 /*  7230 */   478,  744,  744,  442,  449,  272,  440,  445,  441,  744,
 /*  7240 */   444,  192,  744,  118,  744,  488,  490,  491,  744,  744,
 /*  7250 */   744,  744,  117,  744,  744,  744,  744,  744,  744,  744,
 /*  7260 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7270 */   744,  744,  449,  478,  744,  744,  442,  744,  272,  440,
 /*  7280 */   445,  441,  744,  444,  744,  744,  744,  744,  744,  744,
 /*  7290 */   117,  489,  744,  744,  239,  744,  744,   87,  586,  474,
 /*  7300 */   477,  479,  480,  744,  744,  744,  442,  744,  272,  440,
 /*  7310 */   271,  441,  462,  444,  744,  449,  744,  192,  744,  118,
 /*  7320 */   744,  488,  490,  491,  744,  744,  744,  744,  744,  489,
 /*  7330 */   744,  744,  239,  117,  744,   86,  586,  475,  477,  479,
 /*  7340 */   480,  744,  744,  744,  744,  449,  478,  744,  744,  442,
 /*  7350 */   744,  272,  440,  445,  441,  192,  444,  118,  744,  488,
 /*  7360 */   490,  491,  744,  470,  744,  744,  744,  744,  744,  744,
 /*  7370 */   744,  744,  489,  744,  744,  240,  589,  346,  744,  494,
 /*  7380 */   744,  477,  479,  480,  478,  744,  744,  442,  449,  272,
 /*  7390 */   440,  445,  441,  607,  444,  744,  744,  273,  192,  744,
 /*  7400 */   118,  471,  488,  490,  491,  744,  117,  744,  744,  744,
 /*  7410 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7420 */   744,  744,  744,  744,  744,  744,  449,  744,  744,  744,
 /*  7430 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7440 */   744,  744,  361,  608,  117,  489,  744,  744,  240,  589,
 /*  7450 */   347,  744,  494,  744,  477,  479,  480,  744,  744,  478,
 /*  7460 */   744,  744,  442,  744,  272,  440,  445,  441,  744,  444,
 /*  7470 */   744,  192,  744,  118,  744,  488,  490,  491,  744,  744,
 /*  7480 */   744,  744,  744,  489,  744,  744,  240,  589,  350,  744,
 /*  7490 */   494,  744,  477,  479,  480,  744,  744,  478,  744,  744,
 /*  7500 */   442,  449,  272,  440,  445,  441,  744,  444,  744,  192,
 /*  7510 */   744,  118,  744,  488,  490,  491,  744,  744,  744,  117,
 /*  7520 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7530 */   744,  744,  744,  744,  744,  744,  744,  478,  744,  449,
 /*  7540 */   442,  744,  272,  440,  445,  441,  744,  444,  744,  744,
 /*  7550 */   744,  744,  744,  744,  744,  744,  744,  117,  489,  744,
 /*  7560 */   744,  240,  589,  351,  744,  494,  744,  477,  479,  480,
 /*  7570 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  449,
 /*  7580 */   744,  744,  744,  744,  192,  744,  118,  744,  488,  490,
 /*  7590 */   491,  744,  744,  744,  744,  744,  489,  117,  744,  239,
 /*  7600 */   744,  744,  744,  586,  476,  477,  479,  480,  744,  744,
 /*  7610 */   744,  744,  442,  744,  272,  440,  445,  441,  744,  444,
 /*  7620 */   744,  744,  192,  744,  118,  744,  488,  490,  491,  744,
 /*  7630 */   744,  744,  744,  744,  744,  744,  489,  744,  744,  239,
 /*  7640 */   744,  744,  744,  586,  588,  477,  479,  480,  744,  744,
 /*  7650 */   744,  449,  744,  744,  744,  744,  442,  744,  272,  440,
 /*  7660 */   445,  441,  192,  444,  118,  744,  488,  490,  491,  117,
 /*  7670 */   442,  744,  272,  440,  445,  441,  744,  444,  744,  744,
 /*  7680 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7690 */   744,  744,  744,  744,  744,  449,  744,  744,  744,  744,
 /*  7700 */   744,  744,  744,  744,  744,  744,  744,  744,  489,  449,
 /*  7710 */   744,  550,  744,  117,  744,  442,  744,  272,  440,  445,
 /*  7720 */   441,  200,  444,  744,  744,  744,  201,  117,  744,  744,
 /*  7730 */   744,  744,  744,  744,  185,  744,  118,  744,  488,  490,
 /*  7740 */   491,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7750 */   744,  744,  489,  744,  449,  550,  442,  744,  272,  440,
 /*  7760 */   445,  441,  744,  444,  744,  744,  489,  744,  744,  550,
 /*  7770 */   744,  744,  117,  744,  744,  744,  744,  744,  193,  744,
 /*  7780 */   118,  744,  488,  490,  491,  744,  744,  744,  744,  744,
 /*  7790 */   744,  744,  120,  744,  118,  449,  488,  490,  491,  744,
 /*  7800 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7810 */   744,  489,  744,  117,  550,  442,  744,  272,  440,  271,
 /*  7820 */   441,  462,  444,  744,  744,  744,  744,  744,  744,  744,
 /*  7830 */   744,  744,  744,  744,  744,  744,  744,  137,  744,  118,
 /*  7840 */   744,  488,  490,  491,  744,  744,  744,  744,  744,  744,
 /*  7850 */   744,  744,  489,  744,  449,  550,  744,  744,  744,  744,
 /*  7860 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7870 */   744,  744,  470,  744,  744,  744,  744,  744,  138,  744,
 /*  7880 */   118,  744,  488,  490,  491,  744,  744,  744,  744,  744,
 /*  7890 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7900 */   744,  744,  607,  744,  744,  744,  273,  744,  744,  744,
 /*  7910 */   471,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7920 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7930 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7940 */   744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
 /*  7950 */   744,  744,  606,
);
static $yy_lookahead = array(
 /*     0 */   164,  197,  198,  167,  168,  169,  170,  171,  172,  173,
 /*    10 */   174,    7,   10,    9,  106,  107,  108,   13,   14,   15,
 /*    20 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*    30 */     2,   27,   28,   29,   30,    2,   34,   33,    5,    6,
 /*    40 */   223,    6,  206,   10,  179,  228,  229,  211,  212,  184,
 /*    50 */   185,  186,  187,  188,  189,  190,    8,  192,  193,   51,
 /*    60 */   224,   35,   36,   37,   38,   39,   40,  231,  232,  233,
 /*    70 */   234,  235,    2,  237,  238,  239,  240,   61,  242,  243,
 /*    80 */   244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*    90 */   254,  255,  256,  257,  258,  259,  260,    3,  262,  263,
 /*   100 */   264,  265,  266,  267,  268,  168,  270,    2,  272,  273,
 /*   110 */   274,  164,   64,   65,  167,  168,  169,  170,  171,  172,
 /*   120 */   173,  174,  241,   90,    6,  289,   91,  291,   93,  293,
 /*   130 */   294,  295,  160,  161,  162,    2,  164,  165,  166,  199,
 /*   140 */   200,   71,  202,  203,  207,  208,  209,  210,  211,  212,
 /*   150 */   213,  161,  162,  206,  164,  165,  166,  296,  211,  212,
 /*   160 */    11,    2,    3,    4,    5,    2,   48,   49,    5,   10,
 /*   170 */   296,  224,  298,   10,  300,  301,   77,   78,  231,  232,
 /*   180 */   233,  234,  235,  212,  237,  238,  239,  240,   83,  242,
 /*   190 */   243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*   200 */   253,  254,  255,  256,  257,  258,  259,  260,   52,  262,
 /*   210 */   263,  264,  265,  266,  267,  268,   83,  270,    6,  272,
 /*   220 */   273,  274,    2,    3,    4,    5,   48,   49,   79,   80,
 /*   230 */    10,  236,   73,   74,   75,   76,  289,  236,  291,  167,
 /*   240 */   293,  294,  295,  171,  172,   82,  174,  167,  168,  169,
 /*   250 */   170,  171,  172,  173,  174,   35,   36,   37,   38,   39,
 /*   260 */    40,  230,  106,  107,  108,  102,  103,  104,   48,   49,
 /*   270 */    50,  182,   52,  215,    3,    4,  218,  219,  220,    6,
 /*   280 */   308,  309,  310,  311,   11,  230,  206,  315,  316,  317,
 /*   290 */   318,  211,  212,   73,   74,   75,   76,   85,  308,  309,
 /*   300 */   310,  311,   82,  214,  224,  315,  316,  317,  318,  201,
 /*   310 */   312,  203,  181,  182,   43,   44,   45,   46,   47,   48,
 /*   320 */    49,   50,  102,  103,   51,  105,  246,  247,  248,  249,
 /*   330 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*   340 */   260,    6,  262,  263,   73,  214,   11,  127,  128,  129,
 /*   350 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   360 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*   370 */   150,  151,  152,  153,  154,  155,  156,  157,  158,    2,
 /*   380 */     3,    4,    5,    2,    3,    4,    5,   10,  297,   52,
 /*   390 */   299,   10,  109,  110,  111,  112,  113,  114,  115,   59,
 /*   400 */     2,   61,  261,    5,  167,  168,  169,  170,  171,  172,
 /*   410 */   173,  174,   35,   36,   37,   38,   39,   40,  167,   79,
 /*   420 */    88,   89,  171,  172,  173,   48,   49,   50,  261,   48,
 /*   430 */    49,   91,   92,   93,   94,  167,   96,   97,   98,  171,
 /*   440 */   172,  173,  105,  206,  176,  177,  178,  168,  211,  212,
 /*   450 */    73,   74,   75,   76,   73,   74,   75,   76,  167,   82,
 /*   460 */    10,  224,  171,  172,  173,  288,  175,  176,  177,  178,
 /*   470 */    35,   36,   37,   38,   39,   40,   52,  226,  196,  102,
 /*   480 */   103,   31,  245,  246,  247,  248,  249,  250,  251,  252,
 /*   490 */   253,  254,  255,  256,  257,  258,  259,  260,  167,  262,
 /*   500 */   263,  227,  171,  172,  127,  128,  129,  130,  131,  132,
 /*   510 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   520 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*   530 */   153,  154,  155,  156,  157,  158,    2,    3,    4,    5,
 /*   540 */   116,  117,    2,   59,   10,    5,  167,    6,  169,  170,
 /*   550 */   171,  172,    2,  174,  216,    5,    2,  306,    2,    5,
 /*   560 */    10,    5,  325,    6,   10,   91,   10,   93,   11,   35,
 /*   570 */    36,   37,   38,   39,   40,   91,   92,   93,   94,  326,
 /*   580 */    96,   97,   48,   49,   50,  206,   52,  167,    6,  169,
 /*   590 */   170,  171,  172,  262,  174,    1,   42,    6,   84,    6,
 /*   600 */   221,   59,   60,  224,   11,   48,   49,   73,   74,   75,
 /*   610 */    76,    6,   52,   53,   54,   55,   11,   57,    0,    1,
 /*   620 */   167,  290,    0,    1,  171,  172,  206,   67,   78,   11,
 /*   630 */    48,   49,   82,   11,   78,   10,   82,   12,   82,  105,
 /*   640 */    99,   48,   49,  167,  224,  307,  163,  171,  172,  173,
 /*   650 */   277,    2,  102,  103,  104,   64,  102,  103,  102,  103,
 /*   660 */   104,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   670 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   680 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*   690 */   156,  157,  158,    2,    3,    4,    5,   79,   80,   81,
 /*   700 */    11,   10,   80,   81,  167,  168,  169,  170,  171,  172,
 /*   710 */   173,  174,  121,   99,    2,  262,  167,    5,  169,  170,
 /*   720 */   171,  172,   10,  174,    3,    4,   35,   36,   37,   38,
 /*   730 */    39,   40,   83,   42,  314,   71,   72,    6,   47,   48,
 /*   740 */    49,   50,   11,  206,  118,  119,  167,   52,  211,  212,
 /*   750 */   171,  172,  173,   11,  167,  206,  280,   68,  171,  172,
 /*   760 */   173,  224,   62,   63,   73,   74,   75,   76,  231,  232,
 /*   770 */   233,  234,  235,  224,  237,  238,  239,  240,   59,  242,
 /*   780 */   282,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*   790 */   253,  254,  255,  256,  257,  258,  259,  260,   79,  262,
 /*   800 */   263,    7,  167,    9,   11,  226,  171,  172,  173,  100,
 /*   810 */    68,  116,    6,   94,    6,   96,   97,   11,  127,  128,
 /*   820 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   830 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*   840 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*   850 */     2,    3,    4,    5,   48,   49,   48,   49,   10,  283,
 /*   860 */   167,  226,  169,  170,  171,  172,   10,  174,   12,  101,
 /*   870 */     6,  292,   79,   80,   81,  167,  168,  169,  170,  171,
 /*   880 */   172,  173,  174,   35,   36,   37,   38,   39,   40,  167,
 /*   890 */    10,    2,   12,  171,  172,  173,   48,   49,   50,  206,
 /*   900 */    10,  167,   12,  169,  170,  171,  172,   11,  174,  322,
 /*   910 */   323,  324,   48,   49,  206,  284,   10,  224,   12,  211,
 /*   920 */   212,   73,   74,   75,   76,   86,   42,  292,  285,  167,
 /*   930 */    41,   47,  224,  171,  172,  173,   11,  167,    0,    1,
 /*   940 */   206,  171,  172,   42,   48,   49,  180,    6,  226,   11,
 /*   950 */   117,  217,   11,  105,  246,  247,  248,  249,  250,  251,
 /*   960 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  307,
 /*   970 */   262,  263,   83,   48,   49,  127,  128,  129,  130,  131,
 /*   980 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   990 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*  1000 */   152,  153,  154,  155,  156,  157,  158,    2,    3,    4,
 /*  1010 */     5,   11,    6,   79,   80,   10,  167,   11,   80,   81,
 /*  1020 */   171,  172,  173,  307,  302,   58,  167,  222,  169,  170,
 /*  1030 */   171,  172,  262,  174,   61,   61,  229,  228,    5,    3,
 /*  1040 */    35,   36,   37,   38,   39,   40,  167,    3,   48,   49,
 /*  1050 */   171,  172,  173,   48,   49,   50,    2,    3,    4,    5,
 /*  1060 */   290,  183,    6,  191,   10,  206,  167,   11,  169,  170,
 /*  1070 */   171,  172,  191,  174,  225,  226,  191,   11,   73,   74,
 /*  1080 */    75,   76,   11,  224,  191,  323,  324,    3,  191,   35,
 /*  1090 */    36,   37,   38,   39,   40,  167,  191,  194,  191,  171,
 /*  1100 */   172,  173,   48,   49,   50,  206,  191,  167,  191,  191,
 /*  1110 */   105,  171,  172,  173,   48,   49,  195,    6,  191,   48,
 /*  1120 */    49,    6,   11,  224,  191,   71,   11,   73,   74,   75,
 /*  1130 */    76,   11,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1140 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1150 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1160 */   155,  156,  157,  158,    2,  194,  194,    5,   48,   49,
 /*  1170 */   195,  195,   10,  194,   31,    3,  196,    3,  123,  313,
 /*  1180 */    99,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1190 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1200 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  1210 */   156,  157,  158,    2,    3,    4,    5,   62,   63,   11,
 /*  1220 */   205,   10,  204,  204,  167,  168,  169,  170,  171,  172,
 /*  1230 */   173,  174,  205,  319,   41,   41,   11,   82,   41,   10,
 /*  1240 */    78,   11,   71,   11,   82,   10,   35,   36,   37,   38,
 /*  1250 */    39,   40,   10,    6,   81,   11,   48,   49,   10,   48,
 /*  1260 */    49,   50,   11,  206,  102,  103,  104,   92,  211,  212,
 /*  1270 */    81,   10,   10,   48,   49,  120,   10,  122,   48,   49,
 /*  1280 */   125,  224,   10,   10,   73,   74,   75,   76,  231,  232,
 /*  1290 */   233,  234,  235,   10,  237,  238,  239,  240,   11,  242,
 /*  1300 */    10,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  1310 */   253,  254,  255,  256,  257,  258,  259,  260,   10,  262,
 /*  1320 */   263,   10,    2,   10,   69,    5,   10,   10,   10,   10,
 /*  1330 */    10,   10,   10,   92,   11,   48,   49,   10,  127,  128,
 /*  1340 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1350 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  1360 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  1370 */   164,   48,   49,  167,  168,  169,  170,  171,  172,  173,
 /*  1380 */   174,  167,   10,  169,  170,  171,  172,   11,  174,  167,
 /*  1390 */    10,  169,  170,  171,  172,   11,  174,   11,   11,   11,
 /*  1400 */    10,   10,   82,   11,   11,   11,   11,   11,   10,   10,
 /*  1410 */    10,   10,  206,   10,   10,   10,   10,  211,  212,   10,
 /*  1420 */   206,   10,  102,  103,   48,   49,   10,   10,  206,   10,
 /*  1430 */   224,   10,   48,   49,   48,   49,   48,   49,  224,   10,
 /*  1440 */    48,   49,   48,   49,   48,   49,  224,   10,  242,  243,
 /*  1450 */    10,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  1460 */   254,  255,  256,  257,  258,  259,  260,   11,  262,  263,
 /*  1470 */   264,  265,  266,  267,  268,   11,  270,   11,  272,  273,
 /*  1480 */   274,  167,  168,  169,  170,  171,  172,  173,  174,   11,
 /*  1490 */    11,   68,   11,    6,   11,  289,   11,  291,   10,  293,
 /*  1500 */   294,  295,   11,   70,   48,   49,   11,  105,   70,   10,
 /*  1510 */    95,   11,   48,   49,   48,   49,   10,   87,   11,   11,
 /*  1520 */   206,   41,    3,    3,    6,  211,  212,   48,   49,   48,
 /*  1530 */    49,   48,   49,   48,   49,   48,   49,    3,  224,   48,
 /*  1540 */    49,   11,   87,   48,   49,  231,  232,  233,  234,  235,
 /*  1550 */    87,  237,  238,  239,  240,   11,  242,   11,  244,  245,
 /*  1560 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  1570 */   256,  257,  258,  259,  260,   11,  262,  263,   48,   49,
 /*  1580 */   167,  168,  169,  170,  171,  172,  173,  174,    6,   11,
 /*  1590 */   116,   11,   48,   49,   48,   49,   11,  103,   11,   10,
 /*  1600 */   116,   11,   47,   56,   63,   66,   10,   62,   11,   10,
 /*  1610 */     7,   11,   48,   49,    8,   10,   12,   26,   11,  206,
 /*  1620 */    10,   29,   11,   10,  211,  212,   48,   49,   48,   49,
 /*  1630 */    11,  103,   11,   48,   49,   48,   49,  224,   48,   49,
 /*  1640 */    10,   32,   11,   10,  231,  232,  233,  234,  235,   11,
 /*  1650 */   237,  238,  239,  240,   11,  242,   11,  244,  245,  246,
 /*  1660 */   247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
 /*  1670 */   257,  258,  259,  260,   10,  262,  263,   11,   11,   10,
 /*  1680 */    34,   11,   10,   34,   11,   10,  124,   11,  167,  168,
 /*  1690 */   169,  170,  171,  172,  173,  174,   10,  126,   90,   11,
 /*  1700 */    10,    8,   11,   11,   10,  327,   11,   11,   11,   11,
 /*  1710 */    10,   10,  327,  327,   11,  327,  102,  327,  327,  327,
 /*  1720 */   327,  109,  327,  327,  327,  327,  327,  206,  327,  327,
 /*  1730 */   327,  327,  211,  212,  327,  327,  327,  327,  327,  327,
 /*  1740 */   327,  327,  327,  327,  327,  224,  327,  327,  327,  327,
 /*  1750 */   327,  327,  231,  232,  233,  234,  235,  327,  237,  238,
 /*  1760 */   239,  240,  327,  242,  327,  244,  245,  246,  247,  248,
 /*  1770 */   249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
 /*  1780 */   259,  260,  327,  262,  263,  327,  327,  167,  168,  169,
 /*  1790 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  1800 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  1810 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  1820 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  1830 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  1840 */   327,  327,  327,  327,  224,  327,  327,  327,  327,  327,
 /*  1850 */   327,  231,  232,  233,  234,  235,  327,  237,  238,  239,
 /*  1860 */   240,  327,  242,  327,  244,  245,  246,  247,  248,  249,
 /*  1870 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  1880 */   260,  327,  262,  263,  327,  327,  327,  327,  327,  327,
 /*  1890 */   327,  327,  327,  327,  327,  167,  168,  169,  170,  171,
 /*  1900 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  1910 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  1920 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  1930 */   327,  327,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  1940 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  1950 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  1960 */   232,  233,  234,  235,  327,  237,  238,  239,  240,  327,
 /*  1970 */   242,  327,  244,  245,  246,  247,  248,  249,  250,  251,
 /*  1980 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  1990 */   262,  263,  327,  327,  167,  168,  169,  170,  171,  172,
 /*  2000 */   173,  174,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2010 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2020 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2030 */   327,  327,  327,  206,  327,  327,  327,  327,  211,  212,
 /*  2040 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2050 */   327,  224,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2060 */   233,  234,  235,  327,  237,  238,  239,  240,  327,  242,
 /*  2070 */   327,  244,  245,  246,  247,  248,  249,  250,  251,  252,
 /*  2080 */   253,  254,  255,  256,  257,  258,  259,  260,  327,  262,
 /*  2090 */   263,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2100 */   327,  327,  167,  168,  169,  170,  171,  172,  173,  174,
 /*  2110 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2120 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2130 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2140 */   327,  206,  327,  327,  327,  327,  211,  212,  327,  327,
 /*  2150 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  224,
 /*  2160 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  234,
 /*  2170 */   235,  327,  237,  238,  239,  240,  327,  242,  327,  244,
 /*  2180 */   245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
 /*  2190 */   255,  256,  257,  258,  259,  260,  327,  262,  263,  327,
 /*  2200 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  2210 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2220 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2230 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2240 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  2250 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  2260 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2270 */   327,  327,  327,  327,  240,  327,  242,  327,  244,  245,
 /*  2280 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  2290 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  2300 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  167,
 /*  2310 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  2320 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2330 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  305,
 /*  2340 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  2350 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  2360 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  167,
 /*  2370 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  2380 */   327,  327,  327,  327,  327,  327,  327,  245,  246,  247,
 /*  2390 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  2400 */   258,  259,  260,  327,  262,  263,  327,  327,  206,  327,
 /*  2410 */   327,  327,  327,  211,  212,  327,  327,  275,  327,  327,
 /*  2420 */   278,  279,  327,  327,  327,  327,  224,  327,  327,  327,
 /*  2430 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2440 */   327,  327,  240,  327,  242,  327,  244,  245,  246,  247,
 /*  2450 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  2460 */   258,  259,  260,  327,  262,  263,  327,  327,  327,  327,
 /*  2470 */   327,  327,  327,  327,  327,  327,  327,  167,  168,  169,
 /*  2480 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  2490 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2500 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2510 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  2520 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  2530 */   327,  327,  327,  327,  224,  327,  327,  167,  168,  169,
 /*  2540 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  2550 */   327,  327,  327,  327,  327,  245,  246,  247,  248,  249,
 /*  2560 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  2570 */   260,  327,  262,  263,  327,  327,  206,  327,  327,  327,
 /*  2580 */   327,  211,  212,  327,  327,  327,  327,  327,  278,  279,
 /*  2590 */   327,  327,  327,  327,  224,  327,  327,  327,  327,  327,
 /*  2600 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2610 */   327,  327,  327,  327,  327,  245,  246,  247,  248,  249,
 /*  2620 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  2630 */   260,  327,  262,  263,  327,  327,  327,  327,  327,  327,
 /*  2640 */   327,  327,  327,  327,  327,  167,  168,  169,  170,  171,
 /*  2650 */   172,  173,  174,  327,  327,  327,  286,  287,  327,  327,
 /*  2660 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2670 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2680 */   327,  327,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  2690 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2700 */   327,  327,  224,  327,  327,  167,  168,  169,  170,  171,
 /*  2710 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  2720 */   242,  327,  327,  245,  246,  247,  248,  249,  250,  251,
 /*  2730 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  2740 */   262,  263,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  2750 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2760 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  2770 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2780 */   327,  327,  327,  245,  246,  247,  248,  249,  250,  251,
 /*  2790 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  2800 */   262,  263,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2810 */   327,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  2820 */   174,  327,  327,  327,  327,  287,  327,  327,  327,  327,
 /*  2830 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2840 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2850 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  2860 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2870 */   224,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  2880 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2890 */   327,  245,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2900 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  2910 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  2920 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2930 */   224,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2940 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2950 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  2960 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  2970 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  2980 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  2990 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3000 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3010 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3020 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  3030 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  3040 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  3050 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3060 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  3070 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  3080 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  3090 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  3100 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3110 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3120 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  3130 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  3140 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  167,
 /*  3150 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  3160 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3170 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3180 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  3190 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  3200 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  167,
 /*  3210 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  3220 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  3230 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  3240 */   258,  259,  260,  327,  262,  263,  327,  327,  206,  327,
 /*  3250 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  3260 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  327,
 /*  3270 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3280 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  3290 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  3300 */   258,  259,  260,  327,  262,  263,  327,  327,  327,  327,
 /*  3310 */   327,  327,  327,  327,  327,  327,  327,  167,  168,  169,
 /*  3320 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  3330 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3340 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3350 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  3360 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  3370 */   327,  327,  327,  327,  224,  327,  327,  167,  168,  169,
 /*  3380 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  3390 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  3400 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  3410 */   260,  327,  262,  263,  327,  327,  206,  327,  327,  327,
 /*  3420 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  3430 */   327,  327,  327,  327,  224,  327,  327,  327,  327,  327,
 /*  3440 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3450 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  3460 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  3470 */   260,  327,  262,  263,  327,  327,  327,  327,  327,  327,
 /*  3480 */   327,  327,  327,  327,  327,  167,  168,  169,  170,  171,
 /*  3490 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  3500 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3510 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3520 */   327,  327,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  3530 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3540 */   327,  327,  224,  327,  327,  167,  168,  169,  170,  171,
 /*  3550 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  3560 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  3570 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  3580 */   262,  263,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  3590 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3600 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  3610 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3620 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  3630 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  3640 */   262,  263,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3650 */   327,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  3660 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3670 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3680 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3690 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  3700 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3710 */   224,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  3720 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3730 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  3740 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  3750 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  3760 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3770 */   224,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3780 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3790 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  3800 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  3810 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3820 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  3830 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3840 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3850 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3860 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  3870 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  3880 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  3890 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3900 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  3910 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  3920 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  3930 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  3940 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3950 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  3960 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  3970 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  3980 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  167,
 /*  3990 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  4000 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4010 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4020 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  4030 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  4040 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  167,
 /*  4050 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  4060 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  4070 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  4080 */   258,  259,  260,  327,  262,  263,  327,  327,  206,  327,
 /*  4090 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  4100 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  327,
 /*  4110 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4120 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  4130 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  4140 */   258,  259,  260,  327,  262,  263,  327,  327,  327,  327,
 /*  4150 */   327,  327,  327,  327,  327,  327,  327,  167,  168,  169,
 /*  4160 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  4170 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4180 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4190 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  4200 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  4210 */   327,  327,  327,  327,  224,  327,  327,  167,  168,  169,
 /*  4220 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  4230 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  4240 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  4250 */   260,  327,  262,  263,  327,  327,  206,  327,  327,  327,
 /*  4260 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  4270 */   327,  327,  327,  327,  224,  327,  327,  327,  327,  327,
 /*  4280 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4290 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  4300 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  4310 */   260,  327,  262,  263,  327,  327,  327,  327,  327,  327,
 /*  4320 */   327,  327,  327,  327,  327,  167,  168,  169,  170,  171,
 /*  4330 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  4340 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4350 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4360 */   327,  327,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  4370 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4380 */   327,  327,  224,  327,  327,  167,  168,  169,  170,  171,
 /*  4390 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  4400 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  4410 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  4420 */   262,  263,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  4430 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4440 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  4450 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4460 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  4470 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  4480 */   262,  263,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4490 */   327,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  4500 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4510 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4520 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4530 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  4540 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4550 */   224,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  4560 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4570 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  4580 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  4590 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  4600 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4610 */   224,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4620 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4630 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  4640 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  4650 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4660 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  4670 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4680 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4690 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4700 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  4710 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  4720 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  4730 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4740 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  4750 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  4760 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  4770 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  4780 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4790 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4800 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  4810 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  4820 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  167,
 /*  4830 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  4840 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4850 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4860 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  4870 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  4880 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  167,
 /*  4890 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  4900 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  4910 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  4920 */   258,  259,  260,  327,  262,  263,  327,  327,  206,  327,
 /*  4930 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  4940 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  327,
 /*  4950 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  4960 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  4970 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  4980 */   258,  259,  260,  327,  262,  263,  327,  327,  327,  327,
 /*  4990 */   327,  327,  327,  327,  327,  327,  327,  167,  168,  169,
 /*  5000 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  5010 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5020 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5030 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  5040 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  5050 */   327,  327,  327,  327,  224,  327,  327,  167,  168,  169,
 /*  5060 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  5070 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  5080 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  5090 */   260,  327,  262,  263,  327,  327,  206,  327,  327,  327,
 /*  5100 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  5110 */   327,  327,  327,  327,  224,  327,  327,  327,  327,  327,
 /*  5120 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5130 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  5140 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  5150 */   260,  327,  262,  263,  327,  327,  327,  327,  327,  327,
 /*  5160 */   327,  327,  327,  327,  327,  167,  168,  169,  170,  171,
 /*  5170 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  5180 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5190 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5200 */   327,  327,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  5210 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5220 */   327,  327,  224,  327,  327,  167,  168,  169,  170,  171,
 /*  5230 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  5240 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  5250 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  5260 */   262,  263,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  5270 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5280 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  5290 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5300 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  5310 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  5320 */   262,  263,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5330 */   327,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  5340 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5350 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5360 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5370 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  5380 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5390 */   224,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  5400 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5410 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  5420 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  5430 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  5440 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5450 */   224,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5460 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5470 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  5480 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  5490 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5500 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  5510 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5520 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5530 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5540 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  5550 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  5560 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  5570 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5580 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  5590 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  5600 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  5610 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  327,
 /*  5620 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5630 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5640 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  5650 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  5660 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  167,
 /*  5670 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  5680 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5690 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5700 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  5710 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  5720 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  167,
 /*  5730 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  5740 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  5750 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  5760 */   258,  259,  260,  327,  262,  263,  327,  327,  206,  327,
 /*  5770 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  5780 */   327,  327,  327,  327,  327,  327,  224,  327,  327,  327,
 /*  5790 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5800 */   327,  327,  327,  327,  327,  327,  327,  327,  246,  247,
 /*  5810 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  5820 */   258,  259,  260,  327,  262,  263,  327,  327,  327,  327,
 /*  5830 */   327,  327,  327,  327,  327,  327,  327,  167,  168,  169,
 /*  5840 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  5850 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5860 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5870 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  5880 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  5890 */   327,  327,  327,  327,  224,  327,  327,  167,  168,  169,
 /*  5900 */   170,  171,  172,  173,  174,  327,  327,  327,  327,  327,
 /*  5910 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  5920 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  5930 */   260,  327,  262,  263,  327,  327,  206,  327,  327,  327,
 /*  5940 */   327,  211,  212,  327,  327,  327,  327,  327,  327,  327,
 /*  5950 */   327,  327,  327,  327,  224,  327,  327,  327,  327,  327,
 /*  5960 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  5970 */   327,  327,  327,  327,  327,  327,  246,  247,  248,  249,
 /*  5980 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  5990 */   260,  327,  262,  263,  327,  327,  327,  327,  327,  327,
 /*  6000 */   327,  327,  327,  327,  327,  167,  168,  169,  170,  171,
 /*  6010 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  6020 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6030 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6040 */   327,  327,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  6050 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6060 */   327,  327,  224,  327,  327,  167,  168,  169,  170,  171,
 /*  6070 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  6080 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  6090 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  6100 */   262,  263,  327,  327,  206,  327,  327,  327,  327,  211,
 /*  6110 */   212,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6120 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  6130 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6140 */   327,  327,  327,  327,  246,  247,  248,  249,  250,  251,
 /*  6150 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  327,
 /*  6160 */   262,  263,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6170 */   327,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  6180 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6190 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6200 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6210 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  6220 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6230 */   224,  327,  327,  167,  168,  169,  170,  171,  172,  173,
 /*  6240 */   174,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6250 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  6260 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  6270 */   327,  327,  206,  327,  327,  327,  327,  211,  212,  327,
 /*  6280 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6290 */   224,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6300 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6310 */   327,  327,  246,  247,  248,  249,  250,  251,  252,  253,
 /*  6320 */   254,  255,  256,  257,  258,  259,  260,  327,  262,  263,
 /*  6330 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6340 */   327,  167,  168,  169,  170,  171,  172,  173,  174,  327,
 /*  6350 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6360 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6370 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6380 */   206,  327,  327,  327,  327,  211,  212,  327,  327,  327,
 /*  6390 */   327,  327,  327,  327,  327,  327,  327,  327,  224,  164,
 /*  6400 */   327,  327,  167,  327,  169,  170,  171,  172,  173,  174,
 /*  6410 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6420 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  6430 */   256,  257,  258,  259,  260,  327,  262,  263,  327,  327,
 /*  6440 */   327,  206,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6450 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  224,
 /*  6460 */   327,  226,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6470 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6480 */   327,  327,  327,  327,  327,  327,  327,  327,  167,  168,
 /*  6490 */   169,  170,  171,  172,  173,  174,  327,  327,  263,  264,
 /*  6500 */   265,  266,  267,  268,  327,  270,  327,  272,  273,  274,
 /*  6510 */   167,  168,  169,  170,  171,  172,  173,  174,  327,  327,
 /*  6520 */   327,  327,  327,  327,  289,  327,  291,  206,  293,  294,
 /*  6530 */   295,  327,  211,  212,  327,  327,  327,  327,  327,  327,
 /*  6540 */   327,  327,  327,  327,  327,  224,  327,  327,  327,  206,
 /*  6550 */   327,  327,  327,  327,  211,  212,  321,  327,  327,  327,
 /*  6560 */   327,  327,  327,  327,  327,  327,  327,  224,  247,  327,
 /*  6570 */   327,  250,  251,  252,  253,  254,  255,  256,  257,  258,
 /*  6580 */   259,  260,  327,  262,  263,  327,  327,  327,  327,  327,
 /*  6590 */   327,  327,  327,  250,  251,  252,  253,  254,  255,  256,
 /*  6600 */   257,  258,  259,  260,  327,  262,  263,  327,  327,  167,
 /*  6610 */   168,  169,  170,  171,  172,  173,  174,  327,  327,  327,
 /*  6620 */   327,  327,  327,  327,  327,  327,  164,  327,  327,  167,
 /*  6630 */   327,  169,  170,  171,  172,  327,  174,  327,  327,  327,
 /*  6640 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  6650 */   327,  327,  327,  211,  212,  327,  327,  327,  327,  327,
 /*  6660 */   327,  327,  327,  327,  164,  327,  224,  167,  206,  169,
 /*  6670 */   170,  171,  172,  327,  174,  327,  327,  164,  327,  327,
 /*  6680 */   167,  327,  169,  170,  171,  172,  224,  174,  327,  327,
 /*  6690 */   327,  327,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  6700 */   258,  259,  260,  327,  262,  263,  206,  327,  327,  327,
 /*  6710 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  206,
 /*  6720 */   327,  327,  327,  327,  224,  263,  264,  265,  266,  267,
 /*  6730 */   268,  327,  270,  327,  272,  273,  274,  224,  327,  327,
 /*  6740 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6750 */   327,  289,  327,  291,  327,  293,  294,  295,  327,  327,
 /*  6760 */   327,  327,  327,  263,  264,  265,  266,  267,  268,  327,
 /*  6770 */   270,  327,  272,  273,  274,  327,  263,  264,  265,  266,
 /*  6780 */   267,  268,  320,  270,  327,  272,  273,  274,  327,  289,
 /*  6790 */   327,  291,  327,  293,  294,  295,  327,  327,  327,  327,
 /*  6800 */   327,  327,  289,  327,  291,  327,  293,  294,  295,  327,
 /*  6810 */   327,  327,  327,  164,  327,  327,  167,  327,  169,  170,
 /*  6820 */   171,  172,  327,  174,  327,  327,  327,  327,  327,  327,
 /*  6830 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6840 */   167,  168,  169,  170,  171,  172,  173,  174,  327,  327,
 /*  6850 */   327,  164,  327,  327,  167,  206,  169,  170,  171,  172,
 /*  6860 */   327,  174,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6870 */   327,  327,  327,  224,  327,  327,  327,  327,  327,  206,
 /*  6880 */   327,  327,  327,  327,  211,  327,  327,  327,  327,  327,
 /*  6890 */   327,  327,  327,  206,  327,  327,  327,  224,  327,  327,
 /*  6900 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  6910 */   327,  224,  263,  264,  265,  266,  267,  268,  327,  270,
 /*  6920 */   327,  272,  273,  274,  251,  252,  253,  254,  255,  256,
 /*  6930 */   257,  258,  259,  260,  327,  262,  263,  327,  289,  327,
 /*  6940 */   291,  327,  293,  294,  295,  327,  327,  327,  327,  327,
 /*  6950 */   263,  264,  265,  266,  267,  268,  327,  270,  327,  272,
 /*  6960 */   273,  274,  327,  327,  327,  327,  327,  164,  327,  327,
 /*  6970 */   167,  327,  169,  170,  171,  172,  289,  174,  291,  327,
 /*  6980 */   293,  294,  295,  327,  327,  327,  327,  327,  327,  327,
 /*  6990 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7000 */   327,  327,  327,  327,  327,  164,  327,  327,  167,  206,
 /*  7010 */   169,  170,  171,  172,  327,  174,  327,  327,  327,  327,
 /*  7020 */   327,  327,  327,  327,  327,  327,  327,  224,  327,  327,
 /*  7030 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7040 */   327,  327,  327,  327,  327,  327,  327,  206,  327,  327,
 /*  7050 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7060 */   327,  327,  327,  327,  327,  224,  263,  327,  327,  266,
 /*  7070 */   267,  268,  269,  270,  327,  272,  273,  274,  164,  327,
 /*  7080 */   327,  167,  327,  169,  170,  171,  172,  327,  174,  327,
 /*  7090 */   327,  327,  289,  327,  291,  327,  293,  294,  295,  327,
 /*  7100 */   327,  327,  327,  327,  263,  327,  327,  266,  267,  268,
 /*  7110 */   269,  270,  327,  272,  273,  274,  164,  327,  327,  167,
 /*  7120 */   206,  169,  170,  171,  172,  327,  174,  327,  327,  327,
 /*  7130 */   289,  327,  291,  327,  293,  294,  295,  327,  224,  327,
 /*  7140 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7150 */   327,  327,  327,  327,  327,  327,  327,  327,  206,  327,
 /*  7160 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7170 */   327,  327,  327,  327,  327,  327,  224,  263,  327,  327,
 /*  7180 */   266,  267,  268,  269,  270,  327,  272,  273,  274,  327,
 /*  7190 */   327,  327,  164,  327,  327,  167,  327,  169,  170,  171,
 /*  7200 */   172,  327,  174,  289,  327,  291,  327,  293,  294,  295,
 /*  7210 */   327,  327,  327,  327,  327,  263,  327,  327,  266,  267,
 /*  7220 */   268,  269,  270,  327,  272,  273,  274,  327,  327,  327,
 /*  7230 */   164,  327,  327,  167,  206,  169,  170,  171,  172,  327,
 /*  7240 */   174,  289,  327,  291,  327,  293,  294,  295,  327,  327,
 /*  7250 */   327,  327,  224,  327,  327,  327,  327,  327,  327,  327,
 /*  7260 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7270 */   327,  327,  206,  164,  327,  327,  167,  327,  169,  170,
 /*  7280 */   171,  172,  327,  174,  327,  327,  327,  327,  327,  327,
 /*  7290 */   224,  263,  327,  327,  266,  327,  327,  269,  270,  271,
 /*  7300 */   272,  273,  274,  327,  327,  327,  167,  327,  169,  170,
 /*  7310 */   171,  172,  173,  174,  327,  206,  327,  289,  327,  291,
 /*  7320 */   327,  293,  294,  295,  327,  327,  327,  327,  327,  263,
 /*  7330 */   327,  327,  266,  224,  327,  269,  270,  271,  272,  273,
 /*  7340 */   274,  327,  327,  327,  327,  206,  164,  327,  327,  167,
 /*  7350 */   327,  169,  170,  171,  172,  289,  174,  291,  327,  293,
 /*  7360 */   294,  295,  327,  224,  327,  327,  327,  327,  327,  327,
 /*  7370 */   327,  327,  263,  327,  327,  266,  267,  268,  327,  270,
 /*  7380 */   327,  272,  273,  274,  164,  327,  327,  167,  206,  169,
 /*  7390 */   170,  171,  172,  254,  174,  327,  327,  258,  289,  327,
 /*  7400 */   291,  262,  293,  294,  295,  327,  224,  327,  327,  327,
 /*  7410 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7420 */   327,  327,  327,  327,  327,  327,  206,  327,  327,  327,
 /*  7430 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7440 */   327,  327,  303,  304,  224,  263,  327,  327,  266,  267,
 /*  7450 */   268,  327,  270,  327,  272,  273,  274,  327,  327,  164,
 /*  7460 */   327,  327,  167,  327,  169,  170,  171,  172,  327,  174,
 /*  7470 */   327,  289,  327,  291,  327,  293,  294,  295,  327,  327,
 /*  7480 */   327,  327,  327,  263,  327,  327,  266,  267,  268,  327,
 /*  7490 */   270,  327,  272,  273,  274,  327,  327,  164,  327,  327,
 /*  7500 */   167,  206,  169,  170,  171,  172,  327,  174,  327,  289,
 /*  7510 */   327,  291,  327,  293,  294,  295,  327,  327,  327,  224,
 /*  7520 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7530 */   327,  327,  327,  327,  327,  327,  327,  164,  327,  206,
 /*  7540 */   167,  327,  169,  170,  171,  172,  327,  174,  327,  327,
 /*  7550 */   327,  327,  327,  327,  327,  327,  327,  224,  263,  327,
 /*  7560 */   327,  266,  267,  268,  327,  270,  327,  272,  273,  274,
 /*  7570 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  206,
 /*  7580 */   327,  327,  327,  327,  289,  327,  291,  327,  293,  294,
 /*  7590 */   295,  327,  327,  327,  327,  327,  263,  224,  327,  266,
 /*  7600 */   327,  327,  327,  270,  271,  272,  273,  274,  327,  327,
 /*  7610 */   327,  327,  167,  327,  169,  170,  171,  172,  327,  174,
 /*  7620 */   327,  327,  289,  327,  291,  327,  293,  294,  295,  327,
 /*  7630 */   327,  327,  327,  327,  327,  327,  263,  327,  327,  266,
 /*  7640 */   327,  327,  327,  270,  271,  272,  273,  274,  327,  327,
 /*  7650 */   327,  206,  327,  327,  327,  327,  167,  327,  169,  170,
 /*  7660 */   171,  172,  289,  174,  291,  327,  293,  294,  295,  224,
 /*  7670 */   167,  327,  169,  170,  171,  172,  327,  174,  327,  327,
 /*  7680 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7690 */   327,  327,  327,  327,  327,  206,  327,  327,  327,  327,
 /*  7700 */   327,  327,  327,  327,  327,  327,  327,  327,  263,  206,
 /*  7710 */   327,  266,  327,  224,  327,  167,  327,  169,  170,  171,
 /*  7720 */   172,  276,  174,  327,  327,  327,  281,  224,  327,  327,
 /*  7730 */   327,  327,  327,  327,  289,  327,  291,  327,  293,  294,
 /*  7740 */   295,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7750 */   327,  327,  263,  327,  206,  266,  167,  327,  169,  170,
 /*  7760 */   171,  172,  327,  174,  327,  327,  263,  327,  327,  266,
 /*  7770 */   327,  327,  224,  327,  327,  327,  327,  327,  289,  327,
 /*  7780 */   291,  327,  293,  294,  295,  327,  327,  327,  327,  327,
 /*  7790 */   327,  327,  289,  327,  291,  206,  293,  294,  295,  327,
 /*  7800 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7810 */   327,  263,  327,  224,  266,  167,  327,  169,  170,  171,
 /*  7820 */   172,  173,  174,  327,  327,  327,  327,  327,  327,  327,
 /*  7830 */   327,  327,  327,  327,  327,  327,  327,  289,  327,  291,
 /*  7840 */   327,  293,  294,  295,  327,  327,  327,  327,  327,  327,
 /*  7850 */   327,  327,  263,  327,  206,  266,  327,  327,  327,  327,
 /*  7860 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7870 */   327,  327,  224,  327,  327,  327,  327,  327,  289,  327,
 /*  7880 */   291,  327,  293,  294,  295,  327,  327,  327,  327,  327,
 /*  7890 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7900 */   327,  327,  254,  327,  327,  327,  258,  327,  327,  327,
 /*  7910 */   262,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7920 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7930 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7940 */   327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
 /*  7950 */   327,  327,  304,
);
  const YY_SHIFT_USE_DFLT = -93;
  const YY_SHIFT_MAX = 429;
static $yy_shift_ofst = array(
 /*     0 */  1155,  220,  220,  377,  534,  534,  534,  534,  534,  534,
 /*    10 */   534,  534,  848, 1005, 1054, 1005, 1211, 1211,  691, 1211,
 /*    20 */  1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
 /*    30 */  1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
 /*    40 */  1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
 /*    50 */  1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
 /*    60 */  1211, 1211, 1211, 1211, 1211, 1211, 1320,  381,  381,  381,
 /*    70 */   554, 1320, 1320, 1320, 1320,  159,  550,  556,  163,  163,
 /*    80 */  1162,  163, 1320, 1320, 1320, 1320, 1320, 1320,   33,  712,
 /*    90 */   712,  712,  712,  398, 1155,  398,    4,  398,  398,  271,
 /*   100 */   398,  398,  540,  398,  398,  398,  398,  398,  540,   28,
 /*   110 */    28,   28,   28,   28,   28,   28,  889,  105,  105,  133,
 /*   120 */   340,  560,   26,   70,   28,   28,   28,   28,   28,    8,
 /*   130 */    16,  435,  719,  273,  424,   94,  283,  484,  484,  557,
 /*   140 */   593,  806,  156,  896,  925, 1000, 1066,  118, 1071, 1120,
 /*   150 */  1208, 1225, 1230, 1287, 1323, 1376,  582, 1384, 1386, 1388,
 /*   160 */  1392, 1394,  808, 1396,  864, 1456, 1464, 1466, 1479, 1481,
 /*   170 */  1483, 1485, 1487, 1491, 1495, 1530, 1544, 1546, 1564, 1578,
 /*   180 */  1580, 1585, 1587, 1590,  -92,   35,   48,   48,  591,   99,
 /*   190 */   178,   99,  474,  474,  332,  542,  721,  450,  541,  594,
 /*   200 */   514,  614,  709,  768,  839,  901,  833,  833,  967,  973,
 /*   210 */   974, 1033, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
 /*   220 */  1036, 1036, 1036, 1036, 1044, 1084, 1044, 1084, 1044, 1084,
 /*   230 */  1044, 1143, 1172, 1174, 1174, 1172, 1055, 1081,  618,  622,
 /*   240 */   938,  793,  149,  664,  664,  335,  649,  689,  337,  605,
 /*   250 */   212,  731,  695,  626,  884,  700,  742,  625,  794,  856,
 /*   260 */   880,  890,  906,  941, 1006, 1056,    2, 1111, 1115,  934,
 /*   270 */   934, 1193, 1194, 1197, 1229, 1171, 1232, 1235, 1173, 1242,
 /*   280 */  1247, 1244, 1248, 1251, 1175, 1189, 1173, 1261, 1262, 1266,
 /*   290 */  1272, 1273, 1283, 1290, 1308, 1311, 1313, 1316, 1317, 1318,
 /*   300 */  1319, 1321, 1322, 1327, 1372, 1380, 1387, 1390, 1391, 1398,
 /*   310 */  1399, 1400, 1401, 1403, 1404, 1406, 1393, 1405, 1409, 1411,
 /*   320 */  1416, 1417, 1419, 1421, 1395, 1429, 1437, 1440, 1488, 1241,
 /*   330 */  1255, 1433, 1255, 1438, 1402, 1478, 1423, 1499, 1247, 1500,
 /*   340 */  1415, 1430, 1506, 1247, 1507, 1173, 1173, 1173, 1173, 1173,
 /*   350 */  1173, 1173, 1508, 1480, 1519, 1520, 1534, 1455, 1518, 1423,
 /*   360 */  1463, 1582, 1423, 1494, 1589, 1474, 1484, 1555, 1547, 1541,
 /*   370 */  1539, 1545, 1596, 1597, 1247, 1599, 1603, 1606, 1600, 1605,
 /*   380 */  1607, 1604, 1610, 1611, 1613, 1619, 1621, 1630, 1631, 1638,
 /*   390 */  1633, 1643, 1645, 1664, 1666, 1667, 1669, 1670, 1672, 1673,
 /*   400 */  1675, 1676, 1686, 1688, 1690, 1691, 1591, 1692, 1592, 1609,
 /*   410 */  1646, 1694, 1695, 1696, 1649, 1700, 1701, 1697, 1703, 1528,
 /*   420 */  1562, 1608, 1423, 1571, 1247, 1698, 1614, 1693, 1612, 1423,
);
  const YY_REDUCE_USE_DFLT = -197;
  const YY_REDUCE_MAX = 237;
static $yy_reduce_ofst = array(
 /*     0 */   -28, -164,  -53, 1206,  537, 1057, 1314, 1413, 1521, 1620,
 /*    10 */  1728, 1827, 1935, 2034, 2142, 2202, 2310, 2370,  237, 2478,
 /*    20 */  2538, 2646,   80,  708, 2706, 2814, 2874, 2982, 3042, 3150,
 /*    30 */  3210, 3318, 3378, 3486, 3546, 3654, 3714, 3822, 3882, 3990,
 /*    40 */  4050, 4158, 4218, 4326, 4386, 4494, 4554, 4662, 4722, 4830,
 /*    50 */  4890, 4998, 5058, 5166, 5226, 5334, 5394, 5502, 5562, 5670,
 /*    60 */  5730, 5838, 5898, 6006, 6066, 6174, 6235, 6321, 6343, 6442,
 /*    70 */  6462, 6500, 6513, 6649, 6687, 6673, 6803, 6841, 6914, 6952,
 /*    80 */  7028, 7066, 7109, 7182, 7220, 7295, 7333, 7373, 7445, 7489,
 /*    90 */  7503, 7548, 7589, 7139,  -10, 7648, -135,  379,  420,  -63,
 /*   100 */   549,  693,  291,  734,  859,  899, 1214, 1222,  268,  587,
 /*   110 */   579,  635,  722,  251,  849,  762,  331,  331,  770,  476,
 /*   120 */  -126,   58,  -60,  879,   72,  879,  928,  453,  940,  131,
 /*   130 */  -183,  108,   91,   89,  338, -196, -119, -139, -139,  -29,
 /*   140 */   -29,  -29,   -5,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
 /*   150 */   -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
 /*   160 */   -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
 /*   170 */   -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
 /*   180 */   -29,  -29,  -29,  -29,    1, -139,   31,   55,   -2,  141,
 /*   190 */   -29,  167, -139, -139,  177,  274,  279,  282,  253,  483,
 /*   200 */   373,  498,  576,  631,  643,  766,  662,  716,  805,  807,
 /*   210 */   809,  878,  872,  881,  885,  893,  897,  905,  907,  915,
 /*   220 */   917,  918,  927,  933,  903,  921,  971,  975,  972,  976,
 /*   230 */   979,  980, 1015, 1018, 1019, 1027,  866,  914,
);
static $yy_default = array(
 /*     0 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    10 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    20 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    30 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    40 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    50 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    60 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    70 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    80 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*    90 */  1163, 1163, 1163, 1163,  752, 1163, 1163, 1163, 1163, 1163,
 /*   100 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   110 */  1163, 1163, 1163, 1163, 1163, 1163, 1009, 1009, 1163,  990,
 /*   120 */  1035, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,  771,
 /*   130 */   899, 1163, 1027,  878, 1075, 1163, 1163, 1007, 1008, 1163,
 /*   140 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   150 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   160 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   170 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   180 */  1163, 1163, 1163, 1163, 1163, 1025, 1163, 1163, 1090,  958,
 /*   190 */   929,  958, 1025, 1023, 1004, 1163, 1163,  834, 1118,  751,
 /*   200 */   995, 1041, 1043, 1048,  999,  860, 1079, 1081,  895,  900,
 /*   210 */   902, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   220 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   230 */  1163,  834, 1163, 1163, 1163, 1163, 1094, 1103, 1012, 1012,
 /*   240 */  1012, 1012, 1163,  933,  930, 1163,  961, 1163, 1163,  925,
 /*   250 */   996, 1163, 1076, 1163, 1163, 1163, 1163,  783, 1163,  793,
 /*   260 */   795,  797,  806, 1163, 1163, 1163,  853, 1163,  764, 1106,
 /*   270 */  1107,  763, 1163, 1163, 1163, 1163, 1163, 1163,  966, 1013,
 /*   280 */  1017, 1163, 1014, 1163, 1163,  965, 1163, 1163, 1163, 1163,
 /*   290 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   300 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   310 */  1163, 1163, 1163, 1163, 1163, 1151, 1163, 1163, 1163, 1163,
 /*   320 */  1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   330 */   911,  917,  912,  941, 1163,  963, 1038, 1163, 1040, 1163,
 /*   340 */  1029, 1055, 1163, 1057, 1163,  967,  969,  968,  970,  971,
 /*   350 */   973,  972, 1163, 1163, 1163, 1163, 1163, 1163, 1000, 1049,
 /*   360 */  1163, 1044, 1042, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
 /*   370 */  1163, 1163,  889, 1163,  892, 1163,  775, 1163, 1163,  786,
 /*   380 */  1163,  784,  788, 1163,  790, 1163, 1163,  799, 1163, 1163,
 /*   390 */   801, 1163, 1163,  803, 1163, 1163,  808, 1163,  812, 1163,
 /*   400 */   815, 1163,  818, 1163,  825, 1163, 1163, 1163, 1163, 1163,
 /*   410 */  1163,  850, 1163, 1163,  854,  855, 1163, 1163, 1163, 1163,
 /*   420 */  1163, 1163, 1104, 1163, 1109, 1163, 1163, 1163, 1163, 1119,
 /*   430 */   748,  749,  753,  754,  755,  959,  960,  756,  757,  758,
 /*   440 */   759,  760,  761,  762,  858,  764,  859,  873,  874,  891,
 /*   450 */   935,  937,  938,  939,  940,  941,  942,  943,  944,  945,
 /*   460 */   946,  947,  948,  763,  949,  950,  951,  936,  953,  954,
 /*   470 */   955,  956,  961,  962,  975,  976,  978,  979,  981,  982,
 /*   480 */   983,  957, 1010,  893,  894, 1015, 1016, 1011, 1018, 1019,
 /*   490 */  1020, 1021,  963, 1022,  974,  925,  926,  928,  931,  932,
 /*   500 */   934, 1061, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
 /*   510 */  1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
 /*   520 */  1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
 /*   530 */  1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
 /*   540 */  1159, 1160, 1161, 1162, 1052, 1060,  927, 1050, 1051, 1062,
 /*   550 */  1012, 1024, 1026, 1036, 1037,  914,  915,  916,  918,  919,
 /*   560 */  1063, 1064, 1065,  920,  913,  922,  923,  924, 1066, 1067,
 /*   570 */  1068, 1069, 1070, 1071, 1072, 1073, 1074,  921,  980, 1039,
 /*   580 */  1028, 1030, 1031, 1032, 1033, 1034, 1058, 1056,  977, 1053,
 /*   590 */   952,  989,  984,  997,  998,  987,  988,  991,  992,  993,
 /*   600 */   994, 1002, 1003, 1005, 1006, 1001, 1046, 1047, 1045,  985,
 /*   610 */   986, 1085, 1086, 1087,  765,  766,  767,  768,  769,  773,
 /*   620 */   877, 1077, 1078, 1080, 1083, 1084, 1082,  881,  882,  883,
 /*   630 */   884,  885,  886,  887,  888,  901,  905,  906,  907,  908,
 /*   640 */   909,  903,  904,  896,  897,  898,  890,  910,  879,  880,
 /*   650 */   772,  861,  862,  863,  864,  865,  866,  867,  868,  869,
 /*   660 */   870,  871,  872,  875,  876,  774,  776,  777,  778,  779,
 /*   670 */   780,  781,  782,  785,  792,  787,  789,  791,  794,  800,
 /*   680 */   796,  802,  798,  804,  805,  807,  809,  810,  811,  813,
 /*   690 */   814,  824,  823,  816,  817,  819,  820,  821,  822,  826,
 /*   700 */   827,  828,  829,  830,  831,  832,  835,  836,  837,  833,
 /*   710 */   838,  839,  843,  844,  845,  846,  847,  849,  851,  852,
 /*   720 */   840,  848,  856,  857, 1088, 1089, 1091, 1092, 1093, 1097,
 /*   730 */  1096, 1095, 1098, 1099, 1100, 1101, 1102, 1105, 1108, 1110,
 /*   740 */  1112, 1114, 1115, 1116, 1113, 1117, 1111,  750,
);

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
static $yyFallback = array(
);

/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
function ParseTrace(/* stream */ $TraceFILE, /* string */ $zTracePrompt){
  $this->yyTraceFILE = $TraceFILE;
  $this->yyTracePrompt = $zTracePrompt;
  if( $this->yyTraceFILE===null ) $this->yyTracePrompt = null;
  else if( $this->yyTracePrompt===null ) $this->yyTraceFILE = null;
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static $yyTokenName = array( 
  '$',             'SEMI',          'NAME',          'INTNUM',      
  'APPROXNUM',     'DEADTOKEN',     'COMMA',         'CHARACTER',   
  'SET',           'CHAR',          'LPAR',          'RPAR',        
  'VARYING',       'VARCHAR',       'NATIONAL',      'NCHAR',       
  'BLOB',          'BIT',           'NUMERIC',       'DECIMAL',     
  'DEC',           'INTEGER',       'SMALLINT',      'FLOAT',       
  'REAL',          'DOUBLE',        'PRECISION',     'DATE',        
  'DATETIME',      'TIME',          'TIMESTAMP',     'WITH',        
  'ZONE',          'INTERVAL',      'TO',            'YEAR',        
  'MONTH',         'DAY',           'HOUR',          'MINUTE',      
  'SECOND',        'PERIOD',        'DEFAULT',       'USER',        
  'CURRENT_USER',  'SESSION_USER',  'SYSTEM_USER',   'NULL',        
  'PLUS_SIGN',     'MINUS_SIGN',    'CURRENT_TIMESTAMP',  'CONSTRAINT',  
  'NOT',           'UNIQUE',        'AUTO_INCREMENT',  'PRIMARY',     
  'KEY',           'REFERENCES',    'MATCH',         'FULL',        
  'PARTIAL',       'ON',            'UPDATE',        'DELETE',      
  'CASCADE',       'NO',            'ACTION',        'CHECK',       
  'OR',            'AND',           'IS',            'ASTERISK',    
  'SOLIDUS',       'STRING',        'COUNT',         'MAX',         
  'MIN',           'DISTINCT',      'ALL',           'UNION',       
  'EXCEPT',        'INTERSECT',     'SELECT',        'AS',          
  'LIMIT',         'OFFSET',        'ORDER',         'BY',          
  'ASC',           'DESC',          'FROM',          'CROSS',       
  'JOIN',          'NATURAL',       'INNER',         'OUTER',       
  'LEFT',          'RIGHT',         'USING',         'WHERE',       
  'GROUP',         'HAVING',        'VALUES',        'TABLE',       
  'CORRESPONDING',  'NULLX',         'TRUE',          'FALSE',       
  'UNKNOWN',       'OP_EQ',         'OP_GTLT',       'OP_LT',       
  'OP_GT',         'OP_LTEQ',       'OP_GTEQ',       'OP_LIKE',     
  'DEFERRABLE',    'INITIALLY',     'DEFERRED',      'IMMEDIATE',   
  'CREATE',        'RESTRICT',      'DROP',          'IF',          
  'EXISTS',        'INSERT',        'INTO',          'ABS',         
  'ACOS',          'ASIN',          'ATAN',          'ATAN2',       
  'CEIL',          'COS',           'COT',           'CRC32',       
  'DEGREES',       'EXP',           'FLOOR',         'FORMAT',      
  'LN',            'LOG',           'LOG2',          'LOG10',       
  'MOD',           'PI',            'POW',           'RADIANS',     
  'ROUND',         'SIGN',          'SIN',           'SQRT',        
  'TAN',           'TRUNCATE',      'DAYOFWEEK',     'DAYOFYEAR',   
  'NOW',           'WEEKDAY',       'WEEKOFYEAR',    'error',       
  'statement',     'query_list',    'query',         'optional_semi',
  'query_specification',  'sql_data_statement',  'sql_schema_statement',  'regular_identifier',
  'unsigned_numeric_literal',  'schema_name',   'unqualified_schema_name',  'identifier',  
  'actual_identifier',  'column_name',   'qualified_identifier',  'table_element_list',
  'table_element',  'column_definition',  'table_constraint_definition',  'data_type',   
  'default_clause',  'column_constraints',  'column_constraint_definition',  'character_set_specification',
  'character_string_type',  'national_character_string_type',  'binary_large_object_type',  'bit_string_type',
  'numeric_type',  'datetime_type',  'interval_type',  'length',      
  'exact_numeric_type',  'approximate_numeric_type',  'precision',     'scale',       
  'with_time_zone',  'time_precision',  'time_fractional_seconds_precision',  'interval_qualifier',
  'start_field',   'end_field',     'single_datetime_field',  'non_second_datetime_field',
  'interval_leading_field_precision',  'interval_fractional_seconds_precision',  'qualified_name',  'default_option',
  'literal',       'datetime_value_function',  'signed_numeric_literal',  'general_literal',
  'sign',          'current_timestamp_value_function',  'constraint_name_definition',  'column_constraint',
  'constraint_attributes',  'constraint_name',  'unique_specification',  'references_specification',
  'check_constraint_definition',  'referenced_table_and_columns',  'reference_match_type',  'referential_triggered_action',
  'table_name',    'reference_column_list',  'column_name_list',  'match_type',  
  'update_rule',   'delete_rule',   'referential_action',  'search_condition',
  'boolean_term',  'boolean_factor',  'boolean_test',  'boolean_primary',
  'truth_value',   'predicate',     'comparison_predicate',  'null_predicate',
  'row_value_constructor',  'comp_op',       'row_value_constructor_element',  'row_value_constructor_list',
  'row_subquery',  'value_expression',  'numeric_value_expression',  'term',        
  'math_numeric_value_expression',  'date_value_expression',  'factor',        'numeric_primary',
  'value_expression_primary',  'unsigned_value_specification',  'column_reference',  'scalar_subquery',
  'set_function_specification',  'unsigned_literal',  'qualifier',     'general_set_function',
  'set_function_type',  'set_quantifier',  'correlation_name',  'subquery',    
  'query_expression',  'non_join_query_expression',  'joined_table',  'non_join_query_term',
  'query_term',    'corresponding_spec',  'non_join_query_primary',  'query_primary',
  'simple_table',  'table_value_constructor',  'explicit_table',  'select_list', 
  'table_expression',  'limit_clause',  'select_sublist',  'derived_column',
  'as_clause',     'from_clause',   'where_clause',  'group_by_clause',
  'having_clause',  'orderby_clause',  'orderby_expression_list',  'orderby_expression',
  'ordering',      'table_reference',  'correlation_specification',  'derived_table',
  'derived_column_list',  'table_subquery',  'cross_join',    'qualified_join',
  'natural_join',  'join_type',     'join_specification',  'outer_join_type',
  'join_condition',  'named_columns_join',  'join_column_list',  'grouping_column_reference_list',
  'grouping_column_reference',  'table_value_constructor_list',  'corresponding_column_list',  'constraint_check_time',
  'sql_schema_definition_statement',  'sql_schema_manipulation_statement',  'table_definition',  'drop_table_statement',
  'drop_behaviour',  'drop_if_exists',  'tables_list',   'sql_data_change_statement',
  'delete_statement_searched',  'insert_statement',  'update_statement_searched',  'delete_statement_where_search',
  'insert_columns_and_source',  'insert_column_list',  'set_clause_list',  'set_clause',  
  'object_column',  'update_source',  'update_statement_where_search',
);

/* For tracing reduce actions, the names of all rules are required.
*/
static $yyRuleName = array(
 /*   0 */ "statement ::= query_list",
 /*   1 */ "query_list ::= query SEMI query_list",
 /*   2 */ "query_list ::= query optional_semi",
 /*   3 */ "optional_semi ::=",
 /*   4 */ "optional_semi ::= SEMI",
 /*   5 */ "query ::= query_specification",
 /*   6 */ "query ::= sql_data_statement",
 /*   7 */ "query ::= sql_schema_statement",
 /*   8 */ "regular_identifier ::= NAME",
 /*   9 */ "unsigned_numeric_literal ::= INTNUM",
 /*  10 */ "unsigned_numeric_literal ::= APPROXNUM",
 /*  11 */ "schema_name ::= unqualified_schema_name",
 /*  12 */ "identifier ::= actual_identifier",
 /*  13 */ "actual_identifier ::= regular_identifier",
 /*  14 */ "unqualified_schema_name ::= DEADTOKEN",
 /*  15 */ "column_name ::= identifier",
 /*  16 */ "qualified_identifier ::= identifier",
 /*  17 */ "table_element_list ::= table_element",
 /*  18 */ "table_element_list ::= table_element_list COMMA table_element",
 /*  19 */ "table_element ::= column_definition",
 /*  20 */ "table_element ::= table_constraint_definition",
 /*  21 */ "table_constraint_definition ::= DEADTOKEN",
 /*  22 */ "column_definition ::= column_name data_type default_clause column_constraints",
 /*  23 */ "column_constraints ::=",
 /*  24 */ "column_constraints ::= column_constraint_definition",
 /*  25 */ "column_constraints ::= column_constraints column_constraint_definition",
 /*  26 */ "character_set_specification ::= DEADTOKEN",
 /*  27 */ "data_type ::= character_string_type",
 /*  28 */ "data_type ::= character_string_type CHARACTER SET character_set_specification",
 /*  29 */ "data_type ::= national_character_string_type",
 /*  30 */ "data_type ::= binary_large_object_type",
 /*  31 */ "data_type ::= bit_string_type",
 /*  32 */ "data_type ::= numeric_type",
 /*  33 */ "data_type ::= datetime_type",
 /*  34 */ "data_type ::= interval_type",
 /*  35 */ "character_string_type ::= CHARACTER",
 /*  36 */ "character_string_type ::= CHAR",
 /*  37 */ "character_string_type ::= CHARACTER LPAR length RPAR",
 /*  38 */ "character_string_type ::= CHARACTER VARYING",
 /*  39 */ "character_string_type ::= CHARACTER VARYING LPAR length RPAR",
 /*  40 */ "character_string_type ::= CHAR VARYING",
 /*  41 */ "character_string_type ::= CHAR VARYING LPAR length RPAR",
 /*  42 */ "character_string_type ::= VARCHAR",
 /*  43 */ "character_string_type ::= VARCHAR LPAR length RPAR",
 /*  44 */ "length ::= INTNUM",
 /*  45 */ "national_character_string_type ::= NATIONAL CHARACTER",
 /*  46 */ "national_character_string_type ::= NATIONAL CHARACTER LPAR length RPAR",
 /*  47 */ "national_character_string_type ::= NATIONAL CHAR",
 /*  48 */ "national_character_string_type ::= NATIONAL CHAR LPAR length RPAR",
 /*  49 */ "national_character_string_type ::= NCHAR",
 /*  50 */ "national_character_string_type ::= NCHAR LPAR length RPAR",
 /*  51 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING",
 /*  52 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING LPAR length RPAR",
 /*  53 */ "national_character_string_type ::= NATIONAL CHAR VARYING",
 /*  54 */ "national_character_string_type ::= NATIONAL CHAR VARYING LPAR length RPAR",
 /*  55 */ "national_character_string_type ::= NCHAR VARYING",
 /*  56 */ "national_character_string_type ::= NCHAR VARYING LPAR length RPAR",
 /*  57 */ "binary_large_object_type ::= BLOB",
 /*  58 */ "bit_string_type ::= BIT",
 /*  59 */ "bit_string_type ::= BIT LPAR length RPAR",
 /*  60 */ "bit_string_type ::= BIT VARYING",
 /*  61 */ "bit_string_type ::= BIT VARYING LPAR length RPAR",
 /*  62 */ "numeric_type ::= exact_numeric_type",
 /*  63 */ "numeric_type ::= approximate_numeric_type",
 /*  64 */ "exact_numeric_type ::= NUMERIC",
 /*  65 */ "exact_numeric_type ::= NUMERIC LPAR precision RPAR",
 /*  66 */ "exact_numeric_type ::= NUMERIC LPAR precision COMMA scale RPAR",
 /*  67 */ "exact_numeric_type ::= DECIMAL",
 /*  68 */ "exact_numeric_type ::= DECIMAL LPAR precision RPAR",
 /*  69 */ "exact_numeric_type ::= DECIMAL LPAR precision COMMA scale RPAR",
 /*  70 */ "exact_numeric_type ::= DEC",
 /*  71 */ "exact_numeric_type ::= DEC LPAR precision RPAR",
 /*  72 */ "exact_numeric_type ::= DEC LPAR precision COMMA scale RPAR",
 /*  73 */ "exact_numeric_type ::= INTEGER",
 /*  74 */ "exact_numeric_type ::= SMALLINT",
 /*  75 */ "precision ::= INTNUM",
 /*  76 */ "scale ::= INTNUM",
 /*  77 */ "approximate_numeric_type ::= FLOAT",
 /*  78 */ "approximate_numeric_type ::= FLOAT LPAR precision RPAR",
 /*  79 */ "approximate_numeric_type ::= REAL",
 /*  80 */ "approximate_numeric_type ::= DOUBLE PRECISION",
 /*  81 */ "datetime_type ::= DATE",
 /*  82 */ "datetime_type ::= DATETIME",
 /*  83 */ "datetime_type ::= TIME with_time_zone",
 /*  84 */ "datetime_type ::= TIME LPAR time_precision RPAR with_time_zone",
 /*  85 */ "datetime_type ::= TIMESTAMP",
 /*  86 */ "with_time_zone ::=",
 /*  87 */ "with_time_zone ::= WITH TIME ZONE",
 /*  88 */ "time_precision ::= time_fractional_seconds_precision",
 /*  89 */ "time_fractional_seconds_precision ::= INTNUM",
 /*  90 */ "interval_type ::= INTERVAL interval_qualifier",
 /*  91 */ "interval_qualifier ::= start_field TO end_field",
 /*  92 */ "interval_qualifier ::= single_datetime_field",
 /*  93 */ "start_field ::= non_second_datetime_field",
 /*  94 */ "start_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /*  95 */ "non_second_datetime_field ::= YEAR",
 /*  96 */ "non_second_datetime_field ::= MONTH",
 /*  97 */ "non_second_datetime_field ::= DAY",
 /*  98 */ "non_second_datetime_field ::= HOUR",
 /*  99 */ "non_second_datetime_field ::= MINUTE",
 /* 100 */ "interval_leading_field_precision ::= INTNUM",
 /* 101 */ "end_field ::= non_second_datetime_field",
 /* 102 */ "end_field ::= SECOND",
 /* 103 */ "end_field ::= SECOND LPAR interval_fractional_seconds_precision RPAR",
 /* 104 */ "interval_fractional_seconds_precision ::= INTNUM",
 /* 105 */ "single_datetime_field ::= non_second_datetime_field",
 /* 106 */ "single_datetime_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /* 107 */ "single_datetime_field ::= SECOND",
 /* 108 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision RPAR",
 /* 109 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision COMMA LPAR interval_fractional_seconds_precision RPAR RPAR",
 /* 110 */ "qualified_name ::= qualified_identifier",
 /* 111 */ "qualified_name ::= schema_name PERIOD qualified_identifier",
 /* 112 */ "default_clause ::=",
 /* 113 */ "default_clause ::= DEFAULT default_option",
 /* 114 */ "default_option ::= literal",
 /* 115 */ "default_option ::= datetime_value_function",
 /* 116 */ "default_option ::= USER",
 /* 117 */ "default_option ::= CURRENT_USER",
 /* 118 */ "default_option ::= SESSION_USER",
 /* 119 */ "default_option ::= SYSTEM_USER",
 /* 120 */ "default_option ::= NULL",
 /* 121 */ "literal ::= signed_numeric_literal",
 /* 122 */ "literal ::= general_literal",
 /* 123 */ "signed_numeric_literal ::= unsigned_numeric_literal",
 /* 124 */ "signed_numeric_literal ::= sign unsigned_numeric_literal",
 /* 125 */ "sign ::= PLUS_SIGN",
 /* 126 */ "sign ::= MINUS_SIGN",
 /* 127 */ "datetime_value_function ::= current_timestamp_value_function",
 /* 128 */ "current_timestamp_value_function ::= CURRENT_TIMESTAMP",
 /* 129 */ "column_constraint_definition ::= constraint_name_definition column_constraint constraint_attributes",
 /* 130 */ "constraint_name_definition ::=",
 /* 131 */ "constraint_name_definition ::= CONSTRAINT constraint_name",
 /* 132 */ "constraint_name ::= qualified_name",
 /* 133 */ "column_constraint ::= NOT NULL",
 /* 134 */ "column_constraint ::= unique_specification",
 /* 135 */ "column_constraint ::= references_specification",
 /* 136 */ "column_constraint ::= check_constraint_definition",
 /* 137 */ "unique_specification ::= UNIQUE",
 /* 138 */ "unique_specification ::= AUTO_INCREMENT",
 /* 139 */ "unique_specification ::= PRIMARY KEY",
 /* 140 */ "references_specification ::= REFERENCES referenced_table_and_columns reference_match_type referential_triggered_action",
 /* 141 */ "referenced_table_and_columns ::= table_name",
 /* 142 */ "referenced_table_and_columns ::= table_name LPAR reference_column_list RPAR",
 /* 143 */ "table_name ::= qualified_name",
 /* 144 */ "reference_column_list ::= column_name_list",
 /* 145 */ "column_name_list ::= column_name",
 /* 146 */ "column_name_list ::= column_name_list COMMA column_name",
 /* 147 */ "reference_match_type ::=",
 /* 148 */ "reference_match_type ::= MATCH match_type",
 /* 149 */ "match_type ::= FULL",
 /* 150 */ "match_type ::= PARTIAL",
 /* 151 */ "referential_triggered_action ::=",
 /* 152 */ "referential_triggered_action ::= update_rule",
 /* 153 */ "referential_triggered_action ::= update_rule delete_rule",
 /* 154 */ "referential_triggered_action ::= delete_rule",
 /* 155 */ "referential_triggered_action ::= delete_rule update_rule",
 /* 156 */ "update_rule ::= ON UPDATE referential_action",
 /* 157 */ "delete_rule ::= ON DELETE referential_action",
 /* 158 */ "referential_action ::= CASCADE",
 /* 159 */ "referential_action ::= SET NULL",
 /* 160 */ "referential_action ::= SET DEFAULT",
 /* 161 */ "referential_action ::= NO ACTION",
 /* 162 */ "check_constraint_definition ::= CHECK LPAR search_condition RPAR",
 /* 163 */ "search_condition ::= boolean_term",
 /* 164 */ "search_condition ::= search_condition OR boolean_term",
 /* 165 */ "boolean_term ::= boolean_factor",
 /* 166 */ "boolean_term ::= boolean_term AND boolean_factor",
 /* 167 */ "boolean_factor ::= boolean_test",
 /* 168 */ "boolean_factor ::= NOT boolean_test",
 /* 169 */ "boolean_test ::= boolean_primary",
 /* 170 */ "boolean_test ::= boolean_primary IS truth_value",
 /* 171 */ "boolean_test ::= boolean_primary IS NOT truth_value",
 /* 172 */ "boolean_primary ::= predicate",
 /* 173 */ "boolean_primary ::= LPAR search_condition RPAR",
 /* 174 */ "predicate ::= comparison_predicate",
 /* 175 */ "predicate ::= null_predicate",
 /* 176 */ "comparison_predicate ::= row_value_constructor comp_op row_value_constructor",
 /* 177 */ "row_value_constructor ::= row_value_constructor_element",
 /* 178 */ "row_value_constructor ::= LPAR row_value_constructor_list RPAR",
 /* 179 */ "row_value_constructor ::= row_subquery",
 /* 180 */ "row_value_constructor_element ::= value_expression",
 /* 181 */ "value_expression ::= numeric_value_expression",
 /* 182 */ "numeric_value_expression ::= term",
 /* 183 */ "numeric_value_expression ::= math_numeric_value_expression",
 /* 184 */ "numeric_value_expression ::= date_value_expression",
 /* 185 */ "numeric_value_expression ::= numeric_value_expression sign term",
 /* 186 */ "term ::= factor",
 /* 187 */ "term ::= term ASTERISK factor",
 /* 188 */ "term ::= term SOLIDUS factor",
 /* 189 */ "factor ::= numeric_primary",
 /* 190 */ "factor ::= sign numeric_primary",
 /* 191 */ "numeric_primary ::= value_expression_primary",
 /* 192 */ "value_expression_primary ::= unsigned_value_specification",
 /* 193 */ "value_expression_primary ::= column_reference",
 /* 194 */ "value_expression_primary ::= scalar_subquery",
 /* 195 */ "value_expression_primary ::= set_function_specification",
 /* 196 */ "unsigned_value_specification ::= unsigned_literal",
 /* 197 */ "unsigned_literal ::= unsigned_numeric_literal",
 /* 198 */ "unsigned_literal ::= general_literal",
 /* 199 */ "general_literal ::= STRING",
 /* 200 */ "column_reference ::= column_name",
 /* 201 */ "column_reference ::= qualifier PERIOD column_name",
 /* 202 */ "set_function_specification ::= COUNT LPAR ASTERISK RPAR",
 /* 203 */ "set_function_specification ::= general_set_function",
 /* 204 */ "general_set_function ::= set_function_type LPAR set_quantifier value_expression RPAR",
 /* 205 */ "set_function_type ::= MAX",
 /* 206 */ "set_function_type ::= MIN",
 /* 207 */ "qualifier ::= table_name",
 /* 208 */ "qualifier ::= correlation_name",
 /* 209 */ "correlation_name ::= identifier",
 /* 210 */ "set_quantifier ::=",
 /* 211 */ "set_quantifier ::= DISTINCT",
 /* 212 */ "set_quantifier ::= ALL",
 /* 213 */ "scalar_subquery ::= subquery",
 /* 214 */ "subquery ::= LPAR query_expression RPAR",
 /* 215 */ "query_expression ::= non_join_query_expression",
 /* 216 */ "query_expression ::= joined_table",
 /* 217 */ "non_join_query_expression ::= non_join_query_term",
 /* 218 */ "non_join_query_expression ::= query_expression UNION query_term",
 /* 219 */ "non_join_query_expression ::= query_expression UNION ALL query_term",
 /* 220 */ "non_join_query_expression ::= query_expression UNION corresponding_spec query_term",
 /* 221 */ "non_join_query_expression ::= query_expression UNION ALL corresponding_spec query_term",
 /* 222 */ "non_join_query_expression ::= query_expression EXCEPT query_term",
 /* 223 */ "non_join_query_expression ::= query_expression EXCEPT ALL query_term",
 /* 224 */ "non_join_query_expression ::= query_expression EXCEPT corresponding_spec query_term",
 /* 225 */ "non_join_query_expression ::= query_expression EXCEPT ALL corresponding_spec query_term",
 /* 226 */ "non_join_query_term ::= non_join_query_primary",
 /* 227 */ "non_join_query_term ::= query_term INTERSECT query_primary",
 /* 228 */ "non_join_query_term ::= query_term INTERSECT ALL query_primary",
 /* 229 */ "non_join_query_term ::= query_term INTERSECT corresponding_spec query_primary",
 /* 230 */ "non_join_query_term ::= query_term INTERSECT ALL corresponding_spec query_primary",
 /* 231 */ "non_join_query_primary ::= simple_table",
 /* 232 */ "non_join_query_primary ::= LPAR non_join_query_expression RPAR",
 /* 233 */ "simple_table ::= query_specification",
 /* 234 */ "simple_table ::= table_value_constructor",
 /* 235 */ "simple_table ::= explicit_table",
 /* 236 */ "query_specification ::= SELECT set_quantifier select_list table_expression limit_clause",
 /* 237 */ "select_list ::= ASTERISK",
 /* 238 */ "select_list ::= select_sublist",
 /* 239 */ "select_list ::= select_list COMMA select_sublist",
 /* 240 */ "select_sublist ::= derived_column",
 /* 241 */ "select_sublist ::= qualifier PERIOD ASTERISK",
 /* 242 */ "derived_column ::= value_expression",
 /* 243 */ "derived_column ::= value_expression as_clause",
 /* 244 */ "as_clause ::= column_name",
 /* 245 */ "as_clause ::= AS column_name",
 /* 246 */ "table_expression ::= from_clause where_clause group_by_clause having_clause orderby_clause",
 /* 247 */ "limit_clause ::=",
 /* 248 */ "limit_clause ::= LIMIT INTNUM",
 /* 249 */ "limit_clause ::= LIMIT INTNUM OFFSET INTNUM",
 /* 250 */ "limit_clause ::= LIMIT INTNUM COMMA INTNUM",
 /* 251 */ "orderby_clause ::=",
 /* 252 */ "orderby_clause ::= ORDER BY orderby_expression_list",
 /* 253 */ "orderby_expression_list ::= orderby_expression",
 /* 254 */ "orderby_expression_list ::= orderby_expression_list COMMA orderby_expression",
 /* 255 */ "orderby_expression ::= value_expression ordering",
 /* 256 */ "ordering ::=",
 /* 257 */ "ordering ::= ASC",
 /* 258 */ "ordering ::= DESC",
 /* 259 */ "from_clause ::= FROM table_reference",
 /* 260 */ "from_clause ::= table_reference COMMA table_reference",
 /* 261 */ "table_reference ::= table_name",
 /* 262 */ "table_reference ::= table_name correlation_specification",
 /* 263 */ "table_reference ::= derived_table correlation_specification",
 /* 264 */ "table_reference ::= joined_table",
 /* 265 */ "correlation_specification ::= correlation_name",
 /* 266 */ "correlation_specification ::= AS correlation_name",
 /* 267 */ "correlation_specification ::= correlation_name LPAR derived_column_list RPAR",
 /* 268 */ "correlation_specification ::= AS correlation_name LPAR derived_column_list RPAR",
 /* 269 */ "derived_column_list ::= column_name_list",
 /* 270 */ "derived_table ::= table_subquery",
 /* 271 */ "table_subquery ::= subquery",
 /* 272 */ "joined_table ::= cross_join",
 /* 273 */ "joined_table ::= qualified_join",
 /* 274 */ "joined_table ::= LPAR joined_table RPAR",
 /* 275 */ "cross_join ::= table_reference CROSS JOIN table_reference",
 /* 276 */ "qualified_join ::= table_reference natural_join join_type JOIN table_reference join_specification",
 /* 277 */ "natural_join ::=",
 /* 278 */ "natural_join ::= NATURAL",
 /* 279 */ "join_type ::=",
 /* 280 */ "join_type ::= INNER",
 /* 281 */ "join_type ::= outer_join_type",
 /* 282 */ "join_type ::= outer_join_type OUTER",
 /* 283 */ "join_type ::= UNION",
 /* 284 */ "outer_join_type ::= LEFT",
 /* 285 */ "outer_join_type ::= RIGHT",
 /* 286 */ "outer_join_type ::= FULL",
 /* 287 */ "join_specification ::=",
 /* 288 */ "join_specification ::= join_condition",
 /* 289 */ "join_specification ::= named_columns_join",
 /* 290 */ "join_condition ::= ON search_condition",
 /* 291 */ "named_columns_join ::= USING LPAR join_column_list RPAR",
 /* 292 */ "join_column_list ::= column_name_list",
 /* 293 */ "where_clause ::=",
 /* 294 */ "where_clause ::= WHERE search_condition",
 /* 295 */ "group_by_clause ::=",
 /* 296 */ "group_by_clause ::= GROUP BY grouping_column_reference_list",
 /* 297 */ "grouping_column_reference_list ::= grouping_column_reference",
 /* 298 */ "grouping_column_reference_list ::= grouping_column_reference_list COMMA grouping_column_reference",
 /* 299 */ "grouping_column_reference ::= column_reference",
 /* 300 */ "having_clause ::=",
 /* 301 */ "having_clause ::= HAVING search_condition",
 /* 302 */ "table_value_constructor ::= VALUES table_value_constructor_list",
 /* 303 */ "table_value_constructor_list ::= row_value_constructor",
 /* 304 */ "explicit_table ::= TABLE table_name",
 /* 305 */ "query_term ::= non_join_query_term",
 /* 306 */ "query_term ::= joined_table",
 /* 307 */ "corresponding_spec ::= CORRESPONDING",
 /* 308 */ "corresponding_spec ::= CORRESPONDING BY LPAR corresponding_column_list RPAR",
 /* 309 */ "corresponding_column_list ::= column_name_list",
 /* 310 */ "query_primary ::= non_join_query_primary",
 /* 311 */ "query_primary ::= joined_table",
 /* 312 */ "row_value_constructor_list ::= row_value_constructor_element",
 /* 313 */ "row_value_constructor_list ::= row_value_constructor_list COMMA row_value_constructor_element",
 /* 314 */ "row_subquery ::= NULLX",
 /* 315 */ "truth_value ::= TRUE",
 /* 316 */ "truth_value ::= FALSE",
 /* 317 */ "truth_value ::= UNKNOWN",
 /* 318 */ "comp_op ::= OP_EQ",
 /* 319 */ "comp_op ::= OP_GTLT",
 /* 320 */ "comp_op ::= OP_LT",
 /* 321 */ "comp_op ::= OP_GT",
 /* 322 */ "comp_op ::= OP_LTEQ",
 /* 323 */ "comp_op ::= OP_GTEQ",
 /* 324 */ "comp_op ::= OP_LIKE",
 /* 325 */ "null_predicate ::= column_reference IS NULLX",
 /* 326 */ "null_predicate ::= column_reference IS NOT NULLX",
 /* 327 */ "constraint_attributes ::=",
 /* 328 */ "constraint_attributes ::= constraint_check_time",
 /* 329 */ "constraint_attributes ::= constraint_check_time DEFERRABLE",
 /* 330 */ "constraint_attributes ::= constraint_check_time NOT DEFERRABLE",
 /* 331 */ "constraint_attributes ::= DEFERRABLE",
 /* 332 */ "constraint_attributes ::= DEFERRABLE constraint_check_time",
 /* 333 */ "constraint_attributes ::= NOT DEFERRABLE",
 /* 334 */ "constraint_attributes ::= NOT DEFERRABLE constraint_check_time",
 /* 335 */ "constraint_check_time ::= INITIALLY DEFERRED",
 /* 336 */ "constraint_check_time ::= INITIALLY IMMEDIATE",
 /* 337 */ "sql_schema_statement ::= sql_schema_definition_statement",
 /* 338 */ "sql_schema_statement ::= sql_schema_manipulation_statement",
 /* 339 */ "sql_schema_definition_statement ::= table_definition",
 /* 340 */ "table_definition ::= CREATE TABLE table_name LPAR table_element_list RPAR",
 /* 341 */ "sql_schema_manipulation_statement ::= drop_table_statement",
 /* 342 */ "drop_behaviour ::=",
 /* 343 */ "drop_behaviour ::= CASCADE",
 /* 344 */ "drop_behaviour ::= RESTRICT",
 /* 345 */ "drop_table_statement ::= DROP TABLE drop_if_exists tables_list drop_behaviour",
 /* 346 */ "drop_if_exists ::=",
 /* 347 */ "drop_if_exists ::= IF EXISTS",
 /* 348 */ "tables_list ::= table_name",
 /* 349 */ "tables_list ::= tables_list COMMA table_name",
 /* 350 */ "sql_data_statement ::= sql_data_change_statement",
 /* 351 */ "sql_data_change_statement ::= delete_statement_searched",
 /* 352 */ "sql_data_change_statement ::= insert_statement",
 /* 353 */ "sql_data_change_statement ::= update_statement_searched",
 /* 354 */ "delete_statement_searched ::= DELETE FROM table_name delete_statement_where_search",
 /* 355 */ "delete_statement_where_search ::=",
 /* 356 */ "delete_statement_where_search ::= WHERE search_condition",
 /* 357 */ "insert_statement ::= INSERT INTO table_name insert_columns_and_source",
 /* 358 */ "insert_columns_and_source ::= LPAR insert_column_list RPAR query_expression",
 /* 359 */ "insert_columns_and_source ::= query_expression",
 /* 360 */ "insert_columns_and_source ::= DEFAULT VALUES",
 /* 361 */ "insert_column_list ::= column_name_list",
 /* 362 */ "set_clause_list ::= set_clause_list COMMA set_clause",
 /* 363 */ "set_clause_list ::= set_clause",
 /* 364 */ "set_clause ::= object_column OP_EQ update_source",
 /* 365 */ "object_column ::= column_name",
 /* 366 */ "update_source ::= value_expression",
 /* 367 */ "update_source ::= NULL",
 /* 368 */ "update_source ::= DEFAULT",
 /* 369 */ "update_statement_searched ::= UPDATE table_name SET set_clause_list update_statement_where_search",
 /* 370 */ "update_statement_where_search ::=",
 /* 371 */ "update_statement_where_search ::= WHERE search_condition",
 /* 372 */ "math_numeric_value_expression ::= ABS LPAR numeric_value_expression RPAR",
 /* 373 */ "math_numeric_value_expression ::= ACOS LPAR numeric_value_expression RPAR",
 /* 374 */ "math_numeric_value_expression ::= ASIN LPAR numeric_value_expression RPAR",
 /* 375 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression RPAR",
 /* 376 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 377 */ "math_numeric_value_expression ::= ATAN2 LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 378 */ "math_numeric_value_expression ::= CEIL LPAR numeric_value_expression RPAR",
 /* 379 */ "math_numeric_value_expression ::= COS LPAR numeric_value_expression RPAR",
 /* 380 */ "math_numeric_value_expression ::= COT LPAR numeric_value_expression RPAR",
 /* 381 */ "math_numeric_value_expression ::= CRC32 LPAR numeric_value_expression RPAR",
 /* 382 */ "math_numeric_value_expression ::= DEGREES LPAR numeric_value_expression RPAR",
 /* 383 */ "math_numeric_value_expression ::= EXP LPAR numeric_value_expression RPAR",
 /* 384 */ "math_numeric_value_expression ::= FLOOR LPAR numeric_value_expression RPAR",
 /* 385 */ "math_numeric_value_expression ::= FORMAT LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 386 */ "math_numeric_value_expression ::= LN LPAR numeric_value_expression RPAR",
 /* 387 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression RPAR",
 /* 388 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 389 */ "math_numeric_value_expression ::= LOG2 LPAR numeric_value_expression RPAR",
 /* 390 */ "math_numeric_value_expression ::= LOG10 LPAR numeric_value_expression RPAR",
 /* 391 */ "math_numeric_value_expression ::= MOD LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 392 */ "math_numeric_value_expression ::= PI LPAR RPAR",
 /* 393 */ "math_numeric_value_expression ::= POW LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 394 */ "math_numeric_value_expression ::= RADIANS LPAR numeric_value_expression RPAR",
 /* 395 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression RPAR",
 /* 396 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 397 */ "math_numeric_value_expression ::= SIGN LPAR numeric_value_expression RPAR",
 /* 398 */ "math_numeric_value_expression ::= SIN LPAR numeric_value_expression RPAR",
 /* 399 */ "math_numeric_value_expression ::= SQRT LPAR numeric_value_expression RPAR",
 /* 400 */ "math_numeric_value_expression ::= TAN LPAR numeric_value_expression RPAR",
 /* 401 */ "math_numeric_value_expression ::= TRUNCATE LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 402 */ "date_value_expression ::= CURRENT_TIMESTAMP LPAR RPAR",
 /* 403 */ "date_value_expression ::= CURRENT_TIMESTAMP",
 /* 404 */ "date_value_expression ::= DAY LPAR numeric_value_expression RPAR",
 /* 405 */ "date_value_expression ::= DAYOFWEEK LPAR numeric_value_expression RPAR",
 /* 406 */ "date_value_expression ::= DAYOFYEAR LPAR numeric_value_expression RPAR",
 /* 407 */ "date_value_expression ::= HOUR LPAR numeric_value_expression RPAR",
 /* 408 */ "date_value_expression ::= MINUTE LPAR numeric_value_expression RPAR",
 /* 409 */ "date_value_expression ::= MONTH LPAR numeric_value_expression RPAR",
 /* 410 */ "date_value_expression ::= NOW LPAR RPAR",
 /* 411 */ "date_value_expression ::= SECOND LPAR numeric_value_expression RPAR",
 /* 412 */ "date_value_expression ::= WEEKDAY LPAR numeric_value_expression RPAR",
 /* 413 */ "date_value_expression ::= WEEKOFYEAR LPAR numeric_value_expression RPAR",
 /* 414 */ "date_value_expression ::= YEAR LPAR numeric_value_expression RPAR",
);

/*
** This function returns the symbolic name associated with a token
** value.
*/
function ParseTokenName(/* int */ $tokenType){
  if (isset(self::$yyTokenName[$tokenType]))
    return self::$yyTokenName[$tokenType];
  return "Unknown";
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
private function yy_destructor($yymajor, $yypminor){
  switch( $yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
private function yy_pop_parser_stack() {
  if ($this->yyidx < 0) return 0;
  $yytos = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE ) {
    fprintf($this->yyTraceFILE,"%sPopping %s\n",
      $this->yyTracePrompt,
      self::$yyTokenName[$yytos->major]);
  }
  $this->yy_destructor( $yytos->major, $yytos->minor);
  unset($this->yystack[$this->yyidx]);
  $this->yyidx--;
  return $yytos->major;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
function __destruct()
{
  while($this->yyidx >= 0)
    $this->yy_pop_parser_stack();
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_shift_action(
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
  $stateno = $this->yystack[$this->yyidx]->stateno;
 
  if( $stateno>self::YY_SHIFT_MAX || 
      ($i = self::$yy_shift_ofst[$stateno])==self::YY_SHIFT_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    if( $iLookAhead>0 ){
      if (isset(self::$yyFallback[$iLookAhead]) &&
        ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n",
             $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], 
             self::$yyTokenName[$iFallback]);
        }
        return $this->yy_find_shift_action($iFallback);
      }
      {
        $j = $i - $iLookAhead + self::YYWILDCARD;
        if( $j>=0 && $j<count(self::$yy_action) && self::$yy_lookahead[$j]==self::YYWILDCARD ){
          if( $this->yyTraceFILE ){
            fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n",
               $this->yyTracePrompt, self::$yyTokenName[$iLookAhead],
               self::$yyTokenName[self::YYWILDCARD]);
          }
          return self::$yy_action[$j];
        }
      }
    }
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_reduce_action(
  $stateno,              /* Current state number */
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
 
  if( $stateno>self::YY_REDUCE_MAX ||
      ($i = self::$yy_reduce_ofst[$stateno])==self::YY_REDUCE_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Perform a shift action.
*/
private function yy_shift(
  $yyNewState,               /* The new state to shift in */
  $yyMajor,                  /* The major token to shift in */
  $yypMinor         /* Pointer ot the minor token to shift in */
){
  $this->yyidx++;
  if (isset($this->yystack[$this->yyidx])) {
    $yytos = $this->yystack[$this->yyidx];
  } else {
    $yytos = new ParseyyStackEntry;
    $this->yystack[$this->yyidx] = $yytos;
  }
  $yytos->stateno = $yyNewState;
  $yytos->major = $yyMajor;
  $yytos->minor = $yypMinor;
  if( $this->yyTraceFILE) {
    fprintf($this->yyTraceFILE,"%sShift %d\n",$this->yyTracePrompt,$yyNewState);
    fprintf($this->yyTraceFILE,"%sStack:",$this->yyTracePrompt);
    for ($i = 1; $i <= $this->yyidx; $i++) {
      $ent = $this->yystack[$i];
      fprintf($this->yyTraceFILE," %s",self::$yyTokenName[$ent->major]);
    }
    fprintf($this->yyTraceFILE,"\n");
  }
}

private function __overflow_dead_code() {
  /* if the stack can overflow (it can't in the PHP implementation)
   * Then the following code would be emitted */
}

/* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule 
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
static $yyRuleInfo = array(
  160, 1,
  161, 3,
  161, 2,
  163, 0,
  163, 1,
  162, 1,
  162, 1,
  162, 1,
  167, 1,
  168, 1,
  168, 1,
  169, 1,
  171, 1,
  172, 1,
  170, 1,
  173, 1,
  174, 1,
  175, 1,
  175, 3,
  176, 1,
  176, 1,
  178, 1,
  177, 4,
  181, 0,
  181, 1,
  181, 2,
  183, 1,
  179, 1,
  179, 4,
  179, 1,
  179, 1,
  179, 1,
  179, 1,
  179, 1,
  179, 1,
  184, 1,
  184, 1,
  184, 4,
  184, 2,
  184, 5,
  184, 2,
  184, 5,
  184, 1,
  184, 4,
  191, 1,
  185, 2,
  185, 5,
  185, 2,
  185, 5,
  185, 1,
  185, 4,
  185, 3,
  185, 6,
  185, 3,
  185, 6,
  185, 2,
  185, 5,
  186, 1,
  187, 1,
  187, 4,
  187, 2,
  187, 5,
  188, 1,
  188, 1,
  192, 1,
  192, 4,
  192, 6,
  192, 1,
  192, 4,
  192, 6,
  192, 1,
  192, 4,
  192, 6,
  192, 1,
  192, 1,
  194, 1,
  195, 1,
  193, 1,
  193, 4,
  193, 1,
  193, 2,
  189, 1,
  189, 1,
  189, 2,
  189, 5,
  189, 1,
  196, 0,
  196, 3,
  197, 1,
  198, 1,
  190, 2,
  199, 3,
  199, 1,
  200, 1,
  200, 4,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  204, 1,
  201, 1,
  201, 1,
  201, 4,
  205, 1,
  202, 1,
  202, 4,
  202, 1,
  202, 4,
  202, 8,
  206, 1,
  206, 3,
  180, 0,
  180, 2,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  208, 1,
  208, 1,
  210, 1,
  210, 2,
  212, 1,
  212, 1,
  209, 1,
  213, 1,
  182, 3,
  214, 0,
  214, 2,
  217, 1,
  215, 2,
  215, 1,
  215, 1,
  215, 1,
  218, 1,
  218, 1,
  218, 2,
  219, 4,
  221, 1,
  221, 4,
  224, 1,
  225, 1,
  226, 1,
  226, 3,
  222, 0,
  222, 2,
  227, 1,
  227, 1,
  223, 0,
  223, 1,
  223, 2,
  223, 1,
  223, 2,
  228, 3,
  229, 3,
  230, 1,
  230, 2,
  230, 2,
  230, 2,
  220, 4,
  231, 1,
  231, 3,
  232, 1,
  232, 3,
  233, 1,
  233, 2,
  234, 1,
  234, 3,
  234, 4,
  235, 1,
  235, 3,
  237, 1,
  237, 1,
  238, 3,
  240, 1,
  240, 3,
  240, 1,
  242, 1,
  245, 1,
  246, 1,
  246, 1,
  246, 1,
  246, 3,
  247, 1,
  247, 3,
  247, 3,
  250, 1,
  250, 2,
  251, 1,
  252, 1,
  252, 1,
  252, 1,
  252, 1,
  253, 1,
  257, 1,
  257, 1,
  211, 1,
  254, 1,
  254, 3,
  256, 4,
  256, 1,
  259, 5,
  260, 1,
  260, 1,
  258, 1,
  258, 1,
  262, 1,
  261, 0,
  261, 1,
  261, 1,
  255, 1,
  263, 3,
  264, 1,
  264, 1,
  265, 1,
  265, 3,
  265, 4,
  265, 4,
  265, 5,
  265, 3,
  265, 4,
  265, 4,
  265, 5,
  267, 1,
  267, 3,
  267, 4,
  267, 4,
  267, 5,
  270, 1,
  270, 3,
  272, 1,
  272, 1,
  272, 1,
  164, 5,
  275, 1,
  275, 1,
  275, 3,
  278, 1,
  278, 3,
  279, 1,
  279, 2,
  280, 1,
  280, 2,
  276, 5,
  277, 0,
  277, 2,
  277, 4,
  277, 4,
  285, 0,
  285, 3,
  286, 1,
  286, 3,
  287, 2,
  288, 0,
  288, 1,
  288, 1,
  281, 2,
  281, 3,
  289, 1,
  289, 2,
  289, 2,
  289, 1,
  290, 1,
  290, 2,
  290, 4,
  290, 5,
  292, 1,
  291, 1,
  293, 1,
  266, 1,
  266, 1,
  266, 3,
  294, 4,
  295, 6,
  296, 0,
  296, 1,
  297, 0,
  297, 1,
  297, 1,
  297, 2,
  297, 1,
  299, 1,
  299, 1,
  299, 1,
  298, 0,
  298, 1,
  298, 1,
  300, 2,
  301, 4,
  302, 1,
  282, 0,
  282, 2,
  283, 0,
  283, 3,
  303, 1,
  303, 3,
  304, 1,
  284, 0,
  284, 2,
  273, 2,
  305, 1,
  274, 2,
  268, 1,
  268, 1,
  269, 1,
  269, 5,
  306, 1,
  271, 1,
  271, 1,
  243, 1,
  243, 3,
  244, 1,
  236, 1,
  236, 1,
  236, 1,
  241, 1,
  241, 1,
  241, 1,
  241, 1,
  241, 1,
  241, 1,
  241, 1,
  239, 3,
  239, 4,
  216, 0,
  216, 1,
  216, 2,
  216, 3,
  216, 1,
  216, 2,
  216, 2,
  216, 3,
  307, 2,
  307, 2,
  166, 1,
  166, 1,
  308, 1,
  310, 6,
  309, 1,
  312, 0,
  312, 1,
  312, 1,
  311, 5,
  313, 0,
  313, 2,
  314, 1,
  314, 3,
  165, 1,
  315, 1,
  315, 1,
  315, 1,
  316, 4,
  319, 0,
  319, 2,
  317, 4,
  320, 4,
  320, 1,
  320, 2,
  321, 1,
  322, 3,
  322, 1,
  323, 3,
  324, 1,
  325, 1,
  325, 1,
  325, 1,
  318, 5,
  326, 0,
  326, 2,
  248, 4,
  248, 4,
  248, 4,
  248, 4,
  248, 6,
  248, 6,
  248, 4,
  248, 4,
  248, 4,
  248, 4,
  248, 4,
  248, 4,
  248, 4,
  248, 6,
  248, 4,
  248, 4,
  248, 6,
  248, 4,
  248, 4,
  248, 6,
  248, 3,
  248, 6,
  248, 4,
  248, 4,
  248, 6,
  248, 4,
  248, 4,
  248, 4,
  248, 4,
  248, 6,
  249, 3,
  249, 1,
  249, 4,
  249, 4,
  249, 4,
  249, 4,
  249, 4,
  249, 4,
  249, 3,
  249, 4,
  249, 4,
  249, 4,
  249, 4,
);

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
private function yy_reduce(
  $yyruleno                 /* Number of the rule by which to reduce */
){
  $yygoto = 0;                     /* The next state */
  $yyact = 0;                      /* The next action */
  $yygotominor = null;        /* The LHS of the rule reduced */
  $yymsp = null;            /* The top of the parser's stack */
  $yysize = 0;                     /* Amount to pop the stack */
  
  $yymsp = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
    fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt,
      self::$yyRuleName[$yyruleno]);
  }

  switch( $yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 15:
      case 16:
      case 19:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 44:
      case 62:
      case 63:
      case 110:
      case 113:
      case 115:
      case 127:
      case 134:
      case 143:
      case 163:
      case 165:
      case 167:
      case 169:
      case 172:
      case 174:
      case 175:
      case 177:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 186:
      case 189:
      case 191:
      case 192:
      case 193:
      case 196:
      case 197:
      case 198:
      case 203:
      case 207:
      case 209:
      case 215:
      case 217:
      case 226:
      case 231:
      case 234:
      case 240:
      case 242:
      case 264:
      case 265:
      case 266:
      case 273:
      case 281:
      case 290:
      case 299:
      case 302:
      case 303:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 337:
      case 338:
      case 341:
      case 350:
      case 351:
      case 352:
      case 353:
      case 356:
      case 361:
      case 366:
      case 371:
#line 6 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;}
#line 3163 "sql.php"
        break;
      case 1:
#line 8 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -2]->minor;if(!(is_array($this->yystack[$this->yyidx + -2]->minor->actions))) echo "b is not an array!!\n";if(!(is_array($this->yystack[$this->yyidx + 0]->minor->actions))) echo "c is not an array!!\n";$yygotominor->actions=array_merge($this->yystack[$this->yyidx + -2]->minor->actions, $this->yystack[$this->yyidx + 0]->minor->actions);}
#line 3168 "sql.php"
        break;
      case 2:
      case 129:
      case 178:
      case 282:
#line 9 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 3176 "sql.php"
        break;
      case 5:
#line 14 "sql.y"
{
		$this->yystack[$this->yyidx + 0]->minor->actions[] = new qpAction_returnRelation($this->yystack[$this->yyidx + 0]->minor->last_relation_id);		
		$yygotominor=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3184 "sql.php"
        break;
      case 6:
#line 18 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;}
#line 3189 "sql.php"
        break;
      case 9:
#line 26 "sql.y"
{$yygotominor = new filter_StaticIntnum($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3194 "sql.php"
        break;
      case 17:
      case 312:
      case 363:
#line 47 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;
	}
#line 3204 "sql.php"
        break;
      case 18:
#line 51 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3212 "sql.php"
        break;
      case 22:
#line 61 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->name = $this->yystack[$this->yyidx + -3]->minor->value;
		if(isset($this->yystack[$this->yyidx + -1]->minor)){
			$this->yystack[$this->yyidx + -2]->minor->default = $this->yystack[$this->yyidx + -1]->minor;
		}
		if(isset($this->yystack[$this->yyidx + 0]->minor)){
			foreach($this->yystack[$this->yyidx + 0]->minor as $constraint){
				if(strtoupper($constraint)=="AUTO_INCREMENT")
					$this->yystack[$this->yyidx + -2]->minor->autoinc=1;
					$this->yystack[$this->yyidx + -2]->minor->is_unique=1;
			}
		}
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3230 "sql.php"
        break;
      case 24:
      case 348:
#line 77 "sql.y"
{$yygotominor = Array(); $yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;}
#line 3236 "sql.php"
        break;
      case 25:
#line 78 "sql.y"
{$this->yystack[$this->yyidx + -1]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 3241 "sql.php"
        break;
      case 37:
#line 102 "sql.y"
{$yygotominor = new PHPFDB_char(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 3246 "sql.php"
        break;
      case 42:
#line 107 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, 666);}
#line 3251 "sql.php"
        break;
      case 43:
#line 108 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 3256 "sql.php"
        break;
      case 57:
#line 125 "sql.y"
{$yygotominor = new PHPFDB_blob(NULL);}
#line 3261 "sql.php"
        break;
      case 73:
#line 144 "sql.y"
{$yygotominor = new PHPFDB_int();}
#line 3266 "sql.php"
        break;
      case 77:
#line 151 "sql.y"
{$yygotominor = new PHPFDB_float();}
#line 3271 "sql.php"
        break;
      case 81:
#line 156 "sql.y"
{$yygotominor = new PHPFDB_date();}
#line 3276 "sql.php"
        break;
      case 82:
#line 157 "sql.y"
{$yygotominor = new PHPFDB_datetime();}
#line 3281 "sql.php"
        break;
      case 85:
#line 160 "sql.y"
{$yygotominor = new PHPFDB_timestamp();}
#line 3286 "sql.php"
        break;
      case 125:
#line 225 "sql.y"
{$yygotominor="plus_sign";}
#line 3291 "sql.php"
        break;
      case 126:
#line 226 "sql.y"
{$yygotominor="minus_sign";}
#line 3296 "sql.php"
        break;
      case 128:
      case 284:
      case 285:
      case 286:
#line 240 "sql.y"
{$yygotominor=strtoupper($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3304 "sql.php"
        break;
      case 138:
      case 244:
      case 245:
#line 259 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3311 "sql.php"
        break;
      case 145:
#line 271 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor->value;
	}
#line 3319 "sql.php"
        break;
      case 146:
#line 275 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor->value;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3327 "sql.php"
        break;
      case 164:
#line 309 "sql.y"
{
		$yygotominor= new filter_OR($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3334 "sql.php"
        break;
      case 166:
#line 314 "sql.y"
{
		$yygotominor= new filter_AND($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3341 "sql.php"
        break;
      case 176:
#line 331 "sql.y"
{
		$yygotominor= new filter_COMP($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3348 "sql.php"
        break;
      case 185:
#line 351 "sql.y"
{ ECHO "TODOTODOTODOTODO";}
#line 3353 "sql.php"
        break;
      case 190:
#line 358 "sql.y"
{$yygotominor= new filter_UnaryMathFunction($this->yystack[$this->yyidx + -1]->minor); $yygotominor->expression=$this->yystack[$this->yyidx + 0]->minor;}
#line 3358 "sql.php"
        break;
      case 195:
#line 366 "sql.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor;}
#line 3363 "sql.php"
        break;
      case 199:
#line 381 "sql.y"
{
	$yygotominor = new filter_StaticString(substr($this->yystack[$this->yyidx + 0]->minor->value, 1, strlen($this->yystack[$this->yyidx + 0]->minor->value)-2));
}
#line 3370 "sql.php"
        break;
      case 200:
      case 365:
#line 413 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3376 "sql.php"
        break;
      case 201:
#line 414 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value, $this->yystack[$this->yyidx + -2]->minor->value);}
#line 3381 "sql.php"
        break;
      case 202:
#line 416 "sql.y"
{$yygotominor = new filter_SetFunction("count_asterisk"); $yygotominor->expression = new filter_EmptyExpression();}
#line 3386 "sql.php"
        break;
      case 204:
#line 419 "sql.y"
{$this->yystack[$this->yyidx + -4]->minor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor=$this->yystack[$this->yyidx + -4]->minor;}
#line 3391 "sql.php"
        break;
      case 205:
#line 421 "sql.y"
{$yygotominor = new filter_SetFunction("max");}
#line 3396 "sql.php"
        break;
      case 206:
#line 422 "sql.y"
{$yygotominor = new filter_SetFunction("min");}
#line 3401 "sql.php"
        break;
      case 210:
      case 370:
#line 429 "sql.y"
{$yygotominor=NULL;}
#line 3407 "sql.php"
        break;
      case 211:
#line 430 "sql.y"
{$yygotominor="DISTINCT";}
#line 3412 "sql.php"
        break;
      case 212:
#line 431 "sql.y"
{$yygotominor="ALL";}
#line 3417 "sql.php"
        break;
      case 236:
#line 468 "sql.y"
{
		$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		
		if(isset($this->yystack[$this->yyidx + -1]->minor->filter)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_filterResults($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->filter);
		}
		$total_group = false;
		$expression_columns = Array();	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection))
			foreach($this->yystack[$this->yyidx + -2]->minor->columns_projection as $p){
				if($p->is_set_function) {
					$total_group=true;
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				} elseif($p->is_math_function) {
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				}
			}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $this->yystack[$this->yyidx + -1]->minor->grouping_columns);
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
		} elseif(!(empty($expression_columns))) {
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $expression_columns);
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->grouping_columns, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
			$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		} else {
			if($total_group){
				$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, array(), $this->yystack[$this->yyidx + -2]->minor->columns_projection);
				$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
			}
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->ordering)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_orderRelation($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->ordering);
		}			
		if($this->yystack[$this->yyidx + -3]->minor=="DISTINCT")
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_distinctValues($this->yystack[$this->yyidx + -1]->minor->last_relation_id);
		elseif($this->yystack[$this->yyidx + -3]->minor=="ALL"){
		}	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$indexes = Array();
			for($i=0;$i<count($this->yystack[$this->yyidx + -2]->minor->columns_projection);$i++)
				$indexes[] = $i;
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_selectColumnsByIndexes($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $indexes);
		}		
		if(isset($this->yystack[$this->yyidx + 0]->minor))
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_limitRows($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + 0]->minor->rows, $this->yystack[$this->yyidx + 0]->minor->offset);
		$yygotominor=$this->yystack[$this->yyidx + -1]->minor;
	}
#line 3474 "sql.php"
        break;
      case 237:
#line 522 "sql.y"
{$yygotominor = new stdClass();$yygotominor->columns_projection = NULL;$yygotominor->set_functions=NULL;}
#line 3479 "sql.php"
        break;
      case 238:
#line 523 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->columns_projection = Array();
		$yygotominor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;

	}
#line 3489 "sql.php"
        break;
      case 239:
#line 529 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3497 "sql.php"
        break;
      case 243:
#line 538 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor; $yygotominor->alias=$this->yystack[$this->yyidx + 0]->minor;}
#line 3502 "sql.php"
        break;
      case 246:
#line 543 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = $this->yystack[$this->yyidx + -4]->minor->actions;
		if(isset($this->yystack[$this->yyidx + -2]->minor)&&isset($this->yystack[$this->yyidx + -2]->minor->grouping_columns))
			$yygotominor->grouping_columns = $this->yystack[$this->yyidx + -2]->minor->grouping_columns;
		if(isset($this->yystack[$this->yyidx + -3]->minor)&&isset($this->yystack[$this->yyidx + -3]->minor->filter))
			$yygotominor->filter = $this->yystack[$this->yyidx + -3]->minor->filter;
		if(isset($this->yystack[$this->yyidx + 0]->minor)&&isset($this->yystack[$this->yyidx + 0]->minor->ordering))
			$yygotominor->ordering = $this->yystack[$this->yyidx + 0]->minor->ordering;
	}
#line 3516 "sql.php"
        break;
      case 248:
#line 555 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=0;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3521 "sql.php"
        break;
      case 249:
#line 556 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + -2]->minor->value;}
#line 3526 "sql.php"
        break;
      case 250:
#line 557 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + -2]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3531 "sql.php"
        break;
      case 252:
#line 560 "sql.y"
{$yygotominor = new stdClass();$yygotominor->ordering=$this->yystack[$this->yyidx + 0]->minor;}
#line 3536 "sql.php"
        break;
      case 253:
#line 561 "sql.y"
{$yygotominor=Array();$yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3541 "sql.php"
        break;
      case 254:
      case 298:
#line 562 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;$yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3547 "sql.php"
        break;
      case 255:
#line 563 "sql.y"
{$yygotominor = new stdClass();$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor->order=$this->yystack[$this->yyidx + 0]->minor;}
#line 3552 "sql.php"
        break;
      case 256:
      case 257:
#line 564 "sql.y"
{$yygotominor='asc';}
#line 3558 "sql.php"
        break;
      case 258:
#line 566 "sql.y"
{$yygotominor='desc';}
#line 3563 "sql.php"
        break;
      case 259:
#line 569 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;
	}
#line 3571 "sql.php"
        break;
      case 261:
#line 575 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3576 "sql.php"
        break;
      case 262:
#line 576 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value);}
#line 3581 "sql.php"
        break;
      case 276:
#line 598 "sql.y"
{
	$yygotominor = new stdClass();
	$b_last_relation = $this->yystack[$this->yyidx + -5]->minor->actions[count($this->yystack[$this->yyidx + -5]->minor->actions)-1];
	$e_last_relation = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1];
	$yygotominor->actions = array_merge($this->yystack[$this->yyidx + -5]->minor->actions, $this->yystack[$this->yyidx + -1]->minor->actions);
	if($this->yystack[$this->yyidx + -3]->minor=="LEFT")
		$yygotominor->actions[] = new qpAction_joinRelationsLeft($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
	elseif($this->yystack[$this->yyidx + -3]->minor=="INNER")
		$yygotominor->actions[] = new qpAction_joinRelations($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
}
#line 3595 "sql.php"
        break;
      case 279:
      case 280:
#line 612 "sql.y"
{$yygotominor="INNER";}
#line 3601 "sql.php"
        break;
      case 288:
#line 623 "sql.y"
{$yygotominor = new stdClass();$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;}
#line 3606 "sql.php"
        break;
      case 294:
#line 633 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;
}
#line 3614 "sql.php"
        break;
      case 295:
#line 638 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = NULL;}
#line 3619 "sql.php"
        break;
      case 296:
#line 639 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = $this->yystack[$this->yyidx + 0]->minor;}
#line 3624 "sql.php"
        break;
      case 297:
#line 641 "sql.y"
{$yygotominor = Array(); $yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3629 "sql.php"
        break;
      case 313:
      case 362:
#line 687 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor = $this->yystack[$this->yyidx + -2]->minor;
	}
#line 3638 "sql.php"
        break;
      case 324:
#line 707 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;$yygotominor->value=strtoupper($yygotominor->value);}
#line 3643 "sql.php"
        break;
      case 325:
#line 709 "sql.y"
{
		$yygotominor = new filter_IsNullColumn($this->yystack[$this->yyidx + -2]->minor);
	}
#line 3650 "sql.php"
        break;
      case 326:
#line 712 "sql.y"
{
		$yygotominor = new filter_IsNotNullColumn($this->yystack[$this->yyidx + -3]->minor);
	}
#line 3657 "sql.php"
        break;
      case 339:
#line 758 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[]=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3665 "sql.php"
        break;
      case 340:
#line 806 "sql.y"
{
		$yygotominor = new qpAction_createTable($this->yystack[$this->yyidx + -3]->minor->value, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3672 "sql.php"
        break;
      case 345:
#line 975 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		foreach($this->yystack[$this->yyidx + -1]->minor as $c){
			$yygotominor->actions[] = new qpAction_dropTable($c->value);
		}
	}
#line 3683 "sql.php"
        break;
      case 349:
#line 987 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3688 "sql.php"
        break;
      case 354:
#line 1075 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		if(is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_bulkDelete($this->yystack[$this->yyidx + -1]->minor->value);
		} else {
			$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value);
			$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
			$yygotominor->actions[] = new qpAction_addressedDelete($last_relation_id);
		}
	}
#line 3704 "sql.php"
        break;
      case 355:
#line 1088 "sql.y"
{
		$yygotominor = NULL;
	}
#line 3711 "sql.php"
        break;
      case 357:
#line 1095 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[] = new qpAction_insertRow($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3719 "sql.php"
        break;
      case 358:
#line 1100 "sql.y"
{
		$yygotominor = Array();
		foreach($this->yystack[$this->yyidx + -2]->minor as $key => $column_name){
			$yygotominor[$column_name] = $this->yystack[$this->yyidx + 0]->minor[$key];
		}
	}
#line 3729 "sql.php"
        break;
      case 359:
#line 1106 "sql.y"
{print_r($this->yystack[$this->yyidx + 0]->minor);}
#line 3734 "sql.php"
        break;
      case 364:
#line 1127 "sql.y"
{$yygotominor = new stdClass();$yygotominor->column=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->new_value=$this->yystack[$this->yyidx + 0]->minor;}
#line 3739 "sql.php"
        break;
      case 369:
#line 1135 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -3]->minor->value);
		$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;

		if(!is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
		}
		$yygotominor->actions[]=new qpAction_updateValues($last_relation_id, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3754 "sql.php"
        break;
      case 372:
#line 1197 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("abs");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3759 "sql.php"
        break;
      case 373:
#line 1198 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("acos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3764 "sql.php"
        break;
      case 374:
#line 1199 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("asin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3769 "sql.php"
        break;
      case 375:
#line 1200 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("atan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3774 "sql.php"
        break;
      case 376:
      case 377:
#line 1201 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("atan2");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3780 "sql.php"
        break;
      case 378:
#line 1203 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ceil");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3785 "sql.php"
        break;
      case 379:
#line 1204 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3790 "sql.php"
        break;
      case 380:
#line 1205 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cot");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3795 "sql.php"
        break;
      case 381:
#line 1206 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("crc32");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3800 "sql.php"
        break;
      case 382:
#line 1207 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("degrees");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3805 "sql.php"
        break;
      case 383:
#line 1208 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("exp");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3810 "sql.php"
        break;
      case 384:
#line 1209 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("floor");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3815 "sql.php"
        break;
      case 385:
#line 1210 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("format");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3820 "sql.php"
        break;
      case 386:
      case 387:
#line 1211 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ln");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3826 "sql.php"
        break;
      case 388:
#line 1213 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3831 "sql.php"
        break;
      case 389:
#line 1214 "sql.y"
{$val2 = new filter_StaticIntnum(2);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val2;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3836 "sql.php"
        break;
      case 390:
#line 1215 "sql.y"
{$val10 = new filter_StaticIntnum(10);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val10;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3841 "sql.php"
        break;
      case 391:
#line 1216 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("mod");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3846 "sql.php"
        break;
      case 392:
#line 1217 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("pi");$yygotominor->expression=new filter_EmptyExpression();}
#line 3851 "sql.php"
        break;
      case 393:
#line 1218 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("pow");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3856 "sql.php"
        break;
      case 394:
#line 1219 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("radians");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3861 "sql.php"
        break;
      case 395:
#line 1220 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("round");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3866 "sql.php"
        break;
      case 396:
#line 1221 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("round");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3871 "sql.php"
        break;
      case 397:
#line 1222 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sign");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3876 "sql.php"
        break;
      case 398:
#line 1223 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3881 "sql.php"
        break;
      case 399:
#line 1224 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sqrt");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3886 "sql.php"
        break;
      case 400:
#line 1225 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("tan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3891 "sql.php"
        break;
      case 401:
#line 1226 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("truncate");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3896 "sql.php"
        break;
      case 402:
      case 403:
      case 410:
#line 1233 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("now");$yygotominor->expression=new filter_EmptyExpression();}
#line 3903 "sql.php"
        break;
      case 404:
#line 1235 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("day");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3908 "sql.php"
        break;
      case 405:
#line 1236 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("dayofweek");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3913 "sql.php"
        break;
      case 406:
#line 1237 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("dayofyear");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3918 "sql.php"
        break;
      case 407:
#line 1238 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("hour");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3923 "sql.php"
        break;
      case 408:
#line 1239 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("minute");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3928 "sql.php"
        break;
      case 409:
#line 1240 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("month");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3933 "sql.php"
        break;
      case 411:
#line 1242 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("second");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3938 "sql.php"
        break;
      case 412:
#line 1243 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("weekday");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3943 "sql.php"
        break;
      case 413:
#line 1244 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("weekofyear");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3948 "sql.php"
        break;
      case 414:
#line 1245 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("year");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3953 "sql.php"
        break;
  };
  $yygoto = self::$yyRuleInfo[2*$yyruleno];
  $yysize = self::$yyRuleInfo[(2*$yyruleno)+1];

  $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;
  
  $this->yyidx -= $yysize;
  $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);
  if( $yyact < self::YYNSTATE ){
    $this->yy_shift($yyact, $yygoto, $yygotominor);
  }else if( $yyact == self::YYNSTATE + self::YYNRULE + 1 ){
    $this->yy_accept();
  }
}

/*
** The following code executes when the parse fails
*/
private function yy_parse_failed(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sFail!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
}

/*
** The following code executes when a syntax error first occurs.
*/
private function yy_syntax_error(
  $yymajor,                   /* The major type of the error token */
  $yyminor            /* The minor type of the error token */
){
}

/*
** The following is executed when the parser accepts
*/
private function yy_accept(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sAccept!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 2 "sql.y"

      //echo "PARSING COMPLETE!!";
   
#line 4008 "sql.php"
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
function Parse(
  $yymajor,                 /* The major token code number */
  $yyminor = null           /* The value for the token */
){
  $yyact = 0;            /* The parser action. */
  $yyendofinput = 0;     /* True if we are at the end of input */
  $yyerrorhit = 0;   /* True if yymajor has invoked an error */

  /* (re)initialize the parser, if necessary */
  if( $this->yyidx<0 ){
    $this->yyidx = 0;
    $this->yyerrcnt = -1;
    $ent = new ParseyyStackEntry;
    $ent->stateno = 0;
    $ent->major = 0;
    $this->yystack = array( 0 => $ent );

    $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    $this->YY_ACCEPT_ACTION  = self::YYNSTATE + self::YYNRULE + 1;
    $this->YY_ERROR_ACTION   = self::YYNSTATE + self::YYNRULE;
  }
  $yyendofinput = ($yymajor==0);

  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sInput %s\n",$this->yyTracePrompt,
      self::$yyTokenName[$yymajor]);
  }

  do{
    $yyact = $this->yy_find_shift_action($yymajor);
    if( $yyact<self::YYNSTATE ){
      $this->yy_shift($yyact,$yymajor,$yyminor);
      $this->yyerrcnt--;
      if( $yyendofinput && $this->yyidx>=0 ){
        $yymajor = 0;
      }else{
        $yymajor = self::YYNOCODE;
      }
    }else if( $yyact < self::YYNSTATE + self::YYNRULE ){
      $this->yy_reduce($yyact-self::YYNSTATE);
    }else if( $yyact == $this->YY_ERROR_ACTION ){
      if( $this->yyTraceFILE ){
        fprintf($this->yyTraceFILE,"%sSyntax Error!\n",$this->yyTracePrompt);
      }
if (self::YYERRORSYMBOL) {
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( $this->yyerrcnt<0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $yymx = $this->yystack[$this->yyidx]->major;
      if( $yymx==self::YYERRORSYMBOL || $yyerrorhit ){
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE,"%sDiscard input token %s\n",
             $this->yyTracePrompt,self::$yyTokenName[$yymajor]);
        }
        $this->yy_destructor($yymajor,$yyminor);
        $yymajor = self::YYNOCODE;
      }else{
         while(
          $this->yyidx >= 0 &&
          $yymx != self::YYERRORSYMBOL &&
          ($yyact = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::YYERRORSYMBOL)) >= self::YYNSTATE
        ){
          $this->yy_pop_parser_stack();
        }
        if( $this->yyidx < 0 || $yymajor==0 ){
          $this->yy_destructor($yymajor,$yyminor);
          $this->yy_parse_failed();
          $yymajor = self::YYNOCODE;
        }else if( $yymx!=self::YYERRORSYMBOL ){
          $this->yy_shift($yyact,self::YYERRORSYMBOL,0);
        }
      }
      $this->yyerrcnt = 3;
      $yyerrorhit = 1;
} else {  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( $this->yyerrcnt<=0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $this->yyerrcnt = 3;
      $this->yy_destructor($yymajor,$yyminor);
      if( $yyendofinput ){
        $this->yy_parse_failed();
      }
      $yymajor = self::YYNOCODE;
}
    }else{
      $this->yy_accept();
      $yymajor = self::YYNOCODE;
    }
  }while( $yymajor!=self::YYNOCODE && $this->yyidx>=0 );
}

}
