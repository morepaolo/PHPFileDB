<?php # vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */


/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
class ParseyyStackEntry {
  var /* int */ $stateno;       /* The state-number */
  var /* int */ $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  var $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

/* The state of the parser is completely contained in an instance of
** the following structure */
class ParseParser {
  var /* int */ $yyidx = -1;                    /* Index of top element in stack */
  var /* int */ $yyerrcnt;                 /* Shifts left before out of the error */
  // ParseARG_SDECL                /* A place to hold %extra_argument */
  var /* yyStackEntry */ $yystack = array(
  	/* of YYSTACKDEPTH elements */
	);  /* The parser's stack */

  var $yyTraceFILE = null;
  var $yyTracePrompt = null;



/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
  const TK_SEMI =  1;
  const TK_NAME =  2;
  const TK_INTNUM =  3;
  const TK_APPROXNUM =  4;
  const TK_DEADTOKEN =  5;
  const TK_COMMA =  6;
  const TK_CHARACTER =  7;
  const TK_SET =  8;
  const TK_CHAR =  9;
  const TK_LPAR = 10;
  const TK_RPAR = 11;
  const TK_VARYING = 12;
  const TK_VARCHAR = 13;
  const TK_NATIONAL = 14;
  const TK_NCHAR = 15;
  const TK_BLOB = 16;
  const TK_BIT = 17;
  const TK_NUMERIC = 18;
  const TK_DECIMAL = 19;
  const TK_DEC = 20;
  const TK_INTEGER = 21;
  const TK_SMALLINT = 22;
  const TK_FLOAT = 23;
  const TK_REAL = 24;
  const TK_DOUBLE = 25;
  const TK_PRECISION = 26;
  const TK_DATE = 27;
  const TK_DATETIME = 28;
  const TK_TIME = 29;
  const TK_TIMESTAMP = 30;
  const TK_WITH = 31;
  const TK_ZONE = 32;
  const TK_INTERVAL = 33;
  const TK_TO = 34;
  const TK_YEAR = 35;
  const TK_MONTH = 36;
  const TK_DAY = 37;
  const TK_HOUR = 38;
  const TK_MINUTE = 39;
  const TK_SECOND = 40;
  const TK_PERIOD = 41;
  const TK_DEFAULT = 42;
  const TK_USER = 43;
  const TK_CURRENT_USER = 44;
  const TK_SESSION_USER = 45;
  const TK_SYSTEM_USER = 46;
  const TK_NULL = 47;
  const TK_PLUS_SIGN = 48;
  const TK_MINUS_SIGN = 49;
  const TK_CURRENT_TIMESTAMP = 50;
  const TK_CONSTRAINT = 51;
  const TK_NOT = 52;
  const TK_UNIQUE = 53;
  const TK_AUTO_INCREMENT = 54;
  const TK_PRIMARY = 55;
  const TK_KEY = 56;
  const TK_REFERENCES = 57;
  const TK_MATCH = 58;
  const TK_FULL = 59;
  const TK_PARTIAL = 60;
  const TK_ON = 61;
  const TK_UPDATE = 62;
  const TK_DELETE = 63;
  const TK_CASCADE = 64;
  const TK_NO = 65;
  const TK_ACTION = 66;
  const TK_CHECK = 67;
  const TK_OR = 68;
  const TK_AND = 69;
  const TK_IS = 70;
  const TK_ASTERISK = 71;
  const TK_SOLIDUS = 72;
  const TK_STRING = 73;
  const TK_COUNT = 74;
  const TK_MAX = 75;
  const TK_MIN = 76;
  const TK_DISTINCT = 77;
  const TK_ALL = 78;
  const TK_UNION = 79;
  const TK_EXCEPT = 80;
  const TK_INTERSECT = 81;
  const TK_SELECT = 82;
  const TK_AS = 83;
  const TK_LIMIT = 84;
  const TK_OFFSET = 85;
  const TK_ORDER = 86;
  const TK_BY = 87;
  const TK_ASC = 88;
  const TK_DESC = 89;
  const TK_FROM = 90;
  const TK_CROSS = 91;
  const TK_JOIN = 92;
  const TK_NATURAL = 93;
  const TK_INNER = 94;
  const TK_OUTER = 95;
  const TK_LEFT = 96;
  const TK_RIGHT = 97;
  const TK_USING = 98;
  const TK_WHERE = 99;
  const TK_GROUP = 100;
  const TK_HAVING = 101;
  const TK_VALUES = 102;
  const TK_TABLE = 103;
  const TK_CORRESPONDING = 104;
  const TK_NULLX = 105;
  const TK_TRUE = 106;
  const TK_FALSE = 107;
  const TK_UNKNOWN = 108;
  const TK_OP_EQ = 109;
  const TK_OP_GTLT = 110;
  const TK_OP_LT = 111;
  const TK_OP_GT = 112;
  const TK_OP_LTEQ = 113;
  const TK_OP_GTEQ = 114;
  const TK_OP_LIKE = 115;
  const TK_DEFERRABLE = 116;
  const TK_INITIALLY = 117;
  const TK_DEFERRED = 118;
  const TK_IMMEDIATE = 119;
  const TK_CREATE = 120;
  const TK_RESTRICT = 121;
  const TK_DROP = 122;
  const TK_IF = 123;
  const TK_EXISTS = 124;
  const TK_INSERT = 125;
  const TK_INTO = 126;
  const TK_ABS = 127;
  const TK_ACOS = 128;
  const TK_ASIN = 129;
  const TK_ATAN = 130;
  const TK_ATAN2 = 131;
  const TK_CEIL = 132;
  const TK_COS = 133;
  const TK_COT = 134;
  const TK_CRC32 = 135;
  const TK_DEGREES = 136;
  const TK_EXP = 137;
  const TK_FLOOR = 138;
  const TK_FORMAT = 139;
  const TK_LN = 140;
  const TK_LOG = 141;
  const TK_LOG2 = 142;
  const TK_LOG10 = 143;
  const TK_MOD = 144;
  const TK_PI = 145;
  const TK_POW = 146;
  const TK_RADIANS = 147;
  const TK_ROUND = 148;
  const TK_SIGN = 149;
  const TK_SIN = 150;
  const TK_SQRT = 151;
  const TK_TAN = 152;
  const TK_TRUNCATE = 153;
  const TK_DAYOFWEEK = 154;
  const TK_DAYOFYEAR = 155;
  const TK_NOW = 156;
  const TK_UTC_DATE = 157;
  const TK_UTC_TIME = 158;
  const TK_UTC_TIMESTAMP = 159;
  const TK_WEEKDAY = 160;
  const TK_WEEKOFYEAR = 161;
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
  const YYNOCODE = 331;
#define ParseTOKENTYPE void*
  const YYSTACKDEPTH = 100;
  const YYNSTATE = 756;
  const YYNRULE = 418;
  const YYERRORSYMBOL = 162;

  /* QUESTE LE HO AGGIUNTE IO */
  const   YYWILDCARD = 0;
  public $operations_list= Array();
  /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
  var $YY_NO_ACTION;
  var $YY_ACCEPT_ACTION;
  var $YY_ERROR_ACTION;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static $yy_action = array(
 /*     0 */   443,  444,  445,  449,  204,  441,  442,  499,    2,  381,
 /*    10 */   676,  677,  678,  679,  680,  681,  443,  696,  697,  720,
 /*    20 */   721,  722,  723,  724,  421,  448,  465,  271,  446,  270,
 /*    30 */   447,  468,  450,  333,  321,  316,  319,  320,  324,  718,
 /*    40 */   416,  508,  728,  265,  670,  586,  453,  454,  314,  719,
 /*    50 */    12,  725,  444,  445,  103, 1175,  436,  198,  254,  438,
 /*    60 */   439,  440,  716,  132,  455,  560,  132,  562,  563,  466,
 /*    70 */    75,  467,  273,  474,  475,  972,  972, 1062,  453,  454,
 /*    80 */   189,  629,  476,  660,  661,  662,  668,  669,  196,  672,
 /*    90 */   133,  659,  663,  664,  665,  666,  667,  453,  454,  673,
 /*   100 */    13,  100,   10,  558,  143,  243,  504,  505,  506,  457,
 /*   110 */   459,  460,  461,  462,  463,  464,  272,  472,  276,   26,
 /*   120 */   477,  478,  467,  121,  511,  286,  287,  288,  289,  290,
 /*   130 */   291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
 /*   140 */   301,  302,  303,  304,  306,  307,  308,  309,  310,  311,
 /*   150 */   312,  313,  317,  318,  322,  325,  327,  329,  331,  332,
 /*   160 */   484,  453,  454,  448,  465,  271,  446,  270,  447,  468,
 /*   170 */   450,  256,  251,  386,  569,  570,  571,  389,  257,  260,
 /*   180 */   693,  261,  403,  405,  407,  706,  707,  409,  709,  411,
 /*   190 */    15,  711,  712,  412,  717,  134,  443,  122,  637,  638,
 /*   200 */   639,   92,  455,  620,  621,  622,  733,  466,   75,  115,
 /*   210 */   740,  741,  742,  743,  443,  443,  253,  449,  449,  371,
 /*   220 */   116,  443,   72,   73,  449,  628,   67,  246,  335,  573,
 /*   230 */   565,  336,  479,  572,  574,  575,  136,  645,  248,  244,
 /*   240 */   555,  503,  190,  243,  504,  505,  506,  457,  459,  460,
 /*   250 */   338,  462,  463,  464,  272,  472,  276,  121,  477,  245,
 /*   260 */   241,  498,  237,  284,  285,  600,  500,  443,  483,  485,
 /*   270 */   486,  484,  646,  375,  448,  465,  271,  446,  270,  447,
 /*   280 */   468,  450,  567,  205,  252,  192,  283,  118,  561,  494,
 /*   290 */   496,  497,  437,  198,  189,  438,  439,  440,  651,  448,
 /*   300 */    76,   77,    9,  469,  447,   96,  963,  250,  623,  625,
 /*   310 */   626,  568,  443,  455,   13,  100,  346,  448,  466,   75,
 /*   320 */    19,  469,  447,   96,  643,  502,  624,  625,  626,  208,
 /*   330 */   209,  116,  720,  721,  722,  723,  724,  417,  246,  335,
 /*   340 */   573,  565,  336,  736,  572,  574,  575,  136,  127,  248,
 /*   350 */   244,  555,  503,  190,  243,  504,  505,  506,  457,  459,
 /*   360 */   460,  338,  462,  463,  464,  272,  472,  276,  184,  477,
 /*   370 */   245,  241,  340,  240,  284,  285,  334,  500,  345,  483,
 /*   380 */   485,  486,  443,  444,  445,  449,  443,  444,  445,  449,
 /*   390 */    72,   14,  778,  127,   71,   21,  192,  778,  118,  448,
 /*   400 */   494,  496,  497,  469,  447,  470,  448,  465,  271,  446,
 /*   410 */   270,  447,  468,  450,  611,  333,  321,  316,  319,  320,
 /*   420 */   324,  448,  569,  570,  571,  469,  447,  489,  453,  454,
 /*   430 */   314,  448,  453,  454,  652,  451,  447,  103,  452,  620,
 /*   440 */   621,  622,  733,  453,  454,  455,  740,  741,  742,  743,
 /*   450 */   466,   75,  671,  467,  273,  474,  475,  467,  273,  474,
 /*   460 */   475,  753,  189,  476,  448,  755,  448,  509,  487,  447,
 /*   470 */   469,  447,  752,  577,  578,  579,  580,  581,  582,  583,
 /*   480 */   343,  443,   13,  100,  749,  190,  243,  504,  505,  506,
 /*   490 */   457,  459,  460,  461,  462,  463,  464,  272,  472,  276,
 /*   500 */   443,  477,  478,  627,  453,  454,   94,  286,  287,  288,
 /*   510 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*   520 */   299,  300,  301,  302,  303,  304,  306,  307,  308,  309,
 /*   530 */   310,  311,  312,  313,  317,  318,  322,  325,  327,  329,
 /*   540 */   331,  332,  443,  444,  445,  449,  443,  444,  445,  449,
 /*   550 */     1,  413,  359,  715,   71,  283,  344,  561,  601,  278,
 /*   560 */  1027, 1033,  128,    4,  748,  612,  613,  448,  465,  271,
 /*   570 */   446,  270,  447,  468,  450,  333,  321,  316,  319,  320,
 /*   580 */   324, 1033,  653,  654,   28,  444,  445,  488,  453,  454,
 /*   590 */   314,  339,   12,  283, 1033,  561, 1033, 1033, 1033, 1033,
 /*   600 */   342,   68,   69,  448,  232,  594,  455,  469,  447,  752,
 /*   610 */     6,  466,   75,  467,  273,  474,  475,  467,  273,  474,
 /*   620 */   475,  197,  754,  434,  476,  591,  453,  454,  849,  283,
 /*   630 */  1033,  561, 1033,  448, 1033, 1033,  201,  469,  447,  607,
 /*   640 */   589, 1027,  592,  593,  584,  558,  144,  243,  504,  505,
 /*   650 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*   660 */   276,  448,  477,  478,  361,  487,  447,  286,  287,  288,
 /*   670 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*   680 */   299,  300,  301,  302,  303,  304,  306,  307,  308,  309,
 /*   690 */   310,  311,  312,  313,  317,  318,  322,  325,  327,  329,
 /*   700 */   331,  332,  443,  444,  445,  449,  372,  640,  641,  373,
 /*   710 */    71,   97,   37,  448,  465,  271,  446,  270,  447,  468,
 /*   720 */   450,  380,  633,  634,  365,  448,   40,  271,  446,  451,
 /*   730 */   447,  523,  450,  972,  972,  333,  321,  316,  319,  320,
 /*   740 */   324,  202,  751,  360,  972,    5,  606,  750,  453,  454,
 /*   750 */   314,  362,  455,  370,  453,  454,  281,  466,   75,  747,
 /*   760 */   434,  448,   76,   77,  455,  469,  447,  489,  453,  454,
 /*   770 */   476,  203,   99,  467,  273,  474,  475,  341,  335,  573,
 /*   780 */   565,  336,  738,  572,  574,  575,  136,  510,  501,  609,
 /*   790 */   555,  503,  190,  243,  504,  505,  506,  457,  459,  460,
 /*   800 */   338,  462,  463,  464,  272,  472,  276,  252,  477,  478,
 /*   810 */   656, 1068,  972,  972, 1062,  443, 1068,  630,  449,   16,
 /*   820 */   279,  187,  186,   73,  453,  454,   44,  286,  287,  288,
 /*   830 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*   840 */   299,  300,  301,  302,  303,  304,  306,  307,  308,  309,
 /*   850 */   310,  311,  312,  313,  317,  318,  322,  325,  327,  329,
 /*   860 */   331,  332,  443,  444,  445,  449,  632,   10,  453,  454,
 /*   870 */     1,  104,  188,  448,  129,  271,  446,  451,  447,  448,
 /*   880 */   450,  635,  195,  469,  447,  490,  280,  448,  465,  271,
 /*   890 */   446,  270,  447,  468,  450,  333,  321,  316,  319,  320,
 /*   900 */   324,  448,  512,   91,  130,  469,  447,  489,  453,  454,
 /*   910 */   314,  448,  455,  271,  446,  451,  447,  448,  450,  513,
 /*   920 */    49,  469,  447,  608,  374,  531,  455,  207,  644,  734,
 /*   930 */   377,  466,   75,  467,  273,  474,  475,  376,  448,  453,
 /*   940 */   454,  108,  487,  447,  476,  650,  732,  514,  648,  211,
 /*   950 */   658,  384,  258,  647,  259,  674,  453,  454,  675,  224,
 /*   960 */   279,  657,  453,  454,  698,  558,  145,  243,  504,  505,
 /*   970 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*   980 */   276,  683,  477,  478,  453,  454,  735,  286,  287,  288,
 /*   990 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*  1000 */   299,  300,  301,  302,  303,  304,  306,  307,  308,  309,
 /*  1010 */   310,  311,  312,  313,  317,  318,  322,  325,  327,  329,
 /*  1020 */   331,  332,  443,  444,  445,  449,  282,  515,  383,  516,
 /*  1030 */     3,  448,  215,  278,  392,  469,  447,  489,  517,  385,
 /*  1040 */   217,  448,  395,  271,  446,  451,  447,  219,  450,  398,
 /*  1050 */   388,  221,  390,  401,  701,  333,  321,  316,  319,  320,
 /*  1060 */   324,  493,  391,  393,  453,  454,  453,  454,  453,  454,
 /*  1070 */   314,  443,  444,  445,  449,  453,  454,  518,  394,   71,
 /*  1080 */   455,  448,  226,  271,  446,  451,  447,  702,  450,  378,
 /*  1090 */   379,  519,  396,  467,  273,  474,  475,  520,  553,  397,
 /*  1100 */   262,  399,  700,  400,  333,  321,  316,  319,  320,  324,
 /*  1110 */   402,  228,  414,  404,  453,  454,  704,  453,  454,  314,
 /*  1120 */   455,  422,  771,  263,  264,  558,  730,  771,  453,  454,
 /*  1130 */   406,  408,  727,  418,  453,  454,  729,  410,  369,  423,
 /*  1140 */   618,  713,  467,  273,  474,  475,  521,  286,  287,  288,
 /*  1150 */   289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
 /*  1160 */   299,  300,  301,  302,  303,  304,  306,  307,  308,  309,
 /*  1170 */   310,  311,  312,  313,  317,  318,  322,  325,  327,  329,
 /*  1180 */   331,  332,  443,  453,  454,  449,  419,  266,  426,   98,
 /*  1190 */    72,    8,  744,  772,  124,  125,  286,  287,  288,  289,
 /*  1200 */   290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
 /*  1210 */   300,  301,  302,  303,  304,  306,  307,  308,  309,  310,
 /*  1220 */   311,  312,  313,  317,  318,  322,  325,  327,  329,  331,
 /*  1230 */   332,  443,  444,  445,  449,  107,  427,  522,  274,   71,
 /*  1240 */   275,  471,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  1250 */   126,  191,   80,  491,  524,  189,  110,  111,   78,  525,
 /*  1260 */   492,   22,  189, 1061,  333,  321,  316,  319,  320,  324,
 /*  1270 */    89,   23,   24,   25,  453,  454,   27,  453,  454,  314,
 /*  1280 */    29,  455,   13,  100,  346,   30,  466,   75,   31,   32,
 /*  1290 */    33,  453,  454,  368,   34,  425,  453,  454,  429,  476,
 /*  1300 */    35,   36,  467,  273,  474,  475,  364,  335,  573,  565,
 /*  1310 */   336,   38,  572,  574,  575,  136,   39,  501,   41,  555,
 /*  1320 */   503,  190,  243,  504,  505,  506,  457,  459,  460,  338,
 /*  1330 */   462,  463,  464,  272,  472,  276,   42,  477,  478,   43,
 /*  1340 */   443,  305,   90,  449,  528,   45,  443,   47,   72,  449,
 /*  1350 */    48,   50,   51,  142,   72,   52,  286,  287,  288,  289,
 /*  1360 */   290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
 /*  1370 */   300,  301,  302,  303,  304,  306,  307,  308,  309,  310,
 /*  1380 */   311,  312,  313,  317,  318,  322,  325,  327,  329,  331,
 /*  1390 */   332,  484,  526,   46,  448,  465,  271,  446,  270,  447,
 /*  1400 */   468,  450,   55,   53,  448,   54,  271,  446,  451,  447,
 /*  1410 */   448,  450,  271,  446,  451,  447,   79,  450,  538,  527,
 /*  1420 */   189,  315,   81,   56,   11,  529,  189,   57,   58,  453,
 /*  1430 */   454,   59,   60,  455,   61,  453,  454,  323,  466,   75,
 /*  1440 */    13,  100,  346,  455,  453,  454,   13,  100,  346,  455,
 /*  1450 */   443,  116,  545,  449, 1067, 1067,  453,  454,   72,   62,
 /*  1460 */   326,  737,  453,  454,  547, 1067,  328,  236,  548,  554,
 /*  1470 */   244,  330,  503,  190,  243,  504,  505,  506,  457,  459,
 /*  1480 */   460,  461,  462,  463,  464,  272,  472,  276,  549,  477,
 /*  1490 */   245,  241,  498,  237,  284,  285,   63,  500,   64,  483,
 /*  1500 */   485,  486,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  1510 */   247,  530,   65,   10,  585,  532,  192,  533,  118,  534,
 /*  1520 */   494,  496,  497,  443,  587,  112,  449,  535,  588,  113,
 /*  1530 */   189,   66, 1062, 1062, 1067, 1067,  596,  590,  347,  599,
 /*  1540 */   123,  455,  249, 1062,  602,   17,  466,   75,  453,  454,
 /*  1550 */    13,  100,  453,  454,  453,  454,  453,  454,  603,  476,
 /*  1560 */    20,   93,  536,  432,  453,  454,  367,  335,  573,  565,
 /*  1570 */   336,   95,  572,  574,  575,  136,  101,  501,  537,  555,
 /*  1580 */   503,  190,  243,  504,  505,  506,  457,  459,  460,  338,
 /*  1590 */   462,  463,  464,  272,  472,  276,  539,  477,  478,  453,
 /*  1600 */   454,  540,  102,  189,  448,  465,  271,  446,  270,  447,
 /*  1610 */   468,  450, 1062, 1062,  448,  453,  454,  541,  469,  447,
 /*  1620 */   489,  542,  636,   13,  100,  543,  631,  544,  206,  546,
 /*  1630 */   642,  186,  649,  453,  454,  187,  114,    7,  453,  454,
 /*  1640 */   655,  382,  682,  455,  210,  212,  710,  213,  466,   75,
 /*  1650 */   684,  214,  387,  685,  453,  454,  686,  687,  453,  454,
 /*  1660 */   216,  476,  453,  454,  453,  454,  453,  454,  255,  335,
 /*  1670 */   573,  565,  336,  348,  572,  574,  575,  136,  688,  501,
 /*  1680 */   689,  555,  503,  190,  243,  504,  505,  506,  457,  459,
 /*  1690 */   460,  338,  462,  463,  464,  272,  472,  276,  550,  477,
 /*  1700 */   478,  551,  690,  552,  218,  415,  691,  220,  131,  692,
 /*  1710 */   694,  222,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  1720 */   714,  695,  223,  850,  699,  225,  235,  703,  227,  739,
 /*  1730 */   705,  708,  229,  135,  233,  453,  454,  230,  453,  454,
 /*  1740 */   453,  454,  231,  105,  726,  420,  234,  106,  424,  731,
 /*  1750 */    74,  455,  109,  349,  746,  750,  466,   75,   18,  750,
 /*  1760 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  1770 */   750,  750,  750,  750,  750,  750,  428,  335,  573,  565,
 /*  1780 */   336,  750,  572,  574,  575,  136,  750,  501,  750,  555,
 /*  1790 */   503,  190,  243,  504,  505,  506,  457,  459,  460,  338,
 /*  1800 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  1810 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  1820 */   468,  450,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1830 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1840 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1850 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  1860 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1870 */   750,  476,  750,  750,  750,  750,  750,  750,  435,  335,
 /*  1880 */   573,  565,  336,  750,  572,  574,  575,  136,  750,  501,
 /*  1890 */   750,  555,  503,  190,  243,  504,  505,  506,  457,  459,
 /*  1900 */   460,  338,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  1910 */   478,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1920 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  1930 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1940 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1950 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  1960 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  1970 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  1980 */   750,  750,  750,  750,  750,  750,  750,  337,  573,  565,
 /*  1990 */   336,  750,  572,  574,  575,  136,  750,  501,  750,  555,
 /*  2000 */   503,  190,  243,  504,  505,  506,  457,  459,  460,  338,
 /*  2010 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  2020 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  2030 */   468,  450,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2040 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2050 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2060 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  2070 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2080 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2090 */   564,  565,  336,  750,  572,  574,  575,  136,  750,  501,
 /*  2100 */   750,  555,  503,  190,  243,  504,  505,  506,  457,  459,
 /*  2110 */   460,  338,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  2120 */   478,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2130 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  2140 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2150 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2160 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2170 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  2180 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  2190 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  566,
 /*  2200 */   336,  750,  572,  574,  575,  136,  750,  501,  750,  555,
 /*  2210 */   503,  190,  243,  504,  505,  506,  457,  459,  460,  338,
 /*  2220 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  2230 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  2240 */   468,  450,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2250 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2260 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2270 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  2280 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2290 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2300 */   750,  750,  750,  750,  750,  750,  750,  557,  750,  501,
 /*  2310 */   750,  555,  503,  190,  243,  504,  505,  506,  457,  459,
 /*  2320 */   460,  461,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  2330 */   478,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2340 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  2350 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2360 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2370 */   750,  750,  556,  750,  750,  750,  750,  750,  750,  750,
 /*  2380 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  2390 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  2400 */   750,  750,  750,  750,  750,  750,  750,  448,  465,  271,
 /*  2410 */   446,  270,  447,  468,  450,  750,  750,  750,  750,  750,
 /*  2420 */   119,  190,  243,  504,  505,  506,  457,  459,  460,  461,
 /*  2430 */   462,  463,  464,  358,  472,  276,  750,  477,  478,  750,
 /*  2440 */   750,  750,  750,  750,  750,  750,  455,  750,  750,  750,
 /*  2450 */    88,  466,   75,  619,  605,  750,  750,  750,  750,  750,
 /*  2460 */   750,  750,  750,  750,  476,  750,  750,  750,  750,  750,
 /*  2470 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2480 */   576,  750,  501,  750,  555,  503,  190,  243,  504,  505,
 /*  2490 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*  2500 */   276,  750,  477,  478,  750,  750,  750,  750,  750,  750,
 /*  2510 */   750,  750,  750,  448,  465,  271,  446,  270,  447,  468,
 /*  2520 */   450,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2530 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2540 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2550 */   750,  750,  455,  750,  750,  750,  750,  466,   75,  750,
 /*  2560 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2570 */   476,  750,  750,  750,  750,  750,  750,  750,  448,  465,
 /*  2580 */   271,  446,  270,  447,  468,  450,  750,  750,  750,  750,
 /*  2590 */   750,  119,  190,  243,  504,  505,  506,  457,  459,  460,
 /*  2600 */   461,  462,  463,  464,  358,  472,  276,  750,  477,  478,
 /*  2610 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  2620 */   750,  750,  466,   75,  604,  605,  750,  750,  750,  750,
 /*  2630 */   750,  750,  750,  750,  750,  476,  750,  750,  750,  750,
 /*  2640 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2650 */   750,  750,  750,  750,  750,  750,  194,  190,  243,  504,
 /*  2660 */   505,  506,  457,  459,  460,  461,  462,  463,  464,  272,
 /*  2670 */   472,  276,  750,  477,  478,  750,  750,  750,  750,  750,
 /*  2680 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  2690 */   468,  450,  750,  750,  750,  750,  750,  363,  614,  750,
 /*  2700 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2710 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2720 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  2730 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2740 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  448,
 /*  2750 */   465,  271,  446,  270,  447,  468,  450,  750,  750,  507,
 /*  2760 */   750,  750,  503,  190,  243,  504,  505,  506,  457,  459,
 /*  2770 */   460,  461,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  2780 */   478,  750,  750,  750,  750,  750,  750,  750,  455,  750,
 /*  2790 */   750,  750,  750,  466,   75,  750,  750,  750,  750,  750,
 /*  2800 */   750,  750,  750,  750,  750,  750,  476,  750,  750,  750,
 /*  2810 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2820 */   750,  750,  750,  750,  750,  750,  750,  194,  190,  243,
 /*  2830 */   504,  505,  506,  457,  459,  460,  461,  462,  463,  464,
 /*  2840 */   272,  472,  276,  750,  477,  478,  750,  750,  750,  750,
 /*  2850 */   750,  750,  750,  750,  750,  448,  465,  271,  446,  270,
 /*  2860 */   447,  468,  450,  750,  750,  750,  750,  750,  750,  610,
 /*  2870 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2880 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2890 */   750,  750,  750,  750,  455,  750,  750,  750,  750,  466,
 /*  2900 */    75,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2910 */   750,  750,  476,  750,  750,  750,  750,  750,  750,  750,
 /*  2920 */   448,  465,  271,  446,  270,  447,  468,  450,  750,  750,
 /*  2930 */   750,  750,  750,  357,  190,  243,  504,  505,  506,  457,
 /*  2940 */   459,  460,  461,  462,  463,  464,  272,  472,  276,  750,
 /*  2950 */   477,  478,  750,  750,  750,  750,  750,  750,  750,  455,
 /*  2960 */   750,  750,  750,  750,  466,   75,  750,  750,  750,  750,
 /*  2970 */   750,  750,  750,  750,  750,  750,  750,  476,  750,  750,
 /*  2980 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  2990 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  139,
 /*  3000 */   243,  504,  505,  506,  457,  459,  460,  461,  462,  463,
 /*  3010 */   464,  272,  472,  276,  750,  477,  478,  750,  750,  750,
 /*  3020 */   750,  750,  750,  750,  750,  750,  448,  465,  271,  446,
 /*  3030 */   270,  447,  468,  450,  750,  750,  750,  750,  750,  750,
 /*  3040 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3050 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3060 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  3070 */   466,   75,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3080 */   750,  750,  750,  476,  750,  750,  750,  750,  750,  750,
 /*  3090 */   750,  448,  465,  271,  446,  270,  447,  468,  450,  750,
 /*  3100 */   750,  750,  750,  750,  750,  146,  243,  504,  505,  506,
 /*  3110 */   457,  459,  460,  461,  462,  463,  464,  272,  472,  276,
 /*  3120 */   750,  477,  478,  750,  750,  750,  750,  750,  750,  750,
 /*  3130 */   455,  750,  750,  750,  750,  466,   75,  750,  750,  750,
 /*  3140 */   750,  750,  750,  750,  750,  750,  750,  750,  476,  750,
 /*  3150 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3160 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3170 */   147,  243,  504,  505,  506,  457,  459,  460,  461,  462,
 /*  3180 */   463,  464,  272,  472,  276,  750,  477,  478,  750,  750,
 /*  3190 */   750,  750,  750,  750,  750,  750,  750,  448,  465,  271,
 /*  3200 */   446,  270,  447,  468,  450,  750,  750,  750,  750,  750,
 /*  3210 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3220 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3230 */   750,  750,  750,  750,  750,  750,  455,  750,  750,  750,
 /*  3240 */   750,  466,   75,  750,  750,  750,  750,  750,  750,  750,
 /*  3250 */   750,  750,  750,  750,  476,  750,  750,  750,  750,  750,
 /*  3260 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  3270 */   750,  750,  750,  750,  750,  750,  148,  243,  504,  505,
 /*  3280 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*  3290 */   276,  750,  477,  478,  750,  750,  750,  750,  750,  750,
 /*  3300 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  3310 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  3320 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3330 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3340 */   750,  149,  243,  504,  505,  506,  457,  459,  460,  461,
 /*  3350 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  3360 */   750,  750,  750,  750,  750,  750,  750,  750,  448,  465,
 /*  3370 */   271,  446,  270,  447,  468,  450,  750,  750,  750,  750,
 /*  3380 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3390 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3400 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  3410 */   750,  750,  466,   75,  750,  750,  750,  750,  750,  750,
 /*  3420 */   750,  750,  750,  750,  750,  476,  750,  750,  750,  750,
 /*  3430 */   750,  750,  750,  448,  465,  271,  446,  270,  447,  468,
 /*  3440 */   450,  750,  750,  750,  750,  750,  750,  150,  243,  504,
 /*  3450 */   505,  506,  457,  459,  460,  461,  462,  463,  464,  272,
 /*  3460 */   472,  276,  750,  477,  478,  750,  750,  750,  750,  750,
 /*  3470 */   750,  750,  455,  750,  750,  750,  750,  466,   75,  750,
 /*  3480 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3490 */   476,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3500 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3510 */   750,  750,  151,  243,  504,  505,  506,  457,  459,  460,
 /*  3520 */   461,  462,  463,  464,  272,  472,  276,  750,  477,  478,
 /*  3530 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  448,
 /*  3540 */   465,  271,  446,  270,  447,  468,  450,  750,  750,  750,
 /*  3550 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3560 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3570 */   750,  750,  750,  750,  750,  750,  750,  750,  455,  750,
 /*  3580 */   750,  750,  750,  466,   75,  750,  750,  750,  750,  750,
 /*  3590 */   750,  750,  750,  750,  750,  750,  476,  750,  750,  750,
 /*  3600 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  3610 */   468,  450,  750,  750,  750,  750,  750,  750,  152,  243,
 /*  3620 */   504,  505,  506,  457,  459,  460,  461,  462,  463,  464,
 /*  3630 */   272,  472,  276,  750,  477,  478,  750,  750,  750,  750,
 /*  3640 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  3650 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3660 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3670 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3680 */   750,  750,  750,  153,  243,  504,  505,  506,  457,  459,
 /*  3690 */   460,  461,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  3700 */   478,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3710 */   448,  465,  271,  446,  270,  447,  468,  450,  750,  750,
 /*  3720 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3730 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3740 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  455,
 /*  3750 */   750,  750,  750,  750,  466,   75,  750,  750,  750,  750,
 /*  3760 */   750,  750,  750,  750,  750,  750,  750,  476,  750,  750,
 /*  3770 */   750,  750,  750,  750,  750,  448,  465,  271,  446,  270,
 /*  3780 */   447,  468,  450,  750,  750,  750,  750,  750,  750,  154,
 /*  3790 */   243,  504,  505,  506,  457,  459,  460,  461,  462,  463,
 /*  3800 */   464,  272,  472,  276,  750,  477,  478,  750,  750,  750,
 /*  3810 */   750,  750,  750,  750,  455,  750,  750,  750,  750,  466,
 /*  3820 */    75,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3830 */   750,  750,  476,  750,  750,  750,  750,  750,  750,  750,
 /*  3840 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3850 */   750,  750,  750,  750,  155,  243,  504,  505,  506,  457,
 /*  3860 */   459,  460,  461,  462,  463,  464,  272,  472,  276,  750,
 /*  3870 */   477,  478,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3880 */   750,  448,  465,  271,  446,  270,  447,  468,  450,  750,
 /*  3890 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3900 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3910 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  3920 */   455,  750,  750,  750,  750,  466,   75,  750,  750,  750,
 /*  3930 */   750,  750,  750,  750,  750,  750,  750,  750,  476,  750,
 /*  3940 */   750,  750,  750,  750,  750,  750,  448,  465,  271,  446,
 /*  3950 */   270,  447,  468,  450,  750,  750,  750,  750,  750,  750,
 /*  3960 */   156,  243,  504,  505,  506,  457,  459,  460,  461,  462,
 /*  3970 */   463,  464,  272,  472,  276,  750,  477,  478,  750,  750,
 /*  3980 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  3990 */   466,   75,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4000 */   750,  750,  750,  476,  750,  750,  750,  750,  750,  750,
 /*  4010 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4020 */   750,  750,  750,  750,  750,  157,  243,  504,  505,  506,
 /*  4030 */   457,  459,  460,  461,  462,  463,  464,  272,  472,  276,
 /*  4040 */   750,  477,  478,  750,  750,  750,  750,  750,  750,  750,
 /*  4050 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  4060 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4070 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4080 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4090 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  4100 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  4110 */   750,  750,  750,  750,  750,  750,  750,  448,  465,  271,
 /*  4120 */   446,  270,  447,  468,  450,  750,  750,  750,  750,  750,
 /*  4130 */   750,  158,  243,  504,  505,  506,  457,  459,  460,  461,
 /*  4140 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  4150 */   750,  750,  750,  750,  750,  750,  455,  750,  750,  750,
 /*  4160 */   750,  466,   75,  750,  750,  750,  750,  750,  750,  750,
 /*  4170 */   750,  750,  750,  750,  476,  750,  750,  750,  750,  750,
 /*  4180 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4190 */   750,  750,  750,  750,  750,  750,  140,  243,  504,  505,
 /*  4200 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*  4210 */   276,  750,  477,  478,  750,  750,  750,  750,  750,  750,
 /*  4220 */   750,  750,  750,  448,  465,  271,  446,  270,  447,  468,
 /*  4230 */   450,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4240 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4250 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4260 */   750,  750,  455,  750,  750,  750,  750,  466,   75,  750,
 /*  4270 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4280 */   476,  750,  750,  750,  750,  750,  750,  750,  448,  465,
 /*  4290 */   271,  446,  270,  447,  468,  450,  750,  750,  750,  750,
 /*  4300 */   750,  750,  159,  243,  504,  505,  506,  457,  459,  460,
 /*  4310 */   461,  462,  463,  464,  272,  472,  276,  750,  477,  478,
 /*  4320 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  4330 */   750,  750,  466,   75,  750,  750,  750,  750,  750,  750,
 /*  4340 */   750,  750,  750,  750,  750,  476,  750,  750,  750,  750,
 /*  4350 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4360 */   750,  750,  750,  750,  750,  750,  750,  160,  243,  504,
 /*  4370 */   505,  506,  457,  459,  460,  461,  462,  463,  464,  272,
 /*  4380 */   472,  276,  750,  477,  478,  750,  750,  750,  750,  750,
 /*  4390 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  4400 */   468,  450,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4410 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4420 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4430 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  4440 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4450 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  448,
 /*  4460 */   465,  271,  446,  270,  447,  468,  450,  750,  750,  750,
 /*  4470 */   750,  750,  750,  161,  243,  504,  505,  506,  457,  459,
 /*  4480 */   460,  461,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  4490 */   478,  750,  750,  750,  750,  750,  750,  750,  455,  750,
 /*  4500 */   750,  750,  750,  466,   75,  750,  750,  750,  750,  750,
 /*  4510 */   750,  750,  750,  750,  750,  750,  476,  750,  750,  750,
 /*  4520 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4530 */   750,  750,  750,  750,  750,  750,  750,  750,  162,  243,
 /*  4540 */   504,  505,  506,  457,  459,  460,  461,  462,  463,  464,
 /*  4550 */   272,  472,  276,  750,  477,  478,  750,  750,  750,  750,
 /*  4560 */   750,  750,  750,  750,  750,  448,  465,  271,  446,  270,
 /*  4570 */   447,  468,  450,  750,  750,  750,  750,  750,  750,  750,
 /*  4580 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4590 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4600 */   750,  750,  750,  750,  455,  750,  750,  750,  750,  466,
 /*  4610 */    75,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4620 */   750,  750,  476,  750,  750,  750,  750,  750,  750,  750,
 /*  4630 */   448,  465,  271,  446,  270,  447,  468,  450,  750,  750,
 /*  4640 */   750,  750,  750,  750,  163,  243,  504,  505,  506,  457,
 /*  4650 */   459,  460,  461,  462,  463,  464,  272,  472,  276,  750,
 /*  4660 */   477,  478,  750,  750,  750,  750,  750,  750,  750,  455,
 /*  4670 */   750,  750,  750,  750,  466,   75,  750,  750,  750,  750,
 /*  4680 */   750,  750,  750,  750,  750,  750,  750,  476,  750,  750,
 /*  4690 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4700 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  164,
 /*  4710 */   243,  504,  505,  506,  457,  459,  460,  461,  462,  463,
 /*  4720 */   464,  272,  472,  276,  750,  477,  478,  750,  750,  750,
 /*  4730 */   750,  750,  750,  750,  750,  750,  448,  465,  271,  446,
 /*  4740 */   270,  447,  468,  450,  750,  750,  750,  750,  750,  750,
 /*  4750 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4760 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4770 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  4780 */   466,   75,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4790 */   750,  750,  750,  476,  750,  750,  750,  750,  750,  750,
 /*  4800 */   750,  448,  465,  271,  446,  270,  447,  468,  450,  750,
 /*  4810 */   750,  750,  750,  750,  750,  165,  243,  504,  505,  506,
 /*  4820 */   457,  459,  460,  461,  462,  463,  464,  272,  472,  276,
 /*  4830 */   750,  477,  478,  750,  750,  750,  750,  750,  750,  750,
 /*  4840 */   455,  750,  750,  750,  750,  466,   75,  750,  750,  750,
 /*  4850 */   750,  750,  750,  750,  750,  750,  750,  750,  476,  750,
 /*  4860 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4870 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4880 */   166,  243,  504,  505,  506,  457,  459,  460,  461,  462,
 /*  4890 */   463,  464,  272,  472,  276,  750,  477,  478,  750,  750,
 /*  4900 */   750,  750,  750,  750,  750,  750,  750,  448,  465,  271,
 /*  4910 */   446,  270,  447,  468,  450,  750,  750,  750,  750,  750,
 /*  4920 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4930 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  4940 */   750,  750,  750,  750,  750,  750,  455,  750,  750,  750,
 /*  4950 */   750,  466,   75,  750,  750,  750,  750,  750,  750,  750,
 /*  4960 */   750,  750,  750,  750,  476,  750,  750,  750,  750,  750,
 /*  4970 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  4980 */   750,  750,  750,  750,  750,  750,  141,  243,  504,  505,
 /*  4990 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*  5000 */   276,  750,  477,  478,  750,  750,  750,  750,  750,  750,
 /*  5010 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  5020 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  5030 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5040 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5050 */   750,  167,  243,  504,  505,  506,  457,  459,  460,  461,
 /*  5060 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  5070 */   750,  750,  750,  750,  750,  750,  750,  750,  448,  465,
 /*  5080 */   271,  446,  270,  447,  468,  450,  750,  750,  750,  750,
 /*  5090 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5100 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5110 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  5120 */   750,  750,  466,   75,  750,  750,  750,  750,  750,  750,
 /*  5130 */   750,  750,  750,  750,  750,  476,  750,  750,  750,  750,
 /*  5140 */   750,  750,  750,  448,  465,  271,  446,  270,  447,  468,
 /*  5150 */   450,  750,  750,  750,  750,  750,  750,  168,  243,  504,
 /*  5160 */   505,  506,  457,  459,  460,  461,  462,  463,  464,  272,
 /*  5170 */   472,  276,  750,  477,  478,  750,  750,  750,  750,  750,
 /*  5180 */   750,  750,  455,  750,  750,  750,  750,  466,   75,  750,
 /*  5190 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5200 */   476,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5210 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5220 */   750,  750,  169,  243,  504,  505,  506,  457,  459,  460,
 /*  5230 */   461,  462,  463,  464,  272,  472,  276,  750,  477,  478,
 /*  5240 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  448,
 /*  5250 */   465,  271,  446,  270,  447,  468,  450,  750,  750,  750,
 /*  5260 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5270 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5280 */   750,  750,  750,  750,  750,  750,  750,  750,  455,  750,
 /*  5290 */   750,  750,  750,  466,   75,  750,  750,  750,  750,  750,
 /*  5300 */   750,  750,  750,  750,  750,  750,  476,  750,  750,  750,
 /*  5310 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  5320 */   468,  450,  750,  750,  750,  750,  750,  750,  170,  243,
 /*  5330 */   504,  505,  506,  457,  459,  460,  461,  462,  463,  464,
 /*  5340 */   272,  472,  276,  750,  477,  478,  750,  750,  750,  750,
 /*  5350 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  5360 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5370 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5380 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5390 */   750,  750,  750,  171,  243,  504,  505,  506,  457,  459,
 /*  5400 */   460,  461,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  5410 */   478,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5420 */   448,  465,  271,  446,  270,  447,  468,  450,  750,  750,
 /*  5430 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5440 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5450 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  455,
 /*  5460 */   750,  750,  750,  750,  466,   75,  750,  750,  750,  750,
 /*  5470 */   750,  750,  750,  750,  750,  750,  750,  476,  750,  750,
 /*  5480 */   750,  750,  750,  750,  750,  448,  465,  271,  446,  270,
 /*  5490 */   447,  468,  450,  750,  750,  750,  750,  750,  750,  172,
 /*  5500 */   243,  504,  505,  506,  457,  459,  460,  461,  462,  463,
 /*  5510 */   464,  272,  472,  276,  750,  477,  478,  750,  750,  750,
 /*  5520 */   750,  750,  750,  750,  455,  750,  750,  750,  750,  466,
 /*  5530 */    75,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5540 */   750,  750,  476,  750,  750,  750,  750,  750,  750,  750,
 /*  5550 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5560 */   750,  750,  750,  750,  173,  243,  504,  505,  506,  457,
 /*  5570 */   459,  460,  461,  462,  463,  464,  272,  472,  276,  750,
 /*  5580 */   477,  478,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5590 */   750,  448,  465,  271,  446,  270,  447,  468,  450,  750,
 /*  5600 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5610 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5620 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5630 */   455,  750,  750,  750,  750,  466,   75,  750,  750,  750,
 /*  5640 */   750,  750,  750,  750,  750,  750,  750,  750,  476,  750,
 /*  5650 */   750,  750,  750,  750,  750,  750,  448,  465,  271,  446,
 /*  5660 */   270,  447,  468,  450,  750,  750,  750,  750,  750,  750,
 /*  5670 */   174,  243,  504,  505,  506,  457,  459,  460,  461,  462,
 /*  5680 */   463,  464,  272,  472,  276,  750,  477,  478,  750,  750,
 /*  5690 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  5700 */   466,   75,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5710 */   750,  750,  750,  476,  750,  750,  750,  750,  750,  750,
 /*  5720 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5730 */   750,  750,  750,  750,  750,  175,  243,  504,  505,  506,
 /*  5740 */   457,  459,  460,  461,  462,  463,  464,  272,  472,  276,
 /*  5750 */   750,  477,  478,  750,  750,  750,  750,  750,  750,  750,
 /*  5760 */   750,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  5770 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5780 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5790 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5800 */   750,  455,  750,  750,  750,  750,  466,   75,  750,  750,
 /*  5810 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  5820 */   750,  750,  750,  750,  750,  750,  750,  448,  465,  271,
 /*  5830 */   446,  270,  447,  468,  450,  750,  750,  750,  750,  750,
 /*  5840 */   750,  176,  243,  504,  505,  506,  457,  459,  460,  461,
 /*  5850 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  750,
 /*  5860 */   750,  750,  750,  750,  750,  750,  455,  750,  750,  750,
 /*  5870 */   750,  466,   75,  750,  750,  750,  750,  750,  750,  750,
 /*  5880 */   750,  750,  750,  750,  476,  750,  750,  750,  750,  750,
 /*  5890 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5900 */   750,  750,  750,  750,  750,  750,  177,  243,  504,  505,
 /*  5910 */   506,  457,  459,  460,  461,  462,  463,  464,  272,  472,
 /*  5920 */   276,  750,  477,  478,  750,  750,  750,  750,  750,  750,
 /*  5930 */   750,  750,  750,  448,  465,  271,  446,  270,  447,  468,
 /*  5940 */   450,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5950 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5960 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5970 */   750,  750,  455,  750,  750,  750,  750,  466,   75,  750,
 /*  5980 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  5990 */   476,  750,  750,  750,  750,  750,  750,  750,  448,  465,
 /*  6000 */   271,  446,  270,  447,  468,  450,  750,  750,  750,  750,
 /*  6010 */   750,  750,  178,  243,  504,  505,  506,  457,  459,  460,
 /*  6020 */   461,  462,  463,  464,  272,  472,  276,  750,  477,  478,
 /*  6030 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  6040 */   750,  750,  466,   75,  750,  750,  750,  750,  750,  750,
 /*  6050 */   750,  750,  750,  750,  750,  476,  750,  750,  750,  750,
 /*  6060 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6070 */   750,  750,  750,  750,  750,  750,  750,  179,  243,  504,
 /*  6080 */   505,  506,  457,  459,  460,  461,  462,  463,  464,  272,
 /*  6090 */   472,  276,  750,  477,  478,  750,  750,  750,  750,  750,
 /*  6100 */   750,  750,  750,  750,  448,  465,  271,  446,  270,  447,
 /*  6110 */   468,  450,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6120 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6130 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6140 */   750,  750,  750,  455,  750,  750,  750,  750,  466,   75,
 /*  6150 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6160 */   750,  476,  750,  750,  750,  750,  750,  750,  750,  448,
 /*  6170 */   465,  271,  446,  270,  447,  468,  450,  750,  750,  750,
 /*  6180 */   750,  750,  750,  180,  243,  504,  505,  506,  457,  459,
 /*  6190 */   460,  461,  462,  463,  464,  272,  472,  276,  750,  477,
 /*  6200 */   478,  750,  750,  750,  750,  750,  750,  750,  455,  750,
 /*  6210 */   750,  750,  750,  466,   75,  750,  750,  750,  750,  750,
 /*  6220 */   750,  750,  750,  750,  750,  750,  476,  750,  750,  750,
 /*  6230 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6240 */   750,  750,  750,  750,  750,  750,  750,  750,  181,  243,
 /*  6250 */   504,  505,  506,  457,  459,  460,  461,  462,  463,  464,
 /*  6260 */   272,  472,  276,  750,  477,  478,  750,  750,  750,  750,
 /*  6270 */   750,  750,  750,  750,  750,  448,  465,  271,  446,  270,
 /*  6280 */   447,  468,  450,  750,  750,  750,  750,  750,  750,  750,
 /*  6290 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6300 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6310 */   750,  750,  750,  750,  455,  750,  750,  750,  750,  466,
 /*  6320 */    75,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6330 */   750,  750,  476,  750,  750,  750,  750,  750,  750,  750,
 /*  6340 */   448,  465,  271,  446,  270,  447,  468,  450,  750,  750,
 /*  6350 */   750,  750,  750,  750,  182,  243,  504,  505,  506,  457,
 /*  6360 */   459,  460,  461,  462,  463,  464,  272,  472,  276,  750,
 /*  6370 */   477,  478,  750,  750,  750,  750,  750,  750,  750,  455,
 /*  6380 */   750,  750,  750,  750,  466,   75,  750,  750,  750,  750,
 /*  6390 */   750,  750,  750,  750,  750,  750,  750,  476,  750,  750,
 /*  6400 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6410 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  183,
 /*  6420 */   243,  504,  505,  506,  457,  459,  460,  461,  462,  463,
 /*  6430 */   464,  272,  472,  276,  750,  477,  478,  750,  750,  750,
 /*  6440 */   750,  750,  750,  484,  750,  750,  448,  750,  271,  446,
 /*  6450 */   267,  447,  489,  450,  750,  750,  750,  750,  750,  750,
 /*  6460 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6470 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6480 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  6490 */   750,  448,  750,  271,  446,  451,  447,  750,  450,  750,
 /*  6500 */   750,  750,  750,  117,  750,  430,  750,  750,  750,  750,
 /*  6510 */   750,  750,  750,  750,  750,  750,  750,  750,  448,  465,
 /*  6520 */   271,  446,  270,  447,  468,  450,  750,  750,  750,  750,
 /*  6530 */   455,  750,  448,  465,  271,  446,  270,  447,  468,  450,
 /*  6540 */   750,  750,  495,  241,  340,  240,  284,  285,   70,  500,
 /*  6550 */   750,  483,  485,  486,  750,  750,  750,  455,  750,  750,
 /*  6560 */   750,  750,  466,   75,  750,  750,  750,  750,  192,  750,
 /*  6570 */   118,  455,  494,  496,  497,  476,  466,   75,  750,  750,
 /*  6580 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  476,
 /*  6590 */   448,  465,  271,  446,  270,  447,  468,  450,  242,  750,
 /*  6600 */   431,  506,  457,  459,  460,  461,  462,  463,  464,  272,
 /*  6610 */   472,  276,  750,  477,  478,  456,  457,  459,  460,  461,
 /*  6620 */   462,  463,  464,  272,  472,  276,  750,  477,  478,  455,
 /*  6630 */   750,  750,  750,  750,  466,   75,  750,  750,  750,  750,
 /*  6640 */   750,  750,  750,  750,  750,  750,  750,  476,  750,  750,
 /*  6650 */   750,  750,  750,  484,  750,  750,  448,  750,  271,  446,
 /*  6660 */   451,  447,  750,  450,  448,  750,  271,  446,  451,  447,
 /*  6670 */   750,  450,  750,  473,  457,  459,  460,  461,  462,  463,
 /*  6680 */   464,  272,  472,  276,  750,  477,  478,  750,  750,  750,
 /*  6690 */   750,  484,  750,  750,  448,  455,  271,  446,  451,  447,
 /*  6700 */   750,  450,  750,  455,  484,  750,  750,  448,  750,  271,
 /*  6710 */   446,  451,  447,  117,  450,  750,  750,  750,  750,  750,
 /*  6720 */   750,  433,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6730 */   750,  750,  750,  455,  750,  750,  750,  750,  750,  750,
 /*  6740 */   750,  750,  750,  750,  750,  750,  455,  750,  750,  750,
 /*  6750 */   750,  117,  495,  269,  498,  237,  284,  285,  750,  500,
 /*  6760 */   750,  483,  485,  486,  117,  750,  750,  750,  750,  750,
 /*  6770 */   750,  750,  750,  750,  750,  750,  750,  750,  192,  750,
 /*  6780 */   118,  750,  494,  496,  497,  750,  750,  750,  750,  750,
 /*  6790 */   495,  241,  498,  237,  284,  285,  750,  500,  750,  483,
 /*  6800 */   485,  486,  750,  495,  241,  340,  240,  284,  285,  745,
 /*  6810 */   500,  750,  483,  485,  486,  750,  192,  750,  118,  750,
 /*  6820 */   494,  496,  497,  750,  750,  750,  750,  750,  750,  192,
 /*  6830 */   750,  118,  750,  494,  496,  497,  750,  750,  750,  750,
 /*  6840 */   750,  484,  750,  750,  448,  750,  271,  446,  451,  447,
 /*  6850 */   750,  450,  750,  484,  750,  750,  448,  750,  271,  446,
 /*  6860 */   451,  447,  750,  450,  750,  750,  750,  750,  750,  750,
 /*  6870 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6880 */   750,  750,  750,  455,  750,  750,  750,  750,  750,  750,
 /*  6890 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  6900 */   750,  117,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6910 */   750,  750,  750,  117,  750,  750,  750,  750,  750,  750,
 /*  6920 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  6930 */   448,  465,  271,  446,  270,  447,  468,  450,  750,  750,
 /*  6940 */   495,  241,  498,  240,  284,  285,  750,  500,  750,  483,
 /*  6950 */   485,  486,  495,  268,  498,  237,  284,  285,  750,  500,
 /*  6960 */   750,  483,  485,  486,  750,  750,  192,  750,  118,  455,
 /*  6970 */   494,  496,  497,  750,  466,  750,  750,  750,  192,  750,
 /*  6980 */   118,  750,  494,  496,  497,  750,  484,  476,  750,  448,
 /*  6990 */   750,  271,  446,  451,  447,  750,  450,  750,  750,  484,
 /*  7000 */   750,  750,  448,  750,  271,  446,  451,  447,  750,  450,
 /*  7010 */   750,  750,  750,  750,  458,  459,  460,  461,  462,  463,
 /*  7020 */   464,  272,  472,  276,  750,  477,  478,  750,  455,  750,
 /*  7030 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7040 */   750,  455,  750,  750,  750,  750,  117,  750,  750,  750,
 /*  7050 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  117,
 /*  7060 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7070 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7080 */   750,  750,  750,  750,  750,  495,  750,  750,  239,  598,
 /*  7090 */   277,   83,  500,  750,  483,  485,  486,  750,  495,  750,
 /*  7100 */   750,  239,  598,  353,   85,  500,  750,  483,  485,  486,
 /*  7110 */   750,  192,  750,  118,  750,  494,  496,  497,  750,  750,
 /*  7120 */   750,  750,  750,  750,  192,  750,  118,  750,  494,  496,
 /*  7130 */   497,  484,  750,  750,  448,  750,  271,  446,  451,  447,
 /*  7140 */   750,  450,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7150 */   750,  448,  750,  271,  446,  270,  447,  468,  450,  750,
 /*  7160 */   750,  750,  750,  750,  484,  750,  750,  448,  750,  271,
 /*  7170 */   446,  451,  447,  455,  450,  750,  750,  750,  750,  750,
 /*  7180 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7190 */   455,  117,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7200 */   750,  750,  750,  750,  750,  750,  455,  750,  476,  750,
 /*  7210 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7220 */   750,  750,  750,  750,  117,  750,  750,  750,  750,  750,
 /*  7230 */   495,  750,  750,  239,  598,  350,   82,  500,  616,  483,
 /*  7240 */   485,  486,  272,  750,  750,  750,  477,  750,  750,  750,
 /*  7250 */   750,  750,  750,  750,  750,  750,  192,  750,  118,  750,
 /*  7260 */   494,  496,  497,  495,  750,  750,  239,  598,  354,   84,
 /*  7270 */   500,  750,  483,  485,  486,  484,  750,  750,  448,  750,
 /*  7280 */   271,  446,  451,  447,  750,  450,  750,  366,  617,  192,
 /*  7290 */   750,  118,  750,  494,  496,  497,  750,  750,  750,  448,
 /*  7300 */   750,  271,  446,  451,  447,  750,  450,  750,  750,  750,
 /*  7310 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  7320 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7330 */   750,  750,  750,  750,  750,  117,  750,  484,  455,  750,
 /*  7340 */   448,  750,  271,  446,  451,  447,  750,  450,  750,  750,
 /*  7350 */   750,  750,  750,  750,  750,  750,  117,  750,  750,  750,
 /*  7360 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7370 */   750,  750,  750,  750,  495,  750,  750,  238,  750,  455,
 /*  7380 */    87,  595,  480,  483,  485,  486,  750,  750,  750,  750,
 /*  7390 */   750,  750,  750,  750,  750,  495,  750,  117,  559,  750,
 /*  7400 */   192,  750,  118,  750,  494,  496,  497,  750,  199,  484,
 /*  7410 */   750,  750,  448,  200,  271,  446,  451,  447,  750,  450,
 /*  7420 */   750,  185,  750,  118,  750,  494,  496,  497,  750,  750,
 /*  7430 */   750,  750,  750,  750,  750,  750,  495,  750,  750,  238,
 /*  7440 */   750,  750,   86,  595,  481,  483,  485,  486,  750,  484,
 /*  7450 */   750,  455,  448,  750,  271,  446,  451,  447,  750,  450,
 /*  7460 */   750,  750,  192,  750,  118,  750,  494,  496,  497,  117,
 /*  7470 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7480 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7490 */   750,  455,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7500 */   750,  750,  750,  750,  750,  750,  750,  750,  495,  117,
 /*  7510 */   750,  239,  598,  351,  750,  500,  750,  483,  485,  486,
 /*  7520 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7530 */   750,  750,  750,  750,  192,  750,  118,  750,  494,  496,
 /*  7540 */   497,  750,  750,  750,  750,  750,  750,  750,  495,  750,
 /*  7550 */   750,  239,  598,  352,  750,  500,  750,  483,  485,  486,
 /*  7560 */   750,  750,  750,  750,  750,  484,  750,  750,  448,  750,
 /*  7570 */   271,  446,  451,  447,  192,  450,  118,  750,  494,  496,
 /*  7580 */   497,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7590 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7600 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  7610 */   484,  750,  750,  448,  750,  271,  446,  451,  447,  750,
 /*  7620 */   450,  750,  750,  484,  750,  117,  448,  750,  271,  446,
 /*  7630 */   451,  447,  750,  450,  750,  750,  750,  750,  750,  750,
 /*  7640 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7650 */   750,  750,  455,  750,  750,  750,  750,  750,  750,  750,
 /*  7660 */   750,  750,  750,  750,  495,  455,  750,  239,  598,  355,
 /*  7670 */   117,  500,  750,  483,  485,  486,  750,  750,  750,  750,
 /*  7680 */   750,  750,  750,  117,  750,  750,  750,  750,  750,  750,
 /*  7690 */   192,  750,  118,  750,  494,  496,  497,  750,  750,  750,
 /*  7700 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  495,
 /*  7710 */   750,  750,  239,  598,  356,  750,  500,  750,  483,  485,
 /*  7720 */   486,  750,  495,  750,  750,  238,  750,  750,  750,  595,
 /*  7730 */   482,  483,  485,  486,  750,  192,  750,  118,  750,  494,
 /*  7740 */   496,  497,  750,  750,  750,  750,  750,  750,  192,  750,
 /*  7750 */   118,  750,  494,  496,  497,  750,  750,  750,  750,  750,
 /*  7760 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7770 */   750,  750,  750,  750,  750,  484,  750,  750,  448,  750,
 /*  7780 */   271,  446,  451,  447,  750,  450,  750,  750,  750,  750,
 /*  7790 */   750,  448,  750,  271,  446,  451,  447,  750,  450,  448,
 /*  7800 */   750,  271,  446,  451,  447,  750,  450,  750,  750,  750,
 /*  7810 */   750,  750,  750,  750,  750,  750,  750,  455,  750,  750,
 /*  7820 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7830 */   455,  750,  750,  750,  750,  117,  750,  750,  455,  448,
 /*  7840 */   750,  271,  446,  451,  447,  750,  450,  750,  117,  750,
 /*  7850 */   750,  750,  750,  750,  750,  750,  117,  750,  750,  750,
 /*  7860 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7870 */   750,  750,  750,  750,  495,  750,  750,  238,  455,  750,
 /*  7880 */   750,  595,  597,  483,  485,  486,  750,  495,  750,  750,
 /*  7890 */   559,  750,  750,  750,  750,  495,  117,  750,  559,  750,
 /*  7900 */   192,  750,  118,  750,  494,  496,  497,  750,  750,  750,
 /*  7910 */   750,  750,  750,  193,  750,  118,  750,  494,  496,  497,
 /*  7920 */   750,  120,  750,  118,  750,  494,  496,  497,  750,  750,
 /*  7930 */   750,  750,  750,  750,  750,  495,  750,  750,  559,  750,
 /*  7940 */   750,  750,  750,  750,  750,  750,  448,  750,  271,  446,
 /*  7950 */   451,  447,  448,  450,  271,  446,  270,  447,  468,  450,
 /*  7960 */   750,  137,  750,  118,  750,  494,  496,  497,  750,  750,
 /*  7970 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  7980 */   750,  750,  750,  750,  750,  455,  750,  750,  750,  750,
 /*  7990 */   750,  455,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  8000 */   750,  750,  750,  117,  750,  750,  750,  750,  750,  476,
 /*  8010 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  8020 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  8030 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  616,
 /*  8040 */   750,  750,  495,  272,  750,  559,  750,  477,  750,  750,
 /*  8050 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
 /*  8060 */   750,  750,  750,  750,  750,  750,  750,  750,  138,  750,
 /*  8070 */   118,  750,  494,  496,  497,  750,  750,  750,  750,  750,
 /*  8080 */   750,  750,  750,  750,  750,  750,  750,  750,  750,  615,
);
static $yy_lookahead = array(
 /*     0 */     2,    3,    4,    5,  182,   77,   78,   11,   10,  187,
 /*    10 */   188,  189,  190,  191,  192,  193,    2,  195,  196,   35,
 /*    20 */    36,   37,   38,   39,   40,  170,  171,  172,  173,  174,
 /*    30 */   175,  176,  177,   35,   36,   37,   38,   39,   40,  202,
 /*    40 */   203,   11,  205,  206,  171,   11,   48,   49,   50,  204,
 /*    50 */    52,  206,    3,    4,   51,  163,  164,  165,   61,  167,
 /*    60 */   168,  169,    3,  299,  209,  301,  299,  303,  304,  214,
 /*    70 */   215,   73,   74,   75,   76,   79,   80,   81,   48,   49,
 /*    80 */    82,  219,  227,  210,  211,  212,  213,  214,  215,  216,
 /*    90 */   184,  185,   43,   44,   45,   46,   47,   48,   49,   50,
 /*   100 */   102,  103,   68,  105,  249,  250,  251,  252,  253,  254,
 /*   110 */   255,  256,  257,  258,  259,  260,  261,  262,  263,    6,
 /*   120 */   265,  266,   73,  217,   11,  127,  128,  129,  130,  131,
 /*   130 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*   140 */   142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
 /*   150 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*   160 */   167,   48,   49,  170,  171,  172,  173,  174,  175,  176,
 /*   170 */   177,    7,  310,    9,  106,  107,  108,   13,   14,   15,
 /*   180 */    16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
 /*   190 */   244,   27,   28,   29,   30,  218,    2,   33,  221,  222,
 /*   200 */   223,    6,  209,  311,  312,  313,  314,  214,  215,    6,
 /*   210 */   318,  319,  320,  321,    2,    2,    8,    5,    5,   52,
 /*   220 */   227,    2,   10,   10,    5,  185,  215,  234,  235,  236,
 /*   230 */   237,  238,   11,  240,  241,  242,  243,  233,  245,  246,
 /*   240 */   247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
 /*   250 */   257,  258,  259,  260,  261,  262,  263,  217,  265,  266,
 /*   260 */   267,  268,  269,  270,  271,   71,  273,    2,  275,  276,
 /*   270 */   277,  167,   64,   65,  170,  171,  172,  173,  174,  175,
 /*   280 */   176,  177,  239,  116,  117,  292,   91,  294,   93,  296,
 /*   290 */   297,  298,  164,  165,   82,  167,  168,  169,  233,  170,
 /*   300 */    79,   80,   99,  174,  175,  176,   41,  178,  179,  180,
 /*   310 */   181,  239,    2,  209,  102,  103,  104,  170,  214,  215,
 /*   320 */     6,  174,  175,  176,  226,   11,  179,  180,  181,  231,
 /*   330 */   232,  227,   35,   36,   37,   38,   39,   40,  234,  235,
 /*   340 */   236,  237,  238,  315,  240,  241,  242,  243,   83,  245,
 /*   350 */   246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*   360 */   256,  257,  258,  259,  260,  261,  262,  263,   52,  265,
 /*   370 */   266,  267,  268,  269,  270,  271,  300,  273,  302,  275,
 /*   380 */   276,  277,    2,    3,    4,    5,    2,    3,    4,    5,
 /*   390 */    10,  264,    6,   83,   10,  264,  292,   11,  294,  170,
 /*   400 */   296,  297,  298,  174,  175,  176,  170,  171,  172,  173,
 /*   410 */   174,  175,  176,  177,  291,   35,   36,   37,   38,   39,
 /*   420 */    40,  170,  106,  107,  108,  174,  175,  176,   48,   49,
 /*   430 */    50,  170,   48,   49,  230,  174,  175,   51,  177,  311,
 /*   440 */   312,  313,  314,   48,   49,  209,  318,  319,  320,  321,
 /*   450 */   214,  215,  171,   73,   74,   75,   76,   73,   74,   75,
 /*   460 */    76,  329,   82,  227,  170,  166,  170,   11,  174,  175,
 /*   470 */   174,  175,  176,  109,  110,  111,  112,  113,  114,  115,
 /*   480 */   229,    2,  102,  103,  248,  249,  250,  251,  252,  253,
 /*   490 */   254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
 /*   500 */     2,  265,  266,    5,   48,   49,    1,  127,  128,  129,
 /*   510 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   520 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*   530 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*   540 */   160,  161,    2,    3,    4,    5,    2,    3,    4,    5,
 /*   550 */    10,  199,   84,  201,   10,   91,  305,   93,  280,  265,
 /*   560 */     2,   59,   83,   61,  328,   88,   89,  170,  171,  172,
 /*   570 */   173,  174,  175,  176,  177,   35,   36,   37,   38,   39,
 /*   580 */    40,   79,   59,   60,    6,    3,    4,  293,   48,   49,
 /*   590 */    50,   52,   52,   91,   92,   93,   94,   59,   96,   97,
 /*   600 */    98,   71,   72,  170,   10,   59,  209,  174,  175,  176,
 /*   610 */    99,  214,  215,   73,   74,   75,   76,   73,   74,   75,
 /*   620 */    76,  325,  326,  327,  227,   79,   48,   49,   34,   91,
 /*   630 */    92,   93,   94,  170,   96,   97,  285,  174,  175,  176,
 /*   640 */    94,   83,   96,   97,  105,  105,  249,  250,  251,  252,
 /*   650 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*   660 */   263,  170,  265,  266,    6,  174,  175,  127,  128,  129,
 /*   670 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   680 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*   690 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*   700 */   160,  161,    2,    3,    4,    5,   52,   53,   54,   55,
 /*   710 */    10,   57,    6,  170,  171,  172,  173,  174,  175,  176,
 /*   720 */   177,   67,  118,  119,  100,  170,    6,  172,  173,  174,
 /*   730 */   175,   11,  177,    0,    1,   35,   36,   37,   38,   39,
 /*   740 */    40,  286,   42,   85,   11,  101,  283,   47,   48,   49,
 /*   750 */    50,   86,  209,   52,   48,   49,  265,  214,  215,  326,
 /*   760 */   327,  170,   79,   80,  209,  174,  175,  176,   48,   49,
 /*   770 */   227,  287,   42,   73,   74,   75,   76,  234,  235,  236,
 /*   780 */   237,  238,  227,  240,  241,  242,  243,   11,  245,  288,
 /*   790 */   247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
 /*   800 */   257,  258,  259,  260,  261,  262,  263,  117,  265,  266,
 /*   810 */    11,    6,   79,   80,   81,    2,   11,  116,    5,    6,
 /*   820 */   229,   62,   63,   10,   48,   49,    6,  127,  128,  129,
 /*   830 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   840 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*   850 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*   860 */   160,  161,    2,    3,    4,    5,  310,   68,   48,   49,
 /*   870 */    10,    6,  317,  170,  183,  172,  173,  174,  175,  170,
 /*   880 */   177,  310,   58,  174,  175,  176,  295,  170,  171,  172,
 /*   890 */   173,  174,  175,  176,  177,   35,   36,   37,   38,   39,
 /*   900 */    40,  170,   11,   90,  225,  174,  175,  176,   48,   49,
 /*   910 */    50,  170,  209,  172,  173,  174,  175,  170,  177,   11,
 /*   920 */     6,  174,  175,  176,   61,   11,  209,  224,  232,   64,
 /*   930 */   227,  214,  215,   73,   74,   75,   76,   61,  170,   48,
 /*   940 */    49,    6,  174,  175,  227,  231,   11,   11,   42,   10,
 /*   950 */   209,   12,    7,   47,    9,    5,   48,   49,  186,    6,
 /*   960 */   229,  220,   48,   49,   11,  105,  249,  250,  251,  252,
 /*   970 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*   980 */   263,    3,  265,  266,   48,   49,  121,  127,  128,  129,
 /*   990 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1000 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  1010 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*  1020 */   160,  161,    2,    3,    4,    5,  295,   11,  194,   11,
 /*  1030 */    10,  170,   10,  265,   12,  174,  175,  176,   11,  194,
 /*  1040 */    10,  170,   12,  172,  173,  174,  175,   10,  177,   12,
 /*  1050 */   194,   10,  194,   12,    3,   35,   36,   37,   38,   39,
 /*  1060 */    40,  293,  194,  194,   48,   49,   48,   49,   48,   49,
 /*  1070 */    50,    2,    3,    4,    5,   48,   49,   11,  194,   10,
 /*  1080 */   209,  170,    6,  172,  173,  174,  175,   11,  177,  228,
 /*  1090 */   229,   11,  194,   73,   74,   75,   76,   11,  227,  194,
 /*  1100 */   197,  194,    3,  194,   35,   36,   37,   38,   39,   40,
 /*  1110 */   194,    6,   31,  198,   48,   49,   11,   48,   49,   50,
 /*  1120 */   209,    6,    6,  197,  197,  105,   11,   11,   48,   49,
 /*  1130 */   198,  198,    3,  208,   48,   49,    3,  197,  227,  208,
 /*  1140 */    71,  200,   73,   74,   75,   76,   11,  127,  128,  129,
 /*  1150 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1160 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
 /*  1170 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*  1180 */   160,  161,    2,   48,   49,    5,  207,  207,  123,  316,
 /*  1190 */    10,   99,  322,   41,   41,   41,  127,  128,  129,  130,
 /*  1200 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1210 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  1220 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  1230 */   161,    2,    3,    4,    5,   62,   63,   11,   10,   10,
 /*  1240 */    71,   11,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  1250 */     6,   10,   81,   11,   11,   82,   10,   10,   78,   11,
 /*  1260 */    11,   10,   82,   81,   35,   36,   37,   38,   39,   40,
 /*  1270 */    92,   10,   10,   10,   48,   49,   10,   48,   49,   50,
 /*  1280 */    10,  209,  102,  103,  104,   10,  214,  215,   10,   10,
 /*  1290 */    10,   48,   49,  120,   10,  122,   48,   49,  125,  227,
 /*  1300 */    10,   10,   73,   74,   75,   76,  234,  235,  236,  237,
 /*  1310 */   238,   10,  240,  241,  242,  243,   10,  245,   10,  247,
 /*  1320 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  1330 */   258,  259,  260,  261,  262,  263,   10,  265,  266,   10,
 /*  1340 */     2,   10,   92,    5,   11,   10,    2,   10,   10,    5,
 /*  1350 */    10,   10,   10,   70,   10,   10,  127,  128,  129,  130,
 /*  1360 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1370 */   141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
 /*  1380 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  1390 */   161,  167,   11,    6,  170,  171,  172,  173,  174,  175,
 /*  1400 */   176,  177,    6,   10,  170,   10,  172,  173,  174,  175,
 /*  1410 */   170,  177,  172,  173,  174,  175,   78,  177,   11,   11,
 /*  1420 */    82,   10,   78,   10,   69,   11,   82,   10,   10,   48,
 /*  1430 */    49,   10,   10,  209,   10,   48,   49,   10,  214,  215,
 /*  1440 */   102,  103,  104,  209,   48,   49,  102,  103,  104,  209,
 /*  1450 */     2,  227,   11,    5,    0,    1,   48,   49,   10,   10,
 /*  1460 */    10,  227,   48,   49,   11,   11,   10,  227,   11,  245,
 /*  1470 */   246,   10,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  1480 */   256,  257,  258,  259,  260,  261,  262,  263,   11,  265,
 /*  1490 */   266,  267,  268,  269,  270,  271,   10,  273,   10,  275,
 /*  1500 */   276,  277,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  1510 */    70,   11,   10,   68,  105,   11,  292,   11,  294,   11,
 /*  1520 */   296,  297,  298,    2,   11,   10,    5,   11,   11,   10,
 /*  1530 */    82,   10,    0,    1,   80,   81,   11,   95,   87,   11,
 /*  1540 */    41,  209,    3,   11,    3,   87,  214,  215,   48,   49,
 /*  1550 */   102,  103,   48,   49,   48,   49,   48,   49,    3,  227,
 /*  1560 */     6,   87,   11,   42,   48,   49,  234,  235,  236,  237,
 /*  1570 */   238,    6,  240,  241,  242,  243,  103,  245,   11,  247,
 /*  1580 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  1590 */   258,  259,  260,  261,  262,  263,   11,  265,  266,   48,
 /*  1600 */    49,   11,   10,   82,  170,  171,  172,  173,  174,  175,
 /*  1610 */   176,  177,   80,   81,  170,   48,   49,   11,  174,  175,
 /*  1620 */   176,   11,   47,  102,  103,   11,  116,   11,  116,   11,
 /*  1630 */    56,   63,   66,   48,   49,   62,   10,   10,   48,   49,
 /*  1640 */    11,    7,   11,  209,    8,   10,   26,   10,  214,  215,
 /*  1650 */    11,   10,   12,   11,   48,   49,   11,   11,   48,   49,
 /*  1660 */    10,  227,   48,   49,   48,   49,   48,   49,  234,  235,
 /*  1670 */   236,  237,  238,  229,  240,  241,  242,  243,   11,  245,
 /*  1680 */    11,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  1690 */   256,  257,  258,  259,  260,  261,  262,  263,   11,  265,
 /*  1700 */   266,   11,   11,   11,   10,   29,   11,   10,   34,   11,
 /*  1710 */    11,   10,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  1720 */    32,   11,   10,   34,   11,   10,  103,   11,   10,  124,
 /*  1730 */    11,   11,   10,   10,   10,   48,   49,   11,   48,   49,
 /*  1740 */    48,   49,   10,   90,   11,   11,   10,  126,   11,   11,
 /*  1750 */    11,  209,    8,  309,  102,  330,  214,  215,  109,  330,
 /*  1760 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  1770 */   330,  330,  330,  330,  330,  330,  234,  235,  236,  237,
 /*  1780 */   238,  330,  240,  241,  242,  243,  330,  245,  330,  247,
 /*  1790 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  1800 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  1810 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  1820 */   176,  177,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1830 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1840 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1850 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  1860 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1870 */   330,  227,  330,  330,  330,  330,  330,  330,  234,  235,
 /*  1880 */   236,  237,  238,  330,  240,  241,  242,  243,  330,  245,
 /*  1890 */   330,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  1900 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  1910 */   266,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1920 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  1930 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1940 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1950 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  1960 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  1970 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  1980 */   330,  330,  330,  330,  330,  330,  330,  235,  236,  237,
 /*  1990 */   238,  330,  240,  241,  242,  243,  330,  245,  330,  247,
 /*  2000 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  2010 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  2020 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  2030 */   176,  177,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2040 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2050 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2060 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  2070 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2080 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2090 */   236,  237,  238,  330,  240,  241,  242,  243,  330,  245,
 /*  2100 */   330,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  2110 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  2120 */   266,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2130 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  2140 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2150 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2160 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2170 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  2180 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  2190 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  237,
 /*  2200 */   238,  330,  240,  241,  242,  243,  330,  245,  330,  247,
 /*  2210 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  2220 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  2230 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  2240 */   176,  177,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2250 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2260 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2270 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  2280 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2290 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2300 */   330,  330,  330,  330,  330,  330,  330,  243,  330,  245,
 /*  2310 */   330,  247,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  2320 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  2330 */   266,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2340 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  2350 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2360 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2370 */   330,  330,  308,  330,  330,  330,  330,  330,  330,  330,
 /*  2380 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  2390 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  2400 */   330,  330,  330,  330,  330,  330,  330,  170,  171,  172,
 /*  2410 */   173,  174,  175,  176,  177,  330,  330,  330,  330,  330,
 /*  2420 */   248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  2430 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  2440 */   330,  330,  330,  330,  330,  330,  209,  330,  330,  330,
 /*  2450 */   278,  214,  215,  281,  282,  330,  330,  330,  330,  330,
 /*  2460 */   330,  330,  330,  330,  227,  330,  330,  330,  330,  330,
 /*  2470 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2480 */   243,  330,  245,  330,  247,  248,  249,  250,  251,  252,
 /*  2490 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*  2500 */   263,  330,  265,  266,  330,  330,  330,  330,  330,  330,
 /*  2510 */   330,  330,  330,  170,  171,  172,  173,  174,  175,  176,
 /*  2520 */   177,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2530 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2540 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2550 */   330,  330,  209,  330,  330,  330,  330,  214,  215,  330,
 /*  2560 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2570 */   227,  330,  330,  330,  330,  330,  330,  330,  170,  171,
 /*  2580 */   172,  173,  174,  175,  176,  177,  330,  330,  330,  330,
 /*  2590 */   330,  248,  249,  250,  251,  252,  253,  254,  255,  256,
 /*  2600 */   257,  258,  259,  260,  261,  262,  263,  330,  265,  266,
 /*  2610 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  2620 */   330,  330,  214,  215,  281,  282,  330,  330,  330,  330,
 /*  2630 */   330,  330,  330,  330,  330,  227,  330,  330,  330,  330,
 /*  2640 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2650 */   330,  330,  330,  330,  330,  330,  248,  249,  250,  251,
 /*  2660 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
 /*  2670 */   262,  263,  330,  265,  266,  330,  330,  330,  330,  330,
 /*  2680 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  2690 */   176,  177,  330,  330,  330,  330,  330,  289,  290,  330,
 /*  2700 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2710 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2720 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  2730 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2740 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  170,
 /*  2750 */   171,  172,  173,  174,  175,  176,  177,  330,  330,  245,
 /*  2760 */   330,  330,  248,  249,  250,  251,  252,  253,  254,  255,
 /*  2770 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  2780 */   266,  330,  330,  330,  330,  330,  330,  330,  209,  330,
 /*  2790 */   330,  330,  330,  214,  215,  330,  330,  330,  330,  330,
 /*  2800 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  2810 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2820 */   330,  330,  330,  330,  330,  330,  330,  248,  249,  250,
 /*  2830 */   251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
 /*  2840 */   261,  262,  263,  330,  265,  266,  330,  330,  330,  330,
 /*  2850 */   330,  330,  330,  330,  330,  170,  171,  172,  173,  174,
 /*  2860 */   175,  176,  177,  330,  330,  330,  330,  330,  330,  290,
 /*  2870 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2880 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2890 */   330,  330,  330,  330,  209,  330,  330,  330,  330,  214,
 /*  2900 */   215,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2910 */   330,  330,  227,  330,  330,  330,  330,  330,  330,  330,
 /*  2920 */   170,  171,  172,  173,  174,  175,  176,  177,  330,  330,
 /*  2930 */   330,  330,  330,  248,  249,  250,  251,  252,  253,  254,
 /*  2940 */   255,  256,  257,  258,  259,  260,  261,  262,  263,  330,
 /*  2950 */   265,  266,  330,  330,  330,  330,  330,  330,  330,  209,
 /*  2960 */   330,  330,  330,  330,  214,  215,  330,  330,  330,  330,
 /*  2970 */   330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
 /*  2980 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  2990 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  249,
 /*  3000 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  3010 */   260,  261,  262,  263,  330,  265,  266,  330,  330,  330,
 /*  3020 */   330,  330,  330,  330,  330,  330,  170,  171,  172,  173,
 /*  3030 */   174,  175,  176,  177,  330,  330,  330,  330,  330,  330,
 /*  3040 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3050 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3060 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  3070 */   214,  215,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3080 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  330,
 /*  3090 */   330,  170,  171,  172,  173,  174,  175,  176,  177,  330,
 /*  3100 */   330,  330,  330,  330,  330,  249,  250,  251,  252,  253,
 /*  3110 */   254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
 /*  3120 */   330,  265,  266,  330,  330,  330,  330,  330,  330,  330,
 /*  3130 */   209,  330,  330,  330,  330,  214,  215,  330,  330,  330,
 /*  3140 */   330,  330,  330,  330,  330,  330,  330,  330,  227,  330,
 /*  3150 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3160 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3170 */   249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
 /*  3180 */   259,  260,  261,  262,  263,  330,  265,  266,  330,  330,
 /*  3190 */   330,  330,  330,  330,  330,  330,  330,  170,  171,  172,
 /*  3200 */   173,  174,  175,  176,  177,  330,  330,  330,  330,  330,
 /*  3210 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3220 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3230 */   330,  330,  330,  330,  330,  330,  209,  330,  330,  330,
 /*  3240 */   330,  214,  215,  330,  330,  330,  330,  330,  330,  330,
 /*  3250 */   330,  330,  330,  330,  227,  330,  330,  330,  330,  330,
 /*  3260 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  3270 */   330,  330,  330,  330,  330,  330,  249,  250,  251,  252,
 /*  3280 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*  3290 */   263,  330,  265,  266,  330,  330,  330,  330,  330,  330,
 /*  3300 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  3310 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  3320 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3330 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3340 */   330,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  3350 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  3360 */   330,  330,  330,  330,  330,  330,  330,  330,  170,  171,
 /*  3370 */   172,  173,  174,  175,  176,  177,  330,  330,  330,  330,
 /*  3380 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3390 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3400 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  3410 */   330,  330,  214,  215,  330,  330,  330,  330,  330,  330,
 /*  3420 */   330,  330,  330,  330,  330,  227,  330,  330,  330,  330,
 /*  3430 */   330,  330,  330,  170,  171,  172,  173,  174,  175,  176,
 /*  3440 */   177,  330,  330,  330,  330,  330,  330,  249,  250,  251,
 /*  3450 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
 /*  3460 */   262,  263,  330,  265,  266,  330,  330,  330,  330,  330,
 /*  3470 */   330,  330,  209,  330,  330,  330,  330,  214,  215,  330,
 /*  3480 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3490 */   227,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3500 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3510 */   330,  330,  249,  250,  251,  252,  253,  254,  255,  256,
 /*  3520 */   257,  258,  259,  260,  261,  262,  263,  330,  265,  266,
 /*  3530 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  170,
 /*  3540 */   171,  172,  173,  174,  175,  176,  177,  330,  330,  330,
 /*  3550 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3560 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3570 */   330,  330,  330,  330,  330,  330,  330,  330,  209,  330,
 /*  3580 */   330,  330,  330,  214,  215,  330,  330,  330,  330,  330,
 /*  3590 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  3600 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  3610 */   176,  177,  330,  330,  330,  330,  330,  330,  249,  250,
 /*  3620 */   251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
 /*  3630 */   261,  262,  263,  330,  265,  266,  330,  330,  330,  330,
 /*  3640 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  3650 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3660 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3670 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3680 */   330,  330,  330,  249,  250,  251,  252,  253,  254,  255,
 /*  3690 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  3700 */   266,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3710 */   170,  171,  172,  173,  174,  175,  176,  177,  330,  330,
 /*  3720 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3730 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3740 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  209,
 /*  3750 */   330,  330,  330,  330,  214,  215,  330,  330,  330,  330,
 /*  3760 */   330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
 /*  3770 */   330,  330,  330,  330,  330,  170,  171,  172,  173,  174,
 /*  3780 */   175,  176,  177,  330,  330,  330,  330,  330,  330,  249,
 /*  3790 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  3800 */   260,  261,  262,  263,  330,  265,  266,  330,  330,  330,
 /*  3810 */   330,  330,  330,  330,  209,  330,  330,  330,  330,  214,
 /*  3820 */   215,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3830 */   330,  330,  227,  330,  330,  330,  330,  330,  330,  330,
 /*  3840 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3850 */   330,  330,  330,  330,  249,  250,  251,  252,  253,  254,
 /*  3860 */   255,  256,  257,  258,  259,  260,  261,  262,  263,  330,
 /*  3870 */   265,  266,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3880 */   330,  170,  171,  172,  173,  174,  175,  176,  177,  330,
 /*  3890 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3900 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3910 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  3920 */   209,  330,  330,  330,  330,  214,  215,  330,  330,  330,
 /*  3930 */   330,  330,  330,  330,  330,  330,  330,  330,  227,  330,
 /*  3940 */   330,  330,  330,  330,  330,  330,  170,  171,  172,  173,
 /*  3950 */   174,  175,  176,  177,  330,  330,  330,  330,  330,  330,
 /*  3960 */   249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
 /*  3970 */   259,  260,  261,  262,  263,  330,  265,  266,  330,  330,
 /*  3980 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  3990 */   214,  215,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4000 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  330,
 /*  4010 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4020 */   330,  330,  330,  330,  330,  249,  250,  251,  252,  253,
 /*  4030 */   254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
 /*  4040 */   330,  265,  266,  330,  330,  330,  330,  330,  330,  330,
 /*  4050 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  4060 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4070 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4080 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4090 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  4100 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  4110 */   330,  330,  330,  330,  330,  330,  330,  170,  171,  172,
 /*  4120 */   173,  174,  175,  176,  177,  330,  330,  330,  330,  330,
 /*  4130 */   330,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  4140 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  4150 */   330,  330,  330,  330,  330,  330,  209,  330,  330,  330,
 /*  4160 */   330,  214,  215,  330,  330,  330,  330,  330,  330,  330,
 /*  4170 */   330,  330,  330,  330,  227,  330,  330,  330,  330,  330,
 /*  4180 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4190 */   330,  330,  330,  330,  330,  330,  249,  250,  251,  252,
 /*  4200 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*  4210 */   263,  330,  265,  266,  330,  330,  330,  330,  330,  330,
 /*  4220 */   330,  330,  330,  170,  171,  172,  173,  174,  175,  176,
 /*  4230 */   177,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4240 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4250 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4260 */   330,  330,  209,  330,  330,  330,  330,  214,  215,  330,
 /*  4270 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4280 */   227,  330,  330,  330,  330,  330,  330,  330,  170,  171,
 /*  4290 */   172,  173,  174,  175,  176,  177,  330,  330,  330,  330,
 /*  4300 */   330,  330,  249,  250,  251,  252,  253,  254,  255,  256,
 /*  4310 */   257,  258,  259,  260,  261,  262,  263,  330,  265,  266,
 /*  4320 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  4330 */   330,  330,  214,  215,  330,  330,  330,  330,  330,  330,
 /*  4340 */   330,  330,  330,  330,  330,  227,  330,  330,  330,  330,
 /*  4350 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4360 */   330,  330,  330,  330,  330,  330,  330,  249,  250,  251,
 /*  4370 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
 /*  4380 */   262,  263,  330,  265,  266,  330,  330,  330,  330,  330,
 /*  4390 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  4400 */   176,  177,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4410 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4420 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4430 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  4440 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4450 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  170,
 /*  4460 */   171,  172,  173,  174,  175,  176,  177,  330,  330,  330,
 /*  4470 */   330,  330,  330,  249,  250,  251,  252,  253,  254,  255,
 /*  4480 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  4490 */   266,  330,  330,  330,  330,  330,  330,  330,  209,  330,
 /*  4500 */   330,  330,  330,  214,  215,  330,  330,  330,  330,  330,
 /*  4510 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  4520 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4530 */   330,  330,  330,  330,  330,  330,  330,  330,  249,  250,
 /*  4540 */   251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
 /*  4550 */   261,  262,  263,  330,  265,  266,  330,  330,  330,  330,
 /*  4560 */   330,  330,  330,  330,  330,  170,  171,  172,  173,  174,
 /*  4570 */   175,  176,  177,  330,  330,  330,  330,  330,  330,  330,
 /*  4580 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4590 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4600 */   330,  330,  330,  330,  209,  330,  330,  330,  330,  214,
 /*  4610 */   215,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4620 */   330,  330,  227,  330,  330,  330,  330,  330,  330,  330,
 /*  4630 */   170,  171,  172,  173,  174,  175,  176,  177,  330,  330,
 /*  4640 */   330,  330,  330,  330,  249,  250,  251,  252,  253,  254,
 /*  4650 */   255,  256,  257,  258,  259,  260,  261,  262,  263,  330,
 /*  4660 */   265,  266,  330,  330,  330,  330,  330,  330,  330,  209,
 /*  4670 */   330,  330,  330,  330,  214,  215,  330,  330,  330,  330,
 /*  4680 */   330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
 /*  4690 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4700 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  249,
 /*  4710 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  4720 */   260,  261,  262,  263,  330,  265,  266,  330,  330,  330,
 /*  4730 */   330,  330,  330,  330,  330,  330,  170,  171,  172,  173,
 /*  4740 */   174,  175,  176,  177,  330,  330,  330,  330,  330,  330,
 /*  4750 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4760 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4770 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  4780 */   214,  215,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4790 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  330,
 /*  4800 */   330,  170,  171,  172,  173,  174,  175,  176,  177,  330,
 /*  4810 */   330,  330,  330,  330,  330,  249,  250,  251,  252,  253,
 /*  4820 */   254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
 /*  4830 */   330,  265,  266,  330,  330,  330,  330,  330,  330,  330,
 /*  4840 */   209,  330,  330,  330,  330,  214,  215,  330,  330,  330,
 /*  4850 */   330,  330,  330,  330,  330,  330,  330,  330,  227,  330,
 /*  4860 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4870 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4880 */   249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
 /*  4890 */   259,  260,  261,  262,  263,  330,  265,  266,  330,  330,
 /*  4900 */   330,  330,  330,  330,  330,  330,  330,  170,  171,  172,
 /*  4910 */   173,  174,  175,  176,  177,  330,  330,  330,  330,  330,
 /*  4920 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4930 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  4940 */   330,  330,  330,  330,  330,  330,  209,  330,  330,  330,
 /*  4950 */   330,  214,  215,  330,  330,  330,  330,  330,  330,  330,
 /*  4960 */   330,  330,  330,  330,  227,  330,  330,  330,  330,  330,
 /*  4970 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  4980 */   330,  330,  330,  330,  330,  330,  249,  250,  251,  252,
 /*  4990 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*  5000 */   263,  330,  265,  266,  330,  330,  330,  330,  330,  330,
 /*  5010 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  5020 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  5030 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5040 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5050 */   330,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  5060 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  5070 */   330,  330,  330,  330,  330,  330,  330,  330,  170,  171,
 /*  5080 */   172,  173,  174,  175,  176,  177,  330,  330,  330,  330,
 /*  5090 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5100 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5110 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  5120 */   330,  330,  214,  215,  330,  330,  330,  330,  330,  330,
 /*  5130 */   330,  330,  330,  330,  330,  227,  330,  330,  330,  330,
 /*  5140 */   330,  330,  330,  170,  171,  172,  173,  174,  175,  176,
 /*  5150 */   177,  330,  330,  330,  330,  330,  330,  249,  250,  251,
 /*  5160 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
 /*  5170 */   262,  263,  330,  265,  266,  330,  330,  330,  330,  330,
 /*  5180 */   330,  330,  209,  330,  330,  330,  330,  214,  215,  330,
 /*  5190 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5200 */   227,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5210 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5220 */   330,  330,  249,  250,  251,  252,  253,  254,  255,  256,
 /*  5230 */   257,  258,  259,  260,  261,  262,  263,  330,  265,  266,
 /*  5240 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  170,
 /*  5250 */   171,  172,  173,  174,  175,  176,  177,  330,  330,  330,
 /*  5260 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5270 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5280 */   330,  330,  330,  330,  330,  330,  330,  330,  209,  330,
 /*  5290 */   330,  330,  330,  214,  215,  330,  330,  330,  330,  330,
 /*  5300 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  5310 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  5320 */   176,  177,  330,  330,  330,  330,  330,  330,  249,  250,
 /*  5330 */   251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
 /*  5340 */   261,  262,  263,  330,  265,  266,  330,  330,  330,  330,
 /*  5350 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  5360 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5370 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5380 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5390 */   330,  330,  330,  249,  250,  251,  252,  253,  254,  255,
 /*  5400 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  5410 */   266,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5420 */   170,  171,  172,  173,  174,  175,  176,  177,  330,  330,
 /*  5430 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5440 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5450 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  209,
 /*  5460 */   330,  330,  330,  330,  214,  215,  330,  330,  330,  330,
 /*  5470 */   330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
 /*  5480 */   330,  330,  330,  330,  330,  170,  171,  172,  173,  174,
 /*  5490 */   175,  176,  177,  330,  330,  330,  330,  330,  330,  249,
 /*  5500 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  5510 */   260,  261,  262,  263,  330,  265,  266,  330,  330,  330,
 /*  5520 */   330,  330,  330,  330,  209,  330,  330,  330,  330,  214,
 /*  5530 */   215,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5540 */   330,  330,  227,  330,  330,  330,  330,  330,  330,  330,
 /*  5550 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5560 */   330,  330,  330,  330,  249,  250,  251,  252,  253,  254,
 /*  5570 */   255,  256,  257,  258,  259,  260,  261,  262,  263,  330,
 /*  5580 */   265,  266,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5590 */   330,  170,  171,  172,  173,  174,  175,  176,  177,  330,
 /*  5600 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5610 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5620 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5630 */   209,  330,  330,  330,  330,  214,  215,  330,  330,  330,
 /*  5640 */   330,  330,  330,  330,  330,  330,  330,  330,  227,  330,
 /*  5650 */   330,  330,  330,  330,  330,  330,  170,  171,  172,  173,
 /*  5660 */   174,  175,  176,  177,  330,  330,  330,  330,  330,  330,
 /*  5670 */   249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
 /*  5680 */   259,  260,  261,  262,  263,  330,  265,  266,  330,  330,
 /*  5690 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  5700 */   214,  215,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5710 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  330,
 /*  5720 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5730 */   330,  330,  330,  330,  330,  249,  250,  251,  252,  253,
 /*  5740 */   254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
 /*  5750 */   330,  265,  266,  330,  330,  330,  330,  330,  330,  330,
 /*  5760 */   330,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  5770 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5780 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5790 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5800 */   330,  209,  330,  330,  330,  330,  214,  215,  330,  330,
 /*  5810 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  5820 */   330,  330,  330,  330,  330,  330,  330,  170,  171,  172,
 /*  5830 */   173,  174,  175,  176,  177,  330,  330,  330,  330,  330,
 /*  5840 */   330,  249,  250,  251,  252,  253,  254,  255,  256,  257,
 /*  5850 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  330,
 /*  5860 */   330,  330,  330,  330,  330,  330,  209,  330,  330,  330,
 /*  5870 */   330,  214,  215,  330,  330,  330,  330,  330,  330,  330,
 /*  5880 */   330,  330,  330,  330,  227,  330,  330,  330,  330,  330,
 /*  5890 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5900 */   330,  330,  330,  330,  330,  330,  249,  250,  251,  252,
 /*  5910 */   253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
 /*  5920 */   263,  330,  265,  266,  330,  330,  330,  330,  330,  330,
 /*  5930 */   330,  330,  330,  170,  171,  172,  173,  174,  175,  176,
 /*  5940 */   177,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5950 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5960 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5970 */   330,  330,  209,  330,  330,  330,  330,  214,  215,  330,
 /*  5980 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  5990 */   227,  330,  330,  330,  330,  330,  330,  330,  170,  171,
 /*  6000 */   172,  173,  174,  175,  176,  177,  330,  330,  330,  330,
 /*  6010 */   330,  330,  249,  250,  251,  252,  253,  254,  255,  256,
 /*  6020 */   257,  258,  259,  260,  261,  262,  263,  330,  265,  266,
 /*  6030 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  6040 */   330,  330,  214,  215,  330,  330,  330,  330,  330,  330,
 /*  6050 */   330,  330,  330,  330,  330,  227,  330,  330,  330,  330,
 /*  6060 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6070 */   330,  330,  330,  330,  330,  330,  330,  249,  250,  251,
 /*  6080 */   252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
 /*  6090 */   262,  263,  330,  265,  266,  330,  330,  330,  330,  330,
 /*  6100 */   330,  330,  330,  330,  170,  171,  172,  173,  174,  175,
 /*  6110 */   176,  177,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6120 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6130 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6140 */   330,  330,  330,  209,  330,  330,  330,  330,  214,  215,
 /*  6150 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6160 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  170,
 /*  6170 */   171,  172,  173,  174,  175,  176,  177,  330,  330,  330,
 /*  6180 */   330,  330,  330,  249,  250,  251,  252,  253,  254,  255,
 /*  6190 */   256,  257,  258,  259,  260,  261,  262,  263,  330,  265,
 /*  6200 */   266,  330,  330,  330,  330,  330,  330,  330,  209,  330,
 /*  6210 */   330,  330,  330,  214,  215,  330,  330,  330,  330,  330,
 /*  6220 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  6230 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6240 */   330,  330,  330,  330,  330,  330,  330,  330,  249,  250,
 /*  6250 */   251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
 /*  6260 */   261,  262,  263,  330,  265,  266,  330,  330,  330,  330,
 /*  6270 */   330,  330,  330,  330,  330,  170,  171,  172,  173,  174,
 /*  6280 */   175,  176,  177,  330,  330,  330,  330,  330,  330,  330,
 /*  6290 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6300 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6310 */   330,  330,  330,  330,  209,  330,  330,  330,  330,  214,
 /*  6320 */   215,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6330 */   330,  330,  227,  330,  330,  330,  330,  330,  330,  330,
 /*  6340 */   170,  171,  172,  173,  174,  175,  176,  177,  330,  330,
 /*  6350 */   330,  330,  330,  330,  249,  250,  251,  252,  253,  254,
 /*  6360 */   255,  256,  257,  258,  259,  260,  261,  262,  263,  330,
 /*  6370 */   265,  266,  330,  330,  330,  330,  330,  330,  330,  209,
 /*  6380 */   330,  330,  330,  330,  214,  215,  330,  330,  330,  330,
 /*  6390 */   330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
 /*  6400 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6410 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  249,
 /*  6420 */   250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
 /*  6430 */   260,  261,  262,  263,  330,  265,  266,  330,  330,  330,
 /*  6440 */   330,  330,  330,  167,  330,  330,  170,  330,  172,  173,
 /*  6450 */   174,  175,  176,  177,  330,  330,  330,  330,  330,  330,
 /*  6460 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6470 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6480 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  6490 */   330,  170,  330,  172,  173,  174,  175,  330,  177,  330,
 /*  6500 */   330,  330,  330,  227,  330,  229,  330,  330,  330,  330,
 /*  6510 */   330,  330,  330,  330,  330,  330,  330,  330,  170,  171,
 /*  6520 */   172,  173,  174,  175,  176,  177,  330,  330,  330,  330,
 /*  6530 */   209,  330,  170,  171,  172,  173,  174,  175,  176,  177,
 /*  6540 */   330,  330,  266,  267,  268,  269,  270,  271,  227,  273,
 /*  6550 */   330,  275,  276,  277,  330,  330,  330,  209,  330,  330,
 /*  6560 */   330,  330,  214,  215,  330,  330,  330,  330,  292,  330,
 /*  6570 */   294,  209,  296,  297,  298,  227,  214,  215,  330,  330,
 /*  6580 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  6590 */   170,  171,  172,  173,  174,  175,  176,  177,  250,  330,
 /*  6600 */   324,  253,  254,  255,  256,  257,  258,  259,  260,  261,
 /*  6610 */   262,  263,  330,  265,  266,  253,  254,  255,  256,  257,
 /*  6620 */   258,  259,  260,  261,  262,  263,  330,  265,  266,  209,
 /*  6630 */   330,  330,  330,  330,  214,  215,  330,  330,  330,  330,
 /*  6640 */   330,  330,  330,  330,  330,  330,  330,  227,  330,  330,
 /*  6650 */   330,  330,  330,  167,  330,  330,  170,  330,  172,  173,
 /*  6660 */   174,  175,  330,  177,  170,  330,  172,  173,  174,  175,
 /*  6670 */   330,  177,  330,  253,  254,  255,  256,  257,  258,  259,
 /*  6680 */   260,  261,  262,  263,  330,  265,  266,  330,  330,  330,
 /*  6690 */   330,  167,  330,  330,  170,  209,  172,  173,  174,  175,
 /*  6700 */   330,  177,  330,  209,  167,  330,  330,  170,  330,  172,
 /*  6710 */   173,  174,  175,  227,  177,  330,  330,  330,  330,  330,
 /*  6720 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6730 */   330,  330,  330,  209,  330,  330,  330,  330,  330,  330,
 /*  6740 */   330,  330,  330,  330,  330,  330,  209,  330,  330,  330,
 /*  6750 */   330,  227,  266,  267,  268,  269,  270,  271,  330,  273,
 /*  6760 */   330,  275,  276,  277,  227,  330,  330,  330,  330,  330,
 /*  6770 */   330,  330,  330,  330,  330,  330,  330,  330,  292,  330,
 /*  6780 */   294,  330,  296,  297,  298,  330,  330,  330,  330,  330,
 /*  6790 */   266,  267,  268,  269,  270,  271,  330,  273,  330,  275,
 /*  6800 */   276,  277,  330,  266,  267,  268,  269,  270,  271,  323,
 /*  6810 */   273,  330,  275,  276,  277,  330,  292,  330,  294,  330,
 /*  6820 */   296,  297,  298,  330,  330,  330,  330,  330,  330,  292,
 /*  6830 */   330,  294,  330,  296,  297,  298,  330,  330,  330,  330,
 /*  6840 */   330,  167,  330,  330,  170,  330,  172,  173,  174,  175,
 /*  6850 */   330,  177,  330,  167,  330,  330,  170,  330,  172,  173,
 /*  6860 */   174,  175,  330,  177,  330,  330,  330,  330,  330,  330,
 /*  6870 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6880 */   330,  330,  330,  209,  330,  330,  330,  330,  330,  330,
 /*  6890 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  6900 */   330,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6910 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  330,
 /*  6920 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  6930 */   170,  171,  172,  173,  174,  175,  176,  177,  330,  330,
 /*  6940 */   266,  267,  268,  269,  270,  271,  330,  273,  330,  275,
 /*  6950 */   276,  277,  266,  267,  268,  269,  270,  271,  330,  273,
 /*  6960 */   330,  275,  276,  277,  330,  330,  292,  330,  294,  209,
 /*  6970 */   296,  297,  298,  330,  214,  330,  330,  330,  292,  330,
 /*  6980 */   294,  330,  296,  297,  298,  330,  167,  227,  330,  170,
 /*  6990 */   330,  172,  173,  174,  175,  330,  177,  330,  330,  167,
 /*  7000 */   330,  330,  170,  330,  172,  173,  174,  175,  330,  177,
 /*  7010 */   330,  330,  330,  330,  254,  255,  256,  257,  258,  259,
 /*  7020 */   260,  261,  262,  263,  330,  265,  266,  330,  209,  330,
 /*  7030 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7040 */   330,  209,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  7050 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  227,
 /*  7060 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7070 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7080 */   330,  330,  330,  330,  330,  266,  330,  330,  269,  270,
 /*  7090 */   271,  272,  273,  330,  275,  276,  277,  330,  266,  330,
 /*  7100 */   330,  269,  270,  271,  272,  273,  330,  275,  276,  277,
 /*  7110 */   330,  292,  330,  294,  330,  296,  297,  298,  330,  330,
 /*  7120 */   330,  330,  330,  330,  292,  330,  294,  330,  296,  297,
 /*  7130 */   298,  167,  330,  330,  170,  330,  172,  173,  174,  175,
 /*  7140 */   330,  177,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7150 */   330,  170,  330,  172,  173,  174,  175,  176,  177,  330,
 /*  7160 */   330,  330,  330,  330,  167,  330,  330,  170,  330,  172,
 /*  7170 */   173,  174,  175,  209,  177,  330,  330,  330,  330,  330,
 /*  7180 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7190 */   209,  227,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7200 */   330,  330,  330,  330,  330,  330,  209,  330,  227,  330,
 /*  7210 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7220 */   330,  330,  330,  330,  227,  330,  330,  330,  330,  330,
 /*  7230 */   266,  330,  330,  269,  270,  271,  272,  273,  257,  275,
 /*  7240 */   276,  277,  261,  330,  330,  330,  265,  330,  330,  330,
 /*  7250 */   330,  330,  330,  330,  330,  330,  292,  330,  294,  330,
 /*  7260 */   296,  297,  298,  266,  330,  330,  269,  270,  271,  272,
 /*  7270 */   273,  330,  275,  276,  277,  167,  330,  330,  170,  330,
 /*  7280 */   172,  173,  174,  175,  330,  177,  330,  306,  307,  292,
 /*  7290 */   330,  294,  330,  296,  297,  298,  330,  330,  330,  170,
 /*  7300 */   330,  172,  173,  174,  175,  330,  177,  330,  330,  330,
 /*  7310 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  7320 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7330 */   330,  330,  330,  330,  330,  227,  330,  167,  209,  330,
 /*  7340 */   170,  330,  172,  173,  174,  175,  330,  177,  330,  330,
 /*  7350 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  7360 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7370 */   330,  330,  330,  330,  266,  330,  330,  269,  330,  209,
 /*  7380 */   272,  273,  274,  275,  276,  277,  330,  330,  330,  330,
 /*  7390 */   330,  330,  330,  330,  330,  266,  330,  227,  269,  330,
 /*  7400 */   292,  330,  294,  330,  296,  297,  298,  330,  279,  167,
 /*  7410 */   330,  330,  170,  284,  172,  173,  174,  175,  330,  177,
 /*  7420 */   330,  292,  330,  294,  330,  296,  297,  298,  330,  330,
 /*  7430 */   330,  330,  330,  330,  330,  330,  266,  330,  330,  269,
 /*  7440 */   330,  330,  272,  273,  274,  275,  276,  277,  330,  167,
 /*  7450 */   330,  209,  170,  330,  172,  173,  174,  175,  330,  177,
 /*  7460 */   330,  330,  292,  330,  294,  330,  296,  297,  298,  227,
 /*  7470 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7480 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7490 */   330,  209,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7500 */   330,  330,  330,  330,  330,  330,  330,  330,  266,  227,
 /*  7510 */   330,  269,  270,  271,  330,  273,  330,  275,  276,  277,
 /*  7520 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7530 */   330,  330,  330,  330,  292,  330,  294,  330,  296,  297,
 /*  7540 */   298,  330,  330,  330,  330,  330,  330,  330,  266,  330,
 /*  7550 */   330,  269,  270,  271,  330,  273,  330,  275,  276,  277,
 /*  7560 */   330,  330,  330,  330,  330,  167,  330,  330,  170,  330,
 /*  7570 */   172,  173,  174,  175,  292,  177,  294,  330,  296,  297,
 /*  7580 */   298,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7590 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7600 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  7610 */   167,  330,  330,  170,  330,  172,  173,  174,  175,  330,
 /*  7620 */   177,  330,  330,  167,  330,  227,  170,  330,  172,  173,
 /*  7630 */   174,  175,  330,  177,  330,  330,  330,  330,  330,  330,
 /*  7640 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7650 */   330,  330,  209,  330,  330,  330,  330,  330,  330,  330,
 /*  7660 */   330,  330,  330,  330,  266,  209,  330,  269,  270,  271,
 /*  7670 */   227,  273,  330,  275,  276,  277,  330,  330,  330,  330,
 /*  7680 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  330,
 /*  7690 */   292,  330,  294,  330,  296,  297,  298,  330,  330,  330,
 /*  7700 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  266,
 /*  7710 */   330,  330,  269,  270,  271,  330,  273,  330,  275,  276,
 /*  7720 */   277,  330,  266,  330,  330,  269,  330,  330,  330,  273,
 /*  7730 */   274,  275,  276,  277,  330,  292,  330,  294,  330,  296,
 /*  7740 */   297,  298,  330,  330,  330,  330,  330,  330,  292,  330,
 /*  7750 */   294,  330,  296,  297,  298,  330,  330,  330,  330,  330,
 /*  7760 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7770 */   330,  330,  330,  330,  330,  167,  330,  330,  170,  330,
 /*  7780 */   172,  173,  174,  175,  330,  177,  330,  330,  330,  330,
 /*  7790 */   330,  170,  330,  172,  173,  174,  175,  330,  177,  170,
 /*  7800 */   330,  172,  173,  174,  175,  330,  177,  330,  330,  330,
 /*  7810 */   330,  330,  330,  330,  330,  330,  330,  209,  330,  330,
 /*  7820 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7830 */   209,  330,  330,  330,  330,  227,  330,  330,  209,  170,
 /*  7840 */   330,  172,  173,  174,  175,  330,  177,  330,  227,  330,
 /*  7850 */   330,  330,  330,  330,  330,  330,  227,  330,  330,  330,
 /*  7860 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7870 */   330,  330,  330,  330,  266,  330,  330,  269,  209,  330,
 /*  7880 */   330,  273,  274,  275,  276,  277,  330,  266,  330,  330,
 /*  7890 */   269,  330,  330,  330,  330,  266,  227,  330,  269,  330,
 /*  7900 */   292,  330,  294,  330,  296,  297,  298,  330,  330,  330,
 /*  7910 */   330,  330,  330,  292,  330,  294,  330,  296,  297,  298,
 /*  7920 */   330,  292,  330,  294,  330,  296,  297,  298,  330,  330,
 /*  7930 */   330,  330,  330,  330,  330,  266,  330,  330,  269,  330,
 /*  7940 */   330,  330,  330,  330,  330,  330,  170,  330,  172,  173,
 /*  7950 */   174,  175,  170,  177,  172,  173,  174,  175,  176,  177,
 /*  7960 */   330,  292,  330,  294,  330,  296,  297,  298,  330,  330,
 /*  7970 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  7980 */   330,  330,  330,  330,  330,  209,  330,  330,  330,  330,
 /*  7990 */   330,  209,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  8000 */   330,  330,  330,  227,  330,  330,  330,  330,  330,  227,
 /*  8010 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  8020 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  8030 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  257,
 /*  8040 */   330,  330,  266,  261,  330,  269,  330,  265,  330,  330,
 /*  8050 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*  8060 */   330,  330,  330,  330,  330,  330,  330,  330,  292,  330,
 /*  8070 */   294,  330,  296,  297,  298,  330,  330,  330,  330,  330,
 /*  8080 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  307,
);
  const YY_SHIFT_USE_DFLT = -73;
  const YY_SHIFT_MAX = 435;
static $yy_shift_ofst = array(
 /*     0 */  1173,   -2,   -2,  380,  540,  540,  540,  540,  540,  540,
 /*    10 */   540,  540,  860, 1020, 1069, 1020, 1229, 1229,  700, 1229,
 /*    20 */  1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
 /*    30 */  1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
 /*    40 */  1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
 /*    50 */  1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
 /*    60 */  1229, 1229, 1229, 1229, 1229, 1229, 1448,  384,  384,  384,
 /*    70 */  1521, 1448, 1448, 1448, 1448,  544, 1180, 1338,  212,  212,
 /*    80 */  1344,  212, 1448, 1448, 1448, 1448, 1448, 1448,  813,  213,
 /*    90 */   213,  213,  213,  219, 1173,  219,  164,  219,  219,   49,
 /*   100 */   219,  219,  498,  219,  219,  219,  219,  219,  498,   14,
 /*   110 */    14,   14,   14,   14,   14,   14,  265,  310,  310,  479,
 /*   120 */   502,  654,  -16,  194,   14,   14,   14,   14,   14,    3,
 /*   130 */    -3,  297,  546,  386,  167,   59,  364,  538,  538,  113,
 /*   140 */   720,  914,  316,   30,  456,  776,  891,  578,  908,  936,
 /*   150 */  1016, 1018, 1027, 1066, 1080, 1086,  706, 1135, 1226, 1243,
 /*   160 */  1248, 1381,  820, 1408, 1387, 1414, 1500, 1504, 1506, 1508,
 /*   170 */  1516, 1551, 1396, 1567, 1585, 1590, 1606, 1610, 1614, 1616,
 /*   180 */  1618, 1687, 1690, 1692,   68,  195,  208,  208,  865,  -72,
 /*   190 */   395,  -72,  464,  464,  477,  523,  582,  203,  505,  468,
 /*   200 */   511,  624,  644,  665,  730,  690,  690,  824,  863,  876,
 /*   210 */   950,  978,  978,  978,  978,  978,  978,  978,  978,  978,
 /*   220 */   978,  978,  978, 1051, 1099, 1051, 1099, 1051, 1099, 1051,
 /*   230 */  1081, 1129, 1133, 1133, 1129, 1065, 1092,  733, 1454, 1532,
 /*   240 */    -4,  221,  530,  530,  314,  558,   34,  539,  805,  658,
 /*   250 */   935,  701,  604,  906,  759,  799,  939,  945, 1022, 1030,
 /*   260 */  1037, 1041,  953, 1076, 1105,  594, 1115, 1116,  683,  683,
 /*   270 */  1152, 1153, 1154, 1228, 1169, 1230, 1241, 1171, 1246, 1244,
 /*   280 */  1242, 1247, 1249, 1178, 1182, 1171, 1251, 1261, 1262, 1263,
 /*   290 */  1266, 1270, 1275, 1278, 1279, 1280, 1284, 1290, 1291, 1301,
 /*   300 */  1306, 1308, 1326, 1329, 1331, 1333, 1335, 1337, 1340, 1341,
 /*   310 */  1342, 1345, 1393, 1395, 1411, 1407, 1413, 1417, 1418, 1421,
 /*   320 */  1422, 1424, 1427, 1441, 1449, 1450, 1453, 1456, 1457, 1461,
 /*   330 */  1477, 1486, 1488, 1502, 1250, 1355, 1283, 1355, 1440, 1409,
 /*   340 */  1513, 1445, 1515, 1244, 1517, 1442, 1451, 1519, 1244, 1525,
 /*   350 */  1171, 1171, 1171, 1171, 1171, 1171, 1171, 1528, 1499, 1539,
 /*   360 */  1541, 1555, 1458, 1554, 1445, 1474, 1565, 1445, 1473, 1592,
 /*   370 */  1510, 1512, 1575, 1574, 1568, 1566, 1573, 1626, 1629, 1244,
 /*   380 */  1627, 1634, 1636, 1631, 1635, 1639, 1640, 1637, 1642, 1641,
 /*   390 */  1645, 1646, 1650, 1667, 1669, 1694, 1691, 1695, 1697, 1698,
 /*   400 */  1699, 1701, 1710, 1712, 1713, 1715, 1716, 1718, 1719, 1722,
 /*   410 */  1720, 1620, 1723, 1726, 1676, 1688, 1674, 1732, 1733, 1734,
 /*   420 */  1689, 1724, 1736, 1737, 1738, 1623, 1605, 1653, 1445, 1621,
 /*   430 */  1244, 1739, 1652, 1744, 1649, 1445,
);
  const YY_REDUCE_USE_DFLT = -237;
  const YY_REDUCE_MAX = 236;
static $yy_reduce_ofst = array(
 /*     0 */  -108,   -7,  104, 1224,  543, 1072, 1332, 1434, 1542, 1644,
 /*    10 */  1752, 1854, 1962, 2064, 2172, 2237, 2343, 2408,  236, 2514,
 /*    20 */  2579, 2685, -145,  397,  717, 2750, 2856, 2921, 3027, 3092,
 /*    30 */  3198, 3263, 3369, 3434, 3540, 3605, 3711, 3776, 3882, 3947,
 /*    40 */  4053, 4118, 4224, 4289, 4395, 4460, 4566, 4631, 4737, 4802,
 /*    50 */  4908, 4973, 5079, 5144, 5250, 5315, 5421, 5486, 5592, 5657,
 /*    60 */  5763, 5828, 5934, 5999, 6105, 6170, 6276, 6348, 6362, 6420,
 /*    70 */  6486, 6524, 6537, 6674, 6686, 6760, 6819, 6832, 6964, 6997,
 /*    80 */  7108, 7170, 7242, 7282, 7398, 7443, 7456, 7608, 7129, 7621,
 /*    90 */  7629, 7669, 7776, 6981,  128, 7782, -178,  703,  555, -127,
 /*   100 */   871,  911,  129,  741, 1234, 1240, 6321, 6494,  147,  296,
 /*   110 */   591,  731,  251, 1444,  861,  433,  294,  294,  768,  463,
 /*   120 */  -236,  -23, -163,  229,  261,  229,  709,  491,  747,  -94,
 /*   130 */    98, -155,   76,   40, -138,  352,  -54, -233, -233,   11,
 /*   140 */    11,   11,   43,   11,   11,   11,   11,   11,   11,   11,
 /*   150 */    11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
 /*   160 */    11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
 /*   170 */    11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
 /*   180 */    11,   11,   11,   11,   72, -233,    4,   65,   28,  127,
 /*   190 */    11,  131, -233, -233,  123,  204,  281,  132,  299,  278,
 /*   200 */   351,  455,  484,  501,  691,  556,  571,  679,  696,  714,
 /*   210 */   772,  834,  845,  856,  858,  868,  869,  884,  898,  905,
 /*   220 */   907,  909,  916,  903,  915,  926,  932,  927,  933,  940,
 /*   230 */   941,  925,  979,  980,  931,  873,  870,
);
static $yy_default = array(
 /*     0 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    10 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    20 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    30 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    40 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    50 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    60 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    70 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    80 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*    90 */  1174, 1174, 1174, 1174,  760, 1174, 1174, 1174, 1174, 1174,
 /*   100 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   110 */  1174, 1174, 1174, 1174, 1174, 1174, 1017, 1017, 1174,  998,
 /*   120 */  1043, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,  779,
 /*   130 */   907, 1174, 1035,  886, 1083, 1174, 1174, 1015, 1016, 1174,
 /*   140 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   150 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   160 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   170 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   180 */  1174, 1174, 1174, 1174, 1174, 1033, 1174, 1174, 1098,  966,
 /*   190 */   937,  966, 1033, 1031, 1012, 1174, 1174, 1126,  759, 1003,
 /*   200 */  1049, 1051, 1056, 1007,  868, 1087, 1089,  903,  908,  910,
 /*   210 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   220 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   230 */   842, 1174, 1174, 1174, 1174, 1102, 1111, 1020, 1020, 1020,
 /*   240 */  1020, 1174,  941,  938, 1174,  969, 1174, 1174,  933, 1004,
 /*   250 */  1174, 1084, 1174, 1174, 1174, 1174,  791, 1174,  801,  803,
 /*   260 */   805,  814, 1174, 1174, 1174,  861, 1174,  772, 1114, 1115,
 /*   270 */   771, 1174, 1174, 1174, 1174, 1174, 1174,  974, 1021, 1025,
 /*   280 */  1174, 1022, 1174, 1174,  973, 1174, 1174, 1174, 1174, 1174,
 /*   290 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   300 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   310 */  1174, 1174, 1174, 1174, 1159, 1174, 1174, 1174, 1174, 1174,
 /*   320 */  1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
 /*   330 */  1174, 1174, 1174, 1174, 1174,  919,  925,  920,  949, 1174,
 /*   340 */   971, 1046, 1174, 1048, 1174, 1037, 1063, 1174, 1065, 1174,
 /*   350 */   975,  977,  976,  978,  979,  981,  980, 1174, 1174, 1174,
 /*   360 */  1174, 1174, 1174, 1008, 1057, 1174, 1052, 1050, 1174, 1174,
 /*   370 */  1174, 1174, 1174, 1174, 1174, 1174, 1174,  897, 1174,  900,
 /*   380 */  1174,  783, 1174, 1174,  794, 1174,  792,  796, 1174,  798,
 /*   390 */  1174, 1174,  807, 1174, 1174,  809, 1174, 1174,  811, 1174,
 /*   400 */  1174,  816, 1174,  820, 1174,  823, 1174,  826, 1174,  833,
 /*   410 */  1174, 1174,  839, 1174, 1174, 1174, 1174,  858, 1174, 1174,
 /*   420 */   862,  863, 1174, 1174, 1174, 1174, 1174, 1174, 1112, 1174,
 /*   430 */  1117, 1174, 1174, 1174, 1174, 1127,  756,  757,  761,  762,
 /*   440 */   763,  967,  968,  764,  765,  766,  767,  768,  769,  770,
 /*   450 */   866,  772,  867,  881,  882,  899,  943,  945,  946,  947,
 /*   460 */   948,  949,  950,  951,  952,  953,  954,  955,  956,  771,
 /*   470 */   957,  958,  959,  944,  961,  962,  963,  964,  969,  970,
 /*   480 */   983,  984,  986,  987,  989,  990,  991,  965, 1018,  901,
 /*   490 */   902, 1023, 1024, 1019, 1026, 1027, 1028, 1029,  971, 1030,
 /*   500 */   982,  933,  934,  936,  939,  940,  942, 1069, 1128, 1129,
 /*   510 */  1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
 /*   520 */  1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
 /*   530 */  1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160,
 /*   540 */  1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
 /*   550 */  1171, 1172, 1173, 1060, 1068,  935, 1058, 1059, 1070, 1020,
 /*   560 */  1032, 1034, 1044, 1045,  922,  923,  924,  926,  927, 1071,
 /*   570 */  1072, 1073,  928,  921,  930,  931,  932, 1074, 1075, 1076,
 /*   580 */  1077, 1078, 1079, 1080, 1081, 1082,  929,  988, 1047, 1036,
 /*   590 */  1038, 1039, 1040, 1041, 1042, 1066, 1064,  985, 1061,  960,
 /*   600 */   997,  992, 1005, 1006,  995,  996,  999, 1000, 1001, 1002,
 /*   610 */  1010, 1011, 1013, 1014, 1009, 1054, 1055, 1053,  993,  994,
 /*   620 */  1093, 1094, 1095,  773,  774,  775,  776,  777,  781,  885,
 /*   630 */  1085, 1086, 1088, 1091, 1092, 1090,  889,  890,  891,  892,
 /*   640 */   893,  894,  895,  896,  909,  913,  914,  915,  916,  917,
 /*   650 */   911,  912,  904,  905,  906,  898,  918,  887,  888,  780,
 /*   660 */   869,  870,  871,  872,  873,  874,  875,  876,  877,  878,
 /*   670 */   879,  880,  883,  884,  782,  784,  785,  786,  787,  788,
 /*   680 */   789,  790,  793,  800,  795,  797,  799,  802,  808,  804,
 /*   690 */   810,  806,  812,  813,  815,  817,  818,  819,  821,  822,
 /*   700 */   832,  831,  824,  825,  827,  828,  829,  830,  834,  835,
 /*   710 */   836,  837,  838,  840,  843,  844,  845,  841,  846,  847,
 /*   720 */   851,  852,  853,  854,  855,  857,  859,  860,  848,  856,
 /*   730 */   864,  865, 1096, 1097, 1099, 1100, 1101, 1105, 1104, 1103,
 /*   740 */  1106, 1107, 1108, 1109, 1110, 1113, 1116, 1118, 1120, 1122,
 /*   750 */  1123, 1124, 1121, 1125, 1119,  758,
);

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
static $yyFallback = array(
);

/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
function ParseTrace(/* stream */ $TraceFILE, /* string */ $zTracePrompt){
  $this->yyTraceFILE = $TraceFILE;
  $this->yyTracePrompt = $zTracePrompt;
  if( $this->yyTraceFILE===null ) $this->yyTracePrompt = null;
  else if( $this->yyTracePrompt===null ) $this->yyTraceFILE = null;
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static $yyTokenName = array( 
  '$',             'SEMI',          'NAME',          'INTNUM',      
  'APPROXNUM',     'DEADTOKEN',     'COMMA',         'CHARACTER',   
  'SET',           'CHAR',          'LPAR',          'RPAR',        
  'VARYING',       'VARCHAR',       'NATIONAL',      'NCHAR',       
  'BLOB',          'BIT',           'NUMERIC',       'DECIMAL',     
  'DEC',           'INTEGER',       'SMALLINT',      'FLOAT',       
  'REAL',          'DOUBLE',        'PRECISION',     'DATE',        
  'DATETIME',      'TIME',          'TIMESTAMP',     'WITH',        
  'ZONE',          'INTERVAL',      'TO',            'YEAR',        
  'MONTH',         'DAY',           'HOUR',          'MINUTE',      
  'SECOND',        'PERIOD',        'DEFAULT',       'USER',        
  'CURRENT_USER',  'SESSION_USER',  'SYSTEM_USER',   'NULL',        
  'PLUS_SIGN',     'MINUS_SIGN',    'CURRENT_TIMESTAMP',  'CONSTRAINT',  
  'NOT',           'UNIQUE',        'AUTO_INCREMENT',  'PRIMARY',     
  'KEY',           'REFERENCES',    'MATCH',         'FULL',        
  'PARTIAL',       'ON',            'UPDATE',        'DELETE',      
  'CASCADE',       'NO',            'ACTION',        'CHECK',       
  'OR',            'AND',           'IS',            'ASTERISK',    
  'SOLIDUS',       'STRING',        'COUNT',         'MAX',         
  'MIN',           'DISTINCT',      'ALL',           'UNION',       
  'EXCEPT',        'INTERSECT',     'SELECT',        'AS',          
  'LIMIT',         'OFFSET',        'ORDER',         'BY',          
  'ASC',           'DESC',          'FROM',          'CROSS',       
  'JOIN',          'NATURAL',       'INNER',         'OUTER',       
  'LEFT',          'RIGHT',         'USING',         'WHERE',       
  'GROUP',         'HAVING',        'VALUES',        'TABLE',       
  'CORRESPONDING',  'NULLX',         'TRUE',          'FALSE',       
  'UNKNOWN',       'OP_EQ',         'OP_GTLT',       'OP_LT',       
  'OP_GT',         'OP_LTEQ',       'OP_GTEQ',       'OP_LIKE',     
  'DEFERRABLE',    'INITIALLY',     'DEFERRED',      'IMMEDIATE',   
  'CREATE',        'RESTRICT',      'DROP',          'IF',          
  'EXISTS',        'INSERT',        'INTO',          'ABS',         
  'ACOS',          'ASIN',          'ATAN',          'ATAN2',       
  'CEIL',          'COS',           'COT',           'CRC32',       
  'DEGREES',       'EXP',           'FLOOR',         'FORMAT',      
  'LN',            'LOG',           'LOG2',          'LOG10',       
  'MOD',           'PI',            'POW',           'RADIANS',     
  'ROUND',         'SIGN',          'SIN',           'SQRT',        
  'TAN',           'TRUNCATE',      'DAYOFWEEK',     'DAYOFYEAR',   
  'NOW',           'UTC_DATE',      'UTC_TIME',      'UTC_TIMESTAMP',
  'WEEKDAY',       'WEEKOFYEAR',    'error',         'statement',   
  'query_list',    'query',         'optional_semi',  'query_specification',
  'sql_data_statement',  'sql_schema_statement',  'regular_identifier',  'unsigned_numeric_literal',
  'schema_name',   'unqualified_schema_name',  'identifier',    'actual_identifier',
  'column_name',   'qualified_identifier',  'table_element_list',  'table_element',
  'column_definition',  'table_constraint_definition',  'data_type',     'default_clause',
  'column_constraints',  'column_constraint_definition',  'character_set_specification',  'character_string_type',
  'national_character_string_type',  'binary_large_object_type',  'bit_string_type',  'numeric_type',
  'datetime_type',  'interval_type',  'length',        'exact_numeric_type',
  'approximate_numeric_type',  'precision',     'scale',         'time_precision',
  'with_time_zone',  'time_fractional_seconds_precision',  'interval_qualifier',  'start_field', 
  'end_field',     'single_datetime_field',  'non_second_datetime_field',  'interval_leading_field_precision',
  'interval_fractional_seconds_precision',  'qualified_name',  'default_option',  'literal',     
  'datetime_value_function',  'signed_numeric_literal',  'general_literal',  'sign',        
  'current_timestamp_value_function',  'constraint_name_definition',  'column_constraint',  'constraint_attributes',
  'constraint_name',  'unique_specification',  'references_specification',  'check_constraint_definition',
  'referenced_table_and_columns',  'reference_match_type',  'referential_triggered_action',  'table_name',  
  'reference_column_list',  'column_name_list',  'match_type',    'update_rule', 
  'delete_rule',   'referential_action',  'search_condition',  'boolean_term',
  'boolean_factor',  'boolean_test',  'boolean_primary',  'truth_value', 
  'predicate',     'comparison_predicate',  'null_predicate',  'row_value_constructor',
  'comp_op',       'row_value_constructor_element',  'row_value_constructor_list',  'row_subquery',
  'value_expression',  'numeric_value_expression',  'term',          'math_numeric_value_expression',
  'date_value_expression',  'factor',        'numeric_primary',  'value_expression_primary',
  'unsigned_value_specification',  'column_reference',  'scalar_subquery',  'set_function_specification',
  'unsigned_literal',  'qualifier',     'general_set_function',  'set_function_type',
  'set_quantifier',  'correlation_name',  'subquery',      'query_expression',
  'non_join_query_expression',  'joined_table',  'non_join_query_term',  'query_term',  
  'corresponding_spec',  'non_join_query_primary',  'query_primary',  'simple_table',
  'table_value_constructor',  'explicit_table',  'select_list',   'table_expression',
  'limit_clause',  'select_sublist',  'derived_column',  'as_clause',   
  'from_clause',   'where_clause',  'group_by_clause',  'having_clause',
  'orderby_clause',  'orderby_expression_list',  'orderby_expression',  'ordering',    
  'table_reference',  'correlation_specification',  'derived_table',  'derived_column_list',
  'table_subquery',  'cross_join',    'qualified_join',  'natural_join',
  'join_type',     'join_specification',  'outer_join_type',  'join_condition',
  'named_columns_join',  'join_column_list',  'grouping_column_reference_list',  'grouping_column_reference',
  'table_value_constructor_list',  'corresponding_column_list',  'constraint_check_time',  'sql_schema_definition_statement',
  'sql_schema_manipulation_statement',  'table_definition',  'drop_table_statement',  'drop_behaviour',
  'drop_if_exists',  'tables_list',   'sql_data_change_statement',  'delete_statement_searched',
  'insert_statement',  'update_statement_searched',  'delete_statement_where_search',  'insert_columns_and_source',
  'insert_column_list',  'set_clause_list',  'set_clause',    'object_column',
  'update_source',  'update_statement_where_search',
);

/* For tracing reduce actions, the names of all rules are required.
*/
static $yyRuleName = array(
 /*   0 */ "statement ::= query_list",
 /*   1 */ "query_list ::= query SEMI query_list",
 /*   2 */ "query_list ::= query optional_semi",
 /*   3 */ "optional_semi ::=",
 /*   4 */ "optional_semi ::= SEMI",
 /*   5 */ "query ::= query_specification",
 /*   6 */ "query ::= sql_data_statement",
 /*   7 */ "query ::= sql_schema_statement",
 /*   8 */ "regular_identifier ::= NAME",
 /*   9 */ "unsigned_numeric_literal ::= INTNUM",
 /*  10 */ "unsigned_numeric_literal ::= APPROXNUM",
 /*  11 */ "schema_name ::= unqualified_schema_name",
 /*  12 */ "identifier ::= actual_identifier",
 /*  13 */ "actual_identifier ::= regular_identifier",
 /*  14 */ "unqualified_schema_name ::= DEADTOKEN",
 /*  15 */ "column_name ::= identifier",
 /*  16 */ "qualified_identifier ::= identifier",
 /*  17 */ "table_element_list ::= table_element",
 /*  18 */ "table_element_list ::= table_element_list COMMA table_element",
 /*  19 */ "table_element ::= column_definition",
 /*  20 */ "table_element ::= table_constraint_definition",
 /*  21 */ "table_constraint_definition ::= DEADTOKEN",
 /*  22 */ "column_definition ::= column_name data_type default_clause column_constraints",
 /*  23 */ "column_constraints ::=",
 /*  24 */ "column_constraints ::= column_constraint_definition",
 /*  25 */ "column_constraints ::= column_constraints column_constraint_definition",
 /*  26 */ "character_set_specification ::= DEADTOKEN",
 /*  27 */ "data_type ::= character_string_type",
 /*  28 */ "data_type ::= character_string_type CHARACTER SET character_set_specification",
 /*  29 */ "data_type ::= national_character_string_type",
 /*  30 */ "data_type ::= binary_large_object_type",
 /*  31 */ "data_type ::= bit_string_type",
 /*  32 */ "data_type ::= numeric_type",
 /*  33 */ "data_type ::= datetime_type",
 /*  34 */ "data_type ::= interval_type",
 /*  35 */ "character_string_type ::= CHARACTER",
 /*  36 */ "character_string_type ::= CHAR",
 /*  37 */ "character_string_type ::= CHARACTER LPAR length RPAR",
 /*  38 */ "character_string_type ::= CHARACTER VARYING",
 /*  39 */ "character_string_type ::= CHARACTER VARYING LPAR length RPAR",
 /*  40 */ "character_string_type ::= CHAR VARYING",
 /*  41 */ "character_string_type ::= CHAR VARYING LPAR length RPAR",
 /*  42 */ "character_string_type ::= VARCHAR",
 /*  43 */ "character_string_type ::= VARCHAR LPAR length RPAR",
 /*  44 */ "length ::= INTNUM",
 /*  45 */ "national_character_string_type ::= NATIONAL CHARACTER",
 /*  46 */ "national_character_string_type ::= NATIONAL CHARACTER LPAR length RPAR",
 /*  47 */ "national_character_string_type ::= NATIONAL CHAR",
 /*  48 */ "national_character_string_type ::= NATIONAL CHAR LPAR length RPAR",
 /*  49 */ "national_character_string_type ::= NCHAR",
 /*  50 */ "national_character_string_type ::= NCHAR LPAR length RPAR",
 /*  51 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING",
 /*  52 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING LPAR length RPAR",
 /*  53 */ "national_character_string_type ::= NATIONAL CHAR VARYING",
 /*  54 */ "national_character_string_type ::= NATIONAL CHAR VARYING LPAR length RPAR",
 /*  55 */ "national_character_string_type ::= NCHAR VARYING",
 /*  56 */ "national_character_string_type ::= NCHAR VARYING LPAR length RPAR",
 /*  57 */ "binary_large_object_type ::= BLOB",
 /*  58 */ "bit_string_type ::= BIT",
 /*  59 */ "bit_string_type ::= BIT LPAR length RPAR",
 /*  60 */ "bit_string_type ::= BIT VARYING",
 /*  61 */ "bit_string_type ::= BIT VARYING LPAR length RPAR",
 /*  62 */ "numeric_type ::= exact_numeric_type",
 /*  63 */ "numeric_type ::= approximate_numeric_type",
 /*  64 */ "exact_numeric_type ::= NUMERIC",
 /*  65 */ "exact_numeric_type ::= NUMERIC LPAR precision RPAR",
 /*  66 */ "exact_numeric_type ::= NUMERIC LPAR precision COMMA scale RPAR",
 /*  67 */ "exact_numeric_type ::= DECIMAL",
 /*  68 */ "exact_numeric_type ::= DECIMAL LPAR precision RPAR",
 /*  69 */ "exact_numeric_type ::= DECIMAL LPAR precision COMMA scale RPAR",
 /*  70 */ "exact_numeric_type ::= DEC",
 /*  71 */ "exact_numeric_type ::= DEC LPAR precision RPAR",
 /*  72 */ "exact_numeric_type ::= DEC LPAR precision COMMA scale RPAR",
 /*  73 */ "exact_numeric_type ::= INTEGER",
 /*  74 */ "exact_numeric_type ::= SMALLINT",
 /*  75 */ "precision ::= INTNUM",
 /*  76 */ "scale ::= INTNUM",
 /*  77 */ "approximate_numeric_type ::= FLOAT",
 /*  78 */ "approximate_numeric_type ::= FLOAT LPAR precision RPAR",
 /*  79 */ "approximate_numeric_type ::= REAL",
 /*  80 */ "approximate_numeric_type ::= DOUBLE PRECISION",
 /*  81 */ "datetime_type ::= DATE",
 /*  82 */ "datetime_type ::= DATETIME",
 /*  83 */ "datetime_type ::= TIME",
 /*  84 */ "datetime_type ::= TIME LPAR time_precision RPAR with_time_zone",
 /*  85 */ "datetime_type ::= TIMESTAMP",
 /*  86 */ "with_time_zone ::=",
 /*  87 */ "with_time_zone ::= WITH TIME ZONE",
 /*  88 */ "time_precision ::= time_fractional_seconds_precision",
 /*  89 */ "time_fractional_seconds_precision ::= INTNUM",
 /*  90 */ "interval_type ::= INTERVAL interval_qualifier",
 /*  91 */ "interval_qualifier ::= start_field TO end_field",
 /*  92 */ "interval_qualifier ::= single_datetime_field",
 /*  93 */ "start_field ::= non_second_datetime_field",
 /*  94 */ "start_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /*  95 */ "non_second_datetime_field ::= YEAR",
 /*  96 */ "non_second_datetime_field ::= MONTH",
 /*  97 */ "non_second_datetime_field ::= DAY",
 /*  98 */ "non_second_datetime_field ::= HOUR",
 /*  99 */ "non_second_datetime_field ::= MINUTE",
 /* 100 */ "interval_leading_field_precision ::= INTNUM",
 /* 101 */ "end_field ::= non_second_datetime_field",
 /* 102 */ "end_field ::= SECOND",
 /* 103 */ "end_field ::= SECOND LPAR interval_fractional_seconds_precision RPAR",
 /* 104 */ "interval_fractional_seconds_precision ::= INTNUM",
 /* 105 */ "single_datetime_field ::= non_second_datetime_field",
 /* 106 */ "single_datetime_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /* 107 */ "single_datetime_field ::= SECOND",
 /* 108 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision RPAR",
 /* 109 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision COMMA LPAR interval_fractional_seconds_precision RPAR RPAR",
 /* 110 */ "qualified_name ::= qualified_identifier",
 /* 111 */ "qualified_name ::= schema_name PERIOD qualified_identifier",
 /* 112 */ "default_clause ::=",
 /* 113 */ "default_clause ::= DEFAULT default_option",
 /* 114 */ "default_option ::= literal",
 /* 115 */ "default_option ::= datetime_value_function",
 /* 116 */ "default_option ::= USER",
 /* 117 */ "default_option ::= CURRENT_USER",
 /* 118 */ "default_option ::= SESSION_USER",
 /* 119 */ "default_option ::= SYSTEM_USER",
 /* 120 */ "default_option ::= NULL",
 /* 121 */ "literal ::= signed_numeric_literal",
 /* 122 */ "literal ::= general_literal",
 /* 123 */ "signed_numeric_literal ::= unsigned_numeric_literal",
 /* 124 */ "signed_numeric_literal ::= sign unsigned_numeric_literal",
 /* 125 */ "sign ::= PLUS_SIGN",
 /* 126 */ "sign ::= MINUS_SIGN",
 /* 127 */ "datetime_value_function ::= current_timestamp_value_function",
 /* 128 */ "current_timestamp_value_function ::= CURRENT_TIMESTAMP",
 /* 129 */ "column_constraint_definition ::= constraint_name_definition column_constraint constraint_attributes",
 /* 130 */ "constraint_name_definition ::=",
 /* 131 */ "constraint_name_definition ::= CONSTRAINT constraint_name",
 /* 132 */ "constraint_name ::= qualified_name",
 /* 133 */ "column_constraint ::= NOT NULL",
 /* 134 */ "column_constraint ::= unique_specification",
 /* 135 */ "column_constraint ::= references_specification",
 /* 136 */ "column_constraint ::= check_constraint_definition",
 /* 137 */ "unique_specification ::= UNIQUE",
 /* 138 */ "unique_specification ::= AUTO_INCREMENT",
 /* 139 */ "unique_specification ::= PRIMARY KEY",
 /* 140 */ "references_specification ::= REFERENCES referenced_table_and_columns reference_match_type referential_triggered_action",
 /* 141 */ "referenced_table_and_columns ::= table_name",
 /* 142 */ "referenced_table_and_columns ::= table_name LPAR reference_column_list RPAR",
 /* 143 */ "table_name ::= qualified_name",
 /* 144 */ "reference_column_list ::= column_name_list",
 /* 145 */ "column_name_list ::= column_name",
 /* 146 */ "column_name_list ::= column_name_list COMMA column_name",
 /* 147 */ "reference_match_type ::=",
 /* 148 */ "reference_match_type ::= MATCH match_type",
 /* 149 */ "match_type ::= FULL",
 /* 150 */ "match_type ::= PARTIAL",
 /* 151 */ "referential_triggered_action ::=",
 /* 152 */ "referential_triggered_action ::= update_rule",
 /* 153 */ "referential_triggered_action ::= update_rule delete_rule",
 /* 154 */ "referential_triggered_action ::= delete_rule",
 /* 155 */ "referential_triggered_action ::= delete_rule update_rule",
 /* 156 */ "update_rule ::= ON UPDATE referential_action",
 /* 157 */ "delete_rule ::= ON DELETE referential_action",
 /* 158 */ "referential_action ::= CASCADE",
 /* 159 */ "referential_action ::= SET NULL",
 /* 160 */ "referential_action ::= SET DEFAULT",
 /* 161 */ "referential_action ::= NO ACTION",
 /* 162 */ "check_constraint_definition ::= CHECK LPAR search_condition RPAR",
 /* 163 */ "search_condition ::= boolean_term",
 /* 164 */ "search_condition ::= search_condition OR boolean_term",
 /* 165 */ "boolean_term ::= boolean_factor",
 /* 166 */ "boolean_term ::= boolean_term AND boolean_factor",
 /* 167 */ "boolean_factor ::= boolean_test",
 /* 168 */ "boolean_factor ::= NOT boolean_test",
 /* 169 */ "boolean_test ::= boolean_primary",
 /* 170 */ "boolean_test ::= boolean_primary IS truth_value",
 /* 171 */ "boolean_test ::= boolean_primary IS NOT truth_value",
 /* 172 */ "boolean_primary ::= predicate",
 /* 173 */ "boolean_primary ::= LPAR search_condition RPAR",
 /* 174 */ "predicate ::= comparison_predicate",
 /* 175 */ "predicate ::= null_predicate",
 /* 176 */ "comparison_predicate ::= row_value_constructor comp_op row_value_constructor",
 /* 177 */ "row_value_constructor ::= row_value_constructor_element",
 /* 178 */ "row_value_constructor ::= LPAR row_value_constructor_list RPAR",
 /* 179 */ "row_value_constructor ::= row_subquery",
 /* 180 */ "row_value_constructor_element ::= value_expression",
 /* 181 */ "value_expression ::= numeric_value_expression",
 /* 182 */ "numeric_value_expression ::= term",
 /* 183 */ "numeric_value_expression ::= math_numeric_value_expression",
 /* 184 */ "numeric_value_expression ::= date_value_expression",
 /* 185 */ "numeric_value_expression ::= numeric_value_expression sign term",
 /* 186 */ "term ::= factor",
 /* 187 */ "term ::= term ASTERISK factor",
 /* 188 */ "term ::= term SOLIDUS factor",
 /* 189 */ "factor ::= numeric_primary",
 /* 190 */ "factor ::= sign numeric_primary",
 /* 191 */ "numeric_primary ::= value_expression_primary",
 /* 192 */ "value_expression_primary ::= unsigned_value_specification",
 /* 193 */ "value_expression_primary ::= column_reference",
 /* 194 */ "value_expression_primary ::= scalar_subquery",
 /* 195 */ "value_expression_primary ::= set_function_specification",
 /* 196 */ "unsigned_value_specification ::= unsigned_literal",
 /* 197 */ "unsigned_literal ::= unsigned_numeric_literal",
 /* 198 */ "unsigned_literal ::= general_literal",
 /* 199 */ "general_literal ::= STRING",
 /* 200 */ "column_reference ::= column_name",
 /* 201 */ "column_reference ::= qualifier PERIOD column_name",
 /* 202 */ "set_function_specification ::= COUNT LPAR ASTERISK RPAR",
 /* 203 */ "set_function_specification ::= general_set_function",
 /* 204 */ "general_set_function ::= set_function_type LPAR set_quantifier value_expression RPAR",
 /* 205 */ "set_function_type ::= MAX",
 /* 206 */ "set_function_type ::= MIN",
 /* 207 */ "qualifier ::= table_name",
 /* 208 */ "qualifier ::= correlation_name",
 /* 209 */ "correlation_name ::= identifier",
 /* 210 */ "set_quantifier ::=",
 /* 211 */ "set_quantifier ::= DISTINCT",
 /* 212 */ "set_quantifier ::= ALL",
 /* 213 */ "scalar_subquery ::= subquery",
 /* 214 */ "subquery ::= LPAR query_expression RPAR",
 /* 215 */ "query_expression ::= non_join_query_expression",
 /* 216 */ "query_expression ::= joined_table",
 /* 217 */ "non_join_query_expression ::= non_join_query_term",
 /* 218 */ "non_join_query_expression ::= query_expression UNION query_term",
 /* 219 */ "non_join_query_expression ::= query_expression UNION ALL query_term",
 /* 220 */ "non_join_query_expression ::= query_expression UNION corresponding_spec query_term",
 /* 221 */ "non_join_query_expression ::= query_expression UNION ALL corresponding_spec query_term",
 /* 222 */ "non_join_query_expression ::= query_expression EXCEPT query_term",
 /* 223 */ "non_join_query_expression ::= query_expression EXCEPT ALL query_term",
 /* 224 */ "non_join_query_expression ::= query_expression EXCEPT corresponding_spec query_term",
 /* 225 */ "non_join_query_expression ::= query_expression EXCEPT ALL corresponding_spec query_term",
 /* 226 */ "non_join_query_term ::= non_join_query_primary",
 /* 227 */ "non_join_query_term ::= query_term INTERSECT query_primary",
 /* 228 */ "non_join_query_term ::= query_term INTERSECT ALL query_primary",
 /* 229 */ "non_join_query_term ::= query_term INTERSECT corresponding_spec query_primary",
 /* 230 */ "non_join_query_term ::= query_term INTERSECT ALL corresponding_spec query_primary",
 /* 231 */ "non_join_query_primary ::= simple_table",
 /* 232 */ "non_join_query_primary ::= LPAR non_join_query_expression RPAR",
 /* 233 */ "simple_table ::= query_specification",
 /* 234 */ "simple_table ::= table_value_constructor",
 /* 235 */ "simple_table ::= explicit_table",
 /* 236 */ "query_specification ::= SELECT set_quantifier select_list table_expression limit_clause",
 /* 237 */ "select_list ::= ASTERISK",
 /* 238 */ "select_list ::= select_sublist",
 /* 239 */ "select_list ::= select_list COMMA select_sublist",
 /* 240 */ "select_sublist ::= derived_column",
 /* 241 */ "select_sublist ::= qualifier PERIOD ASTERISK",
 /* 242 */ "derived_column ::= value_expression",
 /* 243 */ "derived_column ::= value_expression as_clause",
 /* 244 */ "as_clause ::= column_name",
 /* 245 */ "as_clause ::= AS column_name",
 /* 246 */ "table_expression ::= from_clause where_clause group_by_clause having_clause orderby_clause",
 /* 247 */ "limit_clause ::=",
 /* 248 */ "limit_clause ::= LIMIT INTNUM",
 /* 249 */ "limit_clause ::= LIMIT INTNUM OFFSET INTNUM",
 /* 250 */ "limit_clause ::= LIMIT INTNUM COMMA INTNUM",
 /* 251 */ "orderby_clause ::=",
 /* 252 */ "orderby_clause ::= ORDER BY orderby_expression_list",
 /* 253 */ "orderby_expression_list ::= orderby_expression",
 /* 254 */ "orderby_expression_list ::= orderby_expression_list COMMA orderby_expression",
 /* 255 */ "orderby_expression ::= value_expression ordering",
 /* 256 */ "ordering ::=",
 /* 257 */ "ordering ::= ASC",
 /* 258 */ "ordering ::= DESC",
 /* 259 */ "from_clause ::= FROM table_reference",
 /* 260 */ "from_clause ::= table_reference COMMA table_reference",
 /* 261 */ "table_reference ::= table_name",
 /* 262 */ "table_reference ::= table_name correlation_specification",
 /* 263 */ "table_reference ::= derived_table correlation_specification",
 /* 264 */ "table_reference ::= joined_table",
 /* 265 */ "correlation_specification ::= correlation_name",
 /* 266 */ "correlation_specification ::= AS correlation_name",
 /* 267 */ "correlation_specification ::= correlation_name LPAR derived_column_list RPAR",
 /* 268 */ "correlation_specification ::= AS correlation_name LPAR derived_column_list RPAR",
 /* 269 */ "derived_column_list ::= column_name_list",
 /* 270 */ "derived_table ::= table_subquery",
 /* 271 */ "table_subquery ::= subquery",
 /* 272 */ "joined_table ::= cross_join",
 /* 273 */ "joined_table ::= qualified_join",
 /* 274 */ "joined_table ::= LPAR joined_table RPAR",
 /* 275 */ "cross_join ::= table_reference CROSS JOIN table_reference",
 /* 276 */ "qualified_join ::= table_reference natural_join join_type JOIN table_reference join_specification",
 /* 277 */ "natural_join ::=",
 /* 278 */ "natural_join ::= NATURAL",
 /* 279 */ "join_type ::=",
 /* 280 */ "join_type ::= INNER",
 /* 281 */ "join_type ::= outer_join_type",
 /* 282 */ "join_type ::= outer_join_type OUTER",
 /* 283 */ "join_type ::= UNION",
 /* 284 */ "outer_join_type ::= LEFT",
 /* 285 */ "outer_join_type ::= RIGHT",
 /* 286 */ "outer_join_type ::= FULL",
 /* 287 */ "join_specification ::=",
 /* 288 */ "join_specification ::= join_condition",
 /* 289 */ "join_specification ::= named_columns_join",
 /* 290 */ "join_condition ::= ON search_condition",
 /* 291 */ "named_columns_join ::= USING LPAR join_column_list RPAR",
 /* 292 */ "join_column_list ::= column_name_list",
 /* 293 */ "where_clause ::=",
 /* 294 */ "where_clause ::= WHERE search_condition",
 /* 295 */ "group_by_clause ::=",
 /* 296 */ "group_by_clause ::= GROUP BY grouping_column_reference_list",
 /* 297 */ "grouping_column_reference_list ::= grouping_column_reference",
 /* 298 */ "grouping_column_reference_list ::= grouping_column_reference_list COMMA grouping_column_reference",
 /* 299 */ "grouping_column_reference ::= column_reference",
 /* 300 */ "having_clause ::=",
 /* 301 */ "having_clause ::= HAVING search_condition",
 /* 302 */ "table_value_constructor ::= VALUES table_value_constructor_list",
 /* 303 */ "table_value_constructor_list ::= row_value_constructor",
 /* 304 */ "explicit_table ::= TABLE table_name",
 /* 305 */ "query_term ::= non_join_query_term",
 /* 306 */ "query_term ::= joined_table",
 /* 307 */ "corresponding_spec ::= CORRESPONDING",
 /* 308 */ "corresponding_spec ::= CORRESPONDING BY LPAR corresponding_column_list RPAR",
 /* 309 */ "corresponding_column_list ::= column_name_list",
 /* 310 */ "query_primary ::= non_join_query_primary",
 /* 311 */ "query_primary ::= joined_table",
 /* 312 */ "row_value_constructor_list ::= row_value_constructor_element",
 /* 313 */ "row_value_constructor_list ::= row_value_constructor_list COMMA row_value_constructor_element",
 /* 314 */ "row_subquery ::= NULLX",
 /* 315 */ "truth_value ::= TRUE",
 /* 316 */ "truth_value ::= FALSE",
 /* 317 */ "truth_value ::= UNKNOWN",
 /* 318 */ "comp_op ::= OP_EQ",
 /* 319 */ "comp_op ::= OP_GTLT",
 /* 320 */ "comp_op ::= OP_LT",
 /* 321 */ "comp_op ::= OP_GT",
 /* 322 */ "comp_op ::= OP_LTEQ",
 /* 323 */ "comp_op ::= OP_GTEQ",
 /* 324 */ "comp_op ::= OP_LIKE",
 /* 325 */ "null_predicate ::= column_reference IS NULLX",
 /* 326 */ "null_predicate ::= column_reference IS NOT NULLX",
 /* 327 */ "constraint_attributes ::=",
 /* 328 */ "constraint_attributes ::= constraint_check_time",
 /* 329 */ "constraint_attributes ::= constraint_check_time DEFERRABLE",
 /* 330 */ "constraint_attributes ::= constraint_check_time NOT DEFERRABLE",
 /* 331 */ "constraint_attributes ::= DEFERRABLE",
 /* 332 */ "constraint_attributes ::= DEFERRABLE constraint_check_time",
 /* 333 */ "constraint_attributes ::= NOT DEFERRABLE",
 /* 334 */ "constraint_attributes ::= NOT DEFERRABLE constraint_check_time",
 /* 335 */ "constraint_check_time ::= INITIALLY DEFERRED",
 /* 336 */ "constraint_check_time ::= INITIALLY IMMEDIATE",
 /* 337 */ "sql_schema_statement ::= sql_schema_definition_statement",
 /* 338 */ "sql_schema_statement ::= sql_schema_manipulation_statement",
 /* 339 */ "sql_schema_definition_statement ::= table_definition",
 /* 340 */ "table_definition ::= CREATE TABLE table_name LPAR table_element_list RPAR",
 /* 341 */ "sql_schema_manipulation_statement ::= drop_table_statement",
 /* 342 */ "drop_behaviour ::=",
 /* 343 */ "drop_behaviour ::= CASCADE",
 /* 344 */ "drop_behaviour ::= RESTRICT",
 /* 345 */ "drop_table_statement ::= DROP TABLE drop_if_exists tables_list drop_behaviour",
 /* 346 */ "drop_if_exists ::=",
 /* 347 */ "drop_if_exists ::= IF EXISTS",
 /* 348 */ "tables_list ::= table_name",
 /* 349 */ "tables_list ::= tables_list COMMA table_name",
 /* 350 */ "sql_data_statement ::= sql_data_change_statement",
 /* 351 */ "sql_data_change_statement ::= delete_statement_searched",
 /* 352 */ "sql_data_change_statement ::= insert_statement",
 /* 353 */ "sql_data_change_statement ::= update_statement_searched",
 /* 354 */ "delete_statement_searched ::= DELETE FROM table_name delete_statement_where_search",
 /* 355 */ "delete_statement_where_search ::=",
 /* 356 */ "delete_statement_where_search ::= WHERE search_condition",
 /* 357 */ "insert_statement ::= INSERT INTO table_name insert_columns_and_source",
 /* 358 */ "insert_columns_and_source ::= LPAR insert_column_list RPAR query_expression",
 /* 359 */ "insert_columns_and_source ::= query_expression",
 /* 360 */ "insert_columns_and_source ::= DEFAULT VALUES",
 /* 361 */ "insert_column_list ::= column_name_list",
 /* 362 */ "set_clause_list ::= set_clause_list COMMA set_clause",
 /* 363 */ "set_clause_list ::= set_clause",
 /* 364 */ "set_clause ::= object_column OP_EQ update_source",
 /* 365 */ "object_column ::= column_name",
 /* 366 */ "update_source ::= value_expression",
 /* 367 */ "update_source ::= NULL",
 /* 368 */ "update_source ::= DEFAULT",
 /* 369 */ "update_statement_searched ::= UPDATE table_name SET set_clause_list update_statement_where_search",
 /* 370 */ "update_statement_where_search ::=",
 /* 371 */ "update_statement_where_search ::= WHERE search_condition",
 /* 372 */ "math_numeric_value_expression ::= ABS LPAR numeric_value_expression RPAR",
 /* 373 */ "math_numeric_value_expression ::= ACOS LPAR numeric_value_expression RPAR",
 /* 374 */ "math_numeric_value_expression ::= ASIN LPAR numeric_value_expression RPAR",
 /* 375 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression RPAR",
 /* 376 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 377 */ "math_numeric_value_expression ::= ATAN2 LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 378 */ "math_numeric_value_expression ::= CEIL LPAR numeric_value_expression RPAR",
 /* 379 */ "math_numeric_value_expression ::= COS LPAR numeric_value_expression RPAR",
 /* 380 */ "math_numeric_value_expression ::= COT LPAR numeric_value_expression RPAR",
 /* 381 */ "math_numeric_value_expression ::= CRC32 LPAR numeric_value_expression RPAR",
 /* 382 */ "math_numeric_value_expression ::= DEGREES LPAR numeric_value_expression RPAR",
 /* 383 */ "math_numeric_value_expression ::= EXP LPAR numeric_value_expression RPAR",
 /* 384 */ "math_numeric_value_expression ::= FLOOR LPAR numeric_value_expression RPAR",
 /* 385 */ "math_numeric_value_expression ::= FORMAT LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 386 */ "math_numeric_value_expression ::= LN LPAR numeric_value_expression RPAR",
 /* 387 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression RPAR",
 /* 388 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 389 */ "math_numeric_value_expression ::= LOG2 LPAR numeric_value_expression RPAR",
 /* 390 */ "math_numeric_value_expression ::= LOG10 LPAR numeric_value_expression RPAR",
 /* 391 */ "math_numeric_value_expression ::= MOD LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 392 */ "math_numeric_value_expression ::= PI LPAR RPAR",
 /* 393 */ "math_numeric_value_expression ::= POW LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 394 */ "math_numeric_value_expression ::= RADIANS LPAR numeric_value_expression RPAR",
 /* 395 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression RPAR",
 /* 396 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 397 */ "math_numeric_value_expression ::= SIGN LPAR numeric_value_expression RPAR",
 /* 398 */ "math_numeric_value_expression ::= SIN LPAR numeric_value_expression RPAR",
 /* 399 */ "math_numeric_value_expression ::= SQRT LPAR numeric_value_expression RPAR",
 /* 400 */ "math_numeric_value_expression ::= TAN LPAR numeric_value_expression RPAR",
 /* 401 */ "math_numeric_value_expression ::= TRUNCATE LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 402 */ "date_value_expression ::= CURRENT_TIMESTAMP LPAR RPAR",
 /* 403 */ "date_value_expression ::= CURRENT_TIMESTAMP",
 /* 404 */ "date_value_expression ::= DAY LPAR numeric_value_expression RPAR",
 /* 405 */ "date_value_expression ::= DAYOFWEEK LPAR numeric_value_expression RPAR",
 /* 406 */ "date_value_expression ::= DAYOFYEAR LPAR numeric_value_expression RPAR",
 /* 407 */ "date_value_expression ::= HOUR LPAR numeric_value_expression RPAR",
 /* 408 */ "date_value_expression ::= MINUTE LPAR numeric_value_expression RPAR",
 /* 409 */ "date_value_expression ::= MONTH LPAR numeric_value_expression RPAR",
 /* 410 */ "date_value_expression ::= NOW LPAR RPAR",
 /* 411 */ "date_value_expression ::= SECOND LPAR numeric_value_expression RPAR",
 /* 412 */ "date_value_expression ::= UTC_DATE LPAR RPAR",
 /* 413 */ "date_value_expression ::= UTC_TIME LPAR RPAR",
 /* 414 */ "date_value_expression ::= UTC_TIMESTAMP LPAR RPAR",
 /* 415 */ "date_value_expression ::= WEEKDAY LPAR numeric_value_expression RPAR",
 /* 416 */ "date_value_expression ::= WEEKOFYEAR LPAR numeric_value_expression RPAR",
 /* 417 */ "date_value_expression ::= YEAR LPAR numeric_value_expression RPAR",
);

/*
** This function returns the symbolic name associated with a token
** value.
*/
function ParseTokenName(/* int */ $tokenType){
  if (isset(self::$yyTokenName[$tokenType]))
    return self::$yyTokenName[$tokenType];
  return "Unknown";
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
private function yy_destructor($yymajor, $yypminor){
  switch( $yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
private function yy_pop_parser_stack() {
  if ($this->yyidx < 0) return 0;
  $yytos = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE ) {
    fprintf($this->yyTraceFILE,"%sPopping %s\n",
      $this->yyTracePrompt,
      self::$yyTokenName[$yytos->major]);
  }
  $this->yy_destructor( $yytos->major, $yytos->minor);
  unset($this->yystack[$this->yyidx]);
  $this->yyidx--;
  return $yytos->major;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
function __destruct()
{
  while($this->yyidx >= 0)
    $this->yy_pop_parser_stack();
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_shift_action(
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
  $stateno = $this->yystack[$this->yyidx]->stateno;
 
  if( $stateno>self::YY_SHIFT_MAX || 
      ($i = self::$yy_shift_ofst[$stateno])==self::YY_SHIFT_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    if( $iLookAhead>0 ){
      if (isset(self::$yyFallback[$iLookAhead]) &&
        ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n",
             $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], 
             self::$yyTokenName[$iFallback]);
        }
        return $this->yy_find_shift_action($iFallback);
      }
      {
        $j = $i - $iLookAhead + self::YYWILDCARD;
        if( $j>=0 && $j<count(self::$yy_action) && self::$yy_lookahead[$j]==self::YYWILDCARD ){
          if( $this->yyTraceFILE ){
            fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n",
               $this->yyTracePrompt, self::$yyTokenName[$iLookAhead],
               self::$yyTokenName[self::YYWILDCARD]);
          }
          return self::$yy_action[$j];
        }
      }
    }
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_reduce_action(
  $stateno,              /* Current state number */
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
 
  if( $stateno>self::YY_REDUCE_MAX ||
      ($i = self::$yy_reduce_ofst[$stateno])==self::YY_REDUCE_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Perform a shift action.
*/
private function yy_shift(
  $yyNewState,               /* The new state to shift in */
  $yyMajor,                  /* The major token to shift in */
  $yypMinor         /* Pointer ot the minor token to shift in */
){
  $this->yyidx++;
  if (isset($this->yystack[$this->yyidx])) {
    $yytos = $this->yystack[$this->yyidx];
  } else {
    $yytos = new ParseyyStackEntry;
    $this->yystack[$this->yyidx] = $yytos;
  }
  $yytos->stateno = $yyNewState;
  $yytos->major = $yyMajor;
  $yytos->minor = $yypMinor;
  if( $this->yyTraceFILE) {
    fprintf($this->yyTraceFILE,"%sShift %d\n",$this->yyTracePrompt,$yyNewState);
    fprintf($this->yyTraceFILE,"%sStack:",$this->yyTracePrompt);
    for ($i = 1; $i <= $this->yyidx; $i++) {
      $ent = $this->yystack[$i];
      fprintf($this->yyTraceFILE," %s",self::$yyTokenName[$ent->major]);
    }
    fprintf($this->yyTraceFILE,"\n");
  }
}

private function __overflow_dead_code() {
  /* if the stack can overflow (it can't in the PHP implementation)
   * Then the following code would be emitted */
}

/* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule 
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
static $yyRuleInfo = array(
  163, 1,
  164, 3,
  164, 2,
  166, 0,
  166, 1,
  165, 1,
  165, 1,
  165, 1,
  170, 1,
  171, 1,
  171, 1,
  172, 1,
  174, 1,
  175, 1,
  173, 1,
  176, 1,
  177, 1,
  178, 1,
  178, 3,
  179, 1,
  179, 1,
  181, 1,
  180, 4,
  184, 0,
  184, 1,
  184, 2,
  186, 1,
  182, 1,
  182, 4,
  182, 1,
  182, 1,
  182, 1,
  182, 1,
  182, 1,
  182, 1,
  187, 1,
  187, 1,
  187, 4,
  187, 2,
  187, 5,
  187, 2,
  187, 5,
  187, 1,
  187, 4,
  194, 1,
  188, 2,
  188, 5,
  188, 2,
  188, 5,
  188, 1,
  188, 4,
  188, 3,
  188, 6,
  188, 3,
  188, 6,
  188, 2,
  188, 5,
  189, 1,
  190, 1,
  190, 4,
  190, 2,
  190, 5,
  191, 1,
  191, 1,
  195, 1,
  195, 4,
  195, 6,
  195, 1,
  195, 4,
  195, 6,
  195, 1,
  195, 4,
  195, 6,
  195, 1,
  195, 1,
  197, 1,
  198, 1,
  196, 1,
  196, 4,
  196, 1,
  196, 2,
  192, 1,
  192, 1,
  192, 1,
  192, 5,
  192, 1,
  200, 0,
  200, 3,
  199, 1,
  201, 1,
  193, 2,
  202, 3,
  202, 1,
  203, 1,
  203, 4,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  207, 1,
  204, 1,
  204, 1,
  204, 4,
  208, 1,
  205, 1,
  205, 4,
  205, 1,
  205, 4,
  205, 8,
  209, 1,
  209, 3,
  183, 0,
  183, 2,
  210, 1,
  210, 1,
  210, 1,
  210, 1,
  210, 1,
  210, 1,
  210, 1,
  211, 1,
  211, 1,
  213, 1,
  213, 2,
  215, 1,
  215, 1,
  212, 1,
  216, 1,
  185, 3,
  217, 0,
  217, 2,
  220, 1,
  218, 2,
  218, 1,
  218, 1,
  218, 1,
  221, 1,
  221, 1,
  221, 2,
  222, 4,
  224, 1,
  224, 4,
  227, 1,
  228, 1,
  229, 1,
  229, 3,
  225, 0,
  225, 2,
  230, 1,
  230, 1,
  226, 0,
  226, 1,
  226, 2,
  226, 1,
  226, 2,
  231, 3,
  232, 3,
  233, 1,
  233, 2,
  233, 2,
  233, 2,
  223, 4,
  234, 1,
  234, 3,
  235, 1,
  235, 3,
  236, 1,
  236, 2,
  237, 1,
  237, 3,
  237, 4,
  238, 1,
  238, 3,
  240, 1,
  240, 1,
  241, 3,
  243, 1,
  243, 3,
  243, 1,
  245, 1,
  248, 1,
  249, 1,
  249, 1,
  249, 1,
  249, 3,
  250, 1,
  250, 3,
  250, 3,
  253, 1,
  253, 2,
  254, 1,
  255, 1,
  255, 1,
  255, 1,
  255, 1,
  256, 1,
  260, 1,
  260, 1,
  214, 1,
  257, 1,
  257, 3,
  259, 4,
  259, 1,
  262, 5,
  263, 1,
  263, 1,
  261, 1,
  261, 1,
  265, 1,
  264, 0,
  264, 1,
  264, 1,
  258, 1,
  266, 3,
  267, 1,
  267, 1,
  268, 1,
  268, 3,
  268, 4,
  268, 4,
  268, 5,
  268, 3,
  268, 4,
  268, 4,
  268, 5,
  270, 1,
  270, 3,
  270, 4,
  270, 4,
  270, 5,
  273, 1,
  273, 3,
  275, 1,
  275, 1,
  275, 1,
  167, 5,
  278, 1,
  278, 1,
  278, 3,
  281, 1,
  281, 3,
  282, 1,
  282, 2,
  283, 1,
  283, 2,
  279, 5,
  280, 0,
  280, 2,
  280, 4,
  280, 4,
  288, 0,
  288, 3,
  289, 1,
  289, 3,
  290, 2,
  291, 0,
  291, 1,
  291, 1,
  284, 2,
  284, 3,
  292, 1,
  292, 2,
  292, 2,
  292, 1,
  293, 1,
  293, 2,
  293, 4,
  293, 5,
  295, 1,
  294, 1,
  296, 1,
  269, 1,
  269, 1,
  269, 3,
  297, 4,
  298, 6,
  299, 0,
  299, 1,
  300, 0,
  300, 1,
  300, 1,
  300, 2,
  300, 1,
  302, 1,
  302, 1,
  302, 1,
  301, 0,
  301, 1,
  301, 1,
  303, 2,
  304, 4,
  305, 1,
  285, 0,
  285, 2,
  286, 0,
  286, 3,
  306, 1,
  306, 3,
  307, 1,
  287, 0,
  287, 2,
  276, 2,
  308, 1,
  277, 2,
  271, 1,
  271, 1,
  272, 1,
  272, 5,
  309, 1,
  274, 1,
  274, 1,
  246, 1,
  246, 3,
  247, 1,
  239, 1,
  239, 1,
  239, 1,
  244, 1,
  244, 1,
  244, 1,
  244, 1,
  244, 1,
  244, 1,
  244, 1,
  242, 3,
  242, 4,
  219, 0,
  219, 1,
  219, 2,
  219, 3,
  219, 1,
  219, 2,
  219, 2,
  219, 3,
  310, 2,
  310, 2,
  169, 1,
  169, 1,
  311, 1,
  313, 6,
  312, 1,
  315, 0,
  315, 1,
  315, 1,
  314, 5,
  316, 0,
  316, 2,
  317, 1,
  317, 3,
  168, 1,
  318, 1,
  318, 1,
  318, 1,
  319, 4,
  322, 0,
  322, 2,
  320, 4,
  323, 4,
  323, 1,
  323, 2,
  324, 1,
  325, 3,
  325, 1,
  326, 3,
  327, 1,
  328, 1,
  328, 1,
  328, 1,
  321, 5,
  329, 0,
  329, 2,
  251, 4,
  251, 4,
  251, 4,
  251, 4,
  251, 6,
  251, 6,
  251, 4,
  251, 4,
  251, 4,
  251, 4,
  251, 4,
  251, 4,
  251, 4,
  251, 6,
  251, 4,
  251, 4,
  251, 6,
  251, 4,
  251, 4,
  251, 6,
  251, 3,
  251, 6,
  251, 4,
  251, 4,
  251, 6,
  251, 4,
  251, 4,
  251, 4,
  251, 4,
  251, 6,
  252, 3,
  252, 1,
  252, 4,
  252, 4,
  252, 4,
  252, 4,
  252, 4,
  252, 4,
  252, 3,
  252, 4,
  252, 3,
  252, 3,
  252, 3,
  252, 4,
  252, 4,
  252, 4,
);

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
private function yy_reduce(
  $yyruleno                 /* Number of the rule by which to reduce */
){
  $yygoto = 0;                     /* The next state */
  $yyact = 0;                      /* The next action */
  $yygotominor = null;        /* The LHS of the rule reduced */
  $yymsp = null;            /* The top of the parser's stack */
  $yysize = 0;                     /* Amount to pop the stack */
  
  $yymsp = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
    fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt,
      self::$yyRuleName[$yyruleno]);
  }

  switch( $yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 15:
      case 16:
      case 19:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 44:
      case 62:
      case 63:
      case 110:
      case 113:
      case 115:
      case 127:
      case 134:
      case 143:
      case 163:
      case 165:
      case 167:
      case 169:
      case 172:
      case 174:
      case 175:
      case 177:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 186:
      case 189:
      case 191:
      case 192:
      case 193:
      case 196:
      case 197:
      case 198:
      case 203:
      case 207:
      case 209:
      case 215:
      case 217:
      case 226:
      case 231:
      case 234:
      case 240:
      case 242:
      case 264:
      case 265:
      case 266:
      case 273:
      case 281:
      case 290:
      case 299:
      case 302:
      case 303:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 337:
      case 338:
      case 341:
      case 350:
      case 351:
      case 352:
      case 353:
      case 356:
      case 361:
      case 366:
      case 371:
#line 6 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;}
#line 3198 "sql.php"
        break;
      case 1:
#line 8 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -2]->minor;if(!(is_array($this->yystack[$this->yyidx + -2]->minor->actions))) echo "b is not an array!!\n";if(!(is_array($this->yystack[$this->yyidx + 0]->minor->actions))) echo "c is not an array!!\n";$yygotominor->actions=array_merge($this->yystack[$this->yyidx + -2]->minor->actions, $this->yystack[$this->yyidx + 0]->minor->actions);}
#line 3203 "sql.php"
        break;
      case 2:
      case 129:
      case 178:
      case 282:
#line 9 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 3211 "sql.php"
        break;
      case 5:
#line 14 "sql.y"
{
		$this->yystack[$this->yyidx + 0]->minor->actions[] = new qpAction_returnRelation($this->yystack[$this->yyidx + 0]->minor->last_relation_id);		
		$yygotominor=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3219 "sql.php"
        break;
      case 6:
#line 18 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;}
#line 3224 "sql.php"
        break;
      case 9:
#line 26 "sql.y"
{$yygotominor = new filter_StaticIntnum($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3229 "sql.php"
        break;
      case 17:
      case 312:
      case 363:
#line 47 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;
	}
#line 3239 "sql.php"
        break;
      case 18:
#line 51 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3247 "sql.php"
        break;
      case 22:
#line 61 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->name = $this->yystack[$this->yyidx + -3]->minor->value;
		if(isset($this->yystack[$this->yyidx + -1]->minor)){
			$this->yystack[$this->yyidx + -2]->minor->default = $this->yystack[$this->yyidx + -1]->minor;
		}
		if(isset($this->yystack[$this->yyidx + 0]->minor)){
			foreach($this->yystack[$this->yyidx + 0]->minor as $constraint){
				if(strtoupper($constraint)=="AUTO_INCREMENT")
					$this->yystack[$this->yyidx + -2]->minor->autoinc=1;
					$this->yystack[$this->yyidx + -2]->minor->is_unique=1;
			}
		}
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3265 "sql.php"
        break;
      case 24:
      case 348:
#line 77 "sql.y"
{$yygotominor = Array(); $yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;}
#line 3271 "sql.php"
        break;
      case 25:
#line 78 "sql.y"
{$this->yystack[$this->yyidx + -1]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 3276 "sql.php"
        break;
      case 37:
#line 102 "sql.y"
{$yygotominor = new PHPFDB_char(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 3281 "sql.php"
        break;
      case 42:
#line 107 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, 666);}
#line 3286 "sql.php"
        break;
      case 43:
#line 108 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 3291 "sql.php"
        break;
      case 57:
#line 125 "sql.y"
{$yygotominor = new PHPFDB_blob(NULL);}
#line 3296 "sql.php"
        break;
      case 73:
#line 144 "sql.y"
{$yygotominor = new PHPFDB_int();}
#line 3301 "sql.php"
        break;
      case 77:
#line 151 "sql.y"
{$yygotominor = new PHPFDB_float();}
#line 3306 "sql.php"
        break;
      case 81:
#line 156 "sql.y"
{$yygotominor = new PHPFDB_date();}
#line 3311 "sql.php"
        break;
      case 82:
#line 157 "sql.y"
{$yygotominor = new PHPFDB_datetime();}
#line 3316 "sql.php"
        break;
      case 83:
#line 158 "sql.y"
{$yygotominor = new PHPFDB_time();}
#line 3321 "sql.php"
        break;
      case 85:
#line 160 "sql.y"
{$yygotominor = new PHPFDB_timestamp();}
#line 3326 "sql.php"
        break;
      case 125:
#line 225 "sql.y"
{$yygotominor="plus_sign";}
#line 3331 "sql.php"
        break;
      case 126:
#line 226 "sql.y"
{$yygotominor="minus_sign";}
#line 3336 "sql.php"
        break;
      case 128:
      case 284:
      case 285:
      case 286:
#line 240 "sql.y"
{$yygotominor=strtoupper($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3344 "sql.php"
        break;
      case 138:
      case 244:
      case 245:
#line 259 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3351 "sql.php"
        break;
      case 145:
#line 271 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor->value;
	}
#line 3359 "sql.php"
        break;
      case 146:
#line 275 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor->value;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3367 "sql.php"
        break;
      case 164:
#line 309 "sql.y"
{
		$yygotominor= new filter_OR($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3374 "sql.php"
        break;
      case 166:
#line 314 "sql.y"
{
		$yygotominor= new filter_AND($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3381 "sql.php"
        break;
      case 176:
#line 331 "sql.y"
{
		$yygotominor= new filter_COMP($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3388 "sql.php"
        break;
      case 185:
#line 351 "sql.y"
{ ECHO "TODOTODOTODOTODO";}
#line 3393 "sql.php"
        break;
      case 190:
#line 358 "sql.y"
{$yygotominor= new filter_UnaryMathFunction($this->yystack[$this->yyidx + -1]->minor); $yygotominor->expression=$this->yystack[$this->yyidx + 0]->minor;}
#line 3398 "sql.php"
        break;
      case 195:
#line 366 "sql.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor;}
#line 3403 "sql.php"
        break;
      case 199:
#line 381 "sql.y"
{
	$yygotominor = new filter_StaticString(substr($this->yystack[$this->yyidx + 0]->minor->value, 1, strlen($this->yystack[$this->yyidx + 0]->minor->value)-2));
}
#line 3410 "sql.php"
        break;
      case 200:
      case 365:
#line 413 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3416 "sql.php"
        break;
      case 201:
#line 414 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value, $this->yystack[$this->yyidx + -2]->minor->value);}
#line 3421 "sql.php"
        break;
      case 202:
#line 416 "sql.y"
{$yygotominor = new filter_SetFunction("count_asterisk"); $yygotominor->expression = new filter_EmptyExpression();}
#line 3426 "sql.php"
        break;
      case 204:
#line 419 "sql.y"
{$this->yystack[$this->yyidx + -4]->minor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor=$this->yystack[$this->yyidx + -4]->minor;}
#line 3431 "sql.php"
        break;
      case 205:
#line 421 "sql.y"
{$yygotominor = new filter_SetFunction("max");}
#line 3436 "sql.php"
        break;
      case 206:
#line 422 "sql.y"
{$yygotominor = new filter_SetFunction("min");}
#line 3441 "sql.php"
        break;
      case 210:
      case 370:
#line 429 "sql.y"
{$yygotominor=NULL;}
#line 3447 "sql.php"
        break;
      case 211:
#line 430 "sql.y"
{$yygotominor="DISTINCT";}
#line 3452 "sql.php"
        break;
      case 212:
#line 431 "sql.y"
{$yygotominor="ALL";}
#line 3457 "sql.php"
        break;
      case 236:
#line 468 "sql.y"
{
		$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		
		if(isset($this->yystack[$this->yyidx + -1]->minor->filter)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_filterResults($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->filter);
		}
		$total_group = false;
		$expression_columns = Array();	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection))
			foreach($this->yystack[$this->yyidx + -2]->minor->columns_projection as $p){
				if($p->is_set_function) {
					$total_group=true;
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				} elseif($p->is_math_function) {
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				}
			}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $this->yystack[$this->yyidx + -1]->minor->grouping_columns);
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
		} elseif(!(empty($expression_columns))) {
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $expression_columns);
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->grouping_columns, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
			$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		} else {
			if($total_group){
				$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, array(), $this->yystack[$this->yyidx + -2]->minor->columns_projection);
				$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
			}
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->ordering)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_orderRelation($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->ordering);
		}			
		if($this->yystack[$this->yyidx + -3]->minor=="DISTINCT")
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_distinctValues($this->yystack[$this->yyidx + -1]->minor->last_relation_id);
		elseif($this->yystack[$this->yyidx + -3]->minor=="ALL"){
		}	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$indexes = Array();
			for($i=0;$i<count($this->yystack[$this->yyidx + -2]->minor->columns_projection);$i++)
				$indexes[] = $i;
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_selectColumnsByIndexes($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $indexes);
		}		
		if(isset($this->yystack[$this->yyidx + 0]->minor))
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_limitRows($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + 0]->minor->rows, $this->yystack[$this->yyidx + 0]->minor->offset);
		$yygotominor=$this->yystack[$this->yyidx + -1]->minor;
	}
#line 3514 "sql.php"
        break;
      case 237:
#line 522 "sql.y"
{$yygotominor = new stdClass();$yygotominor->columns_projection = NULL;$yygotominor->set_functions=NULL;}
#line 3519 "sql.php"
        break;
      case 238:
#line 523 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->columns_projection = Array();
		$yygotominor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;

	}
#line 3529 "sql.php"
        break;
      case 239:
#line 529 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 3537 "sql.php"
        break;
      case 243:
#line 538 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor; $yygotominor->alias=$this->yystack[$this->yyidx + 0]->minor;}
#line 3542 "sql.php"
        break;
      case 246:
#line 543 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = $this->yystack[$this->yyidx + -4]->minor->actions;
		if(isset($this->yystack[$this->yyidx + -2]->minor)&&isset($this->yystack[$this->yyidx + -2]->minor->grouping_columns))
			$yygotominor->grouping_columns = $this->yystack[$this->yyidx + -2]->minor->grouping_columns;
		if(isset($this->yystack[$this->yyidx + -3]->minor)&&isset($this->yystack[$this->yyidx + -3]->minor->filter))
			$yygotominor->filter = $this->yystack[$this->yyidx + -3]->minor->filter;
		if(isset($this->yystack[$this->yyidx + 0]->minor)&&isset($this->yystack[$this->yyidx + 0]->minor->ordering))
			$yygotominor->ordering = $this->yystack[$this->yyidx + 0]->minor->ordering;
	}
#line 3556 "sql.php"
        break;
      case 248:
#line 555 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=0;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3561 "sql.php"
        break;
      case 249:
#line 556 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + -2]->minor->value;}
#line 3566 "sql.php"
        break;
      case 250:
#line 557 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + -2]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 3571 "sql.php"
        break;
      case 252:
#line 560 "sql.y"
{$yygotominor = new stdClass();$yygotominor->ordering=$this->yystack[$this->yyidx + 0]->minor;}
#line 3576 "sql.php"
        break;
      case 253:
#line 561 "sql.y"
{$yygotominor=Array();$yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3581 "sql.php"
        break;
      case 254:
      case 298:
#line 562 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;$yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3587 "sql.php"
        break;
      case 255:
#line 563 "sql.y"
{$yygotominor = new stdClass();$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor->order=$this->yystack[$this->yyidx + 0]->minor;}
#line 3592 "sql.php"
        break;
      case 256:
      case 257:
#line 564 "sql.y"
{$yygotominor='asc';}
#line 3598 "sql.php"
        break;
      case 258:
#line 566 "sql.y"
{$yygotominor='desc';}
#line 3603 "sql.php"
        break;
      case 259:
#line 569 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;
	}
#line 3611 "sql.php"
        break;
      case 261:
#line 575 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3616 "sql.php"
        break;
      case 262:
#line 576 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value);}
#line 3621 "sql.php"
        break;
      case 276:
#line 598 "sql.y"
{
	$yygotominor = new stdClass();
	$b_last_relation = $this->yystack[$this->yyidx + -5]->minor->actions[count($this->yystack[$this->yyidx + -5]->minor->actions)-1];
	$e_last_relation = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1];
	$yygotominor->actions = array_merge($this->yystack[$this->yyidx + -5]->minor->actions, $this->yystack[$this->yyidx + -1]->minor->actions);
	if($this->yystack[$this->yyidx + -3]->minor=="LEFT")
		$yygotominor->actions[] = new qpAction_joinRelationsLeft($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
	elseif($this->yystack[$this->yyidx + -3]->minor=="INNER")
		$yygotominor->actions[] = new qpAction_joinRelations($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
}
#line 3635 "sql.php"
        break;
      case 279:
      case 280:
#line 612 "sql.y"
{$yygotominor="INNER";}
#line 3641 "sql.php"
        break;
      case 288:
#line 623 "sql.y"
{$yygotominor = new stdClass();$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;}
#line 3646 "sql.php"
        break;
      case 294:
#line 633 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;
}
#line 3654 "sql.php"
        break;
      case 295:
#line 638 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = NULL;}
#line 3659 "sql.php"
        break;
      case 296:
#line 639 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = $this->yystack[$this->yyidx + 0]->minor;}
#line 3664 "sql.php"
        break;
      case 297:
#line 641 "sql.y"
{$yygotominor = Array(); $yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3669 "sql.php"
        break;
      case 313:
      case 362:
#line 687 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor = $this->yystack[$this->yyidx + -2]->minor;
	}
#line 3678 "sql.php"
        break;
      case 324:
#line 707 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;$yygotominor->value=strtoupper($yygotominor->value);}
#line 3683 "sql.php"
        break;
      case 325:
#line 709 "sql.y"
{
		$yygotominor = new filter_IsNullColumn($this->yystack[$this->yyidx + -2]->minor);
	}
#line 3690 "sql.php"
        break;
      case 326:
#line 712 "sql.y"
{
		$yygotominor = new filter_IsNotNullColumn($this->yystack[$this->yyidx + -3]->minor);
	}
#line 3697 "sql.php"
        break;
      case 339:
#line 758 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[]=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3705 "sql.php"
        break;
      case 340:
#line 806 "sql.y"
{
		$yygotominor = new qpAction_createTable($this->yystack[$this->yyidx + -3]->minor->value, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3712 "sql.php"
        break;
      case 345:
#line 975 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		foreach($this->yystack[$this->yyidx + -1]->minor as $c){
			$yygotominor->actions[] = new qpAction_dropTable($c->value);
		}
	}
#line 3723 "sql.php"
        break;
      case 349:
#line 987 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3728 "sql.php"
        break;
      case 354:
#line 1075 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		if(is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_bulkDelete($this->yystack[$this->yyidx + -1]->minor->value);
		} else {
			$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value);
			$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
			$yygotominor->actions[] = new qpAction_addressedDelete($last_relation_id);
		}
	}
#line 3744 "sql.php"
        break;
      case 355:
#line 1088 "sql.y"
{
		$yygotominor = NULL;
	}
#line 3751 "sql.php"
        break;
      case 357:
#line 1095 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[] = new qpAction_insertRow($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3759 "sql.php"
        break;
      case 358:
#line 1100 "sql.y"
{
		$yygotominor = Array();
		foreach($this->yystack[$this->yyidx + -2]->minor as $key => $column_name){
			$yygotominor[$column_name] = $this->yystack[$this->yyidx + 0]->minor[$key];
		}
	}
#line 3769 "sql.php"
        break;
      case 359:
#line 1106 "sql.y"
{print_r($this->yystack[$this->yyidx + 0]->minor);}
#line 3774 "sql.php"
        break;
      case 364:
#line 1127 "sql.y"
{$yygotominor = new stdClass();$yygotominor->column=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->new_value=$this->yystack[$this->yyidx + 0]->minor;}
#line 3779 "sql.php"
        break;
      case 369:
#line 1135 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -3]->minor->value);
		$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;

		if(!is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
		}
		$yygotominor->actions[]=new qpAction_updateValues($last_relation_id, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3794 "sql.php"
        break;
      case 372:
#line 1197 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("abs");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3799 "sql.php"
        break;
      case 373:
#line 1198 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("acos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3804 "sql.php"
        break;
      case 374:
#line 1199 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("asin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3809 "sql.php"
        break;
      case 375:
#line 1200 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("atan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3814 "sql.php"
        break;
      case 376:
      case 377:
#line 1201 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("atan2");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3820 "sql.php"
        break;
      case 378:
#line 1203 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ceil");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3825 "sql.php"
        break;
      case 379:
#line 1204 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3830 "sql.php"
        break;
      case 380:
#line 1205 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cot");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3835 "sql.php"
        break;
      case 381:
#line 1206 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("crc32");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3840 "sql.php"
        break;
      case 382:
#line 1207 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("degrees");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3845 "sql.php"
        break;
      case 383:
#line 1208 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("exp");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3850 "sql.php"
        break;
      case 384:
#line 1209 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("floor");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3855 "sql.php"
        break;
      case 385:
#line 1210 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("format");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3860 "sql.php"
        break;
      case 386:
      case 387:
#line 1211 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ln");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3866 "sql.php"
        break;
      case 388:
#line 1213 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3871 "sql.php"
        break;
      case 389:
#line 1214 "sql.y"
{$val2 = new filter_StaticIntnum(2);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val2;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3876 "sql.php"
        break;
      case 390:
#line 1215 "sql.y"
{$val10 = new filter_StaticIntnum(10);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val10;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3881 "sql.php"
        break;
      case 391:
#line 1216 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("mod");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3886 "sql.php"
        break;
      case 392:
#line 1217 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("pi");$yygotominor->expression=new filter_EmptyExpression();}
#line 3891 "sql.php"
        break;
      case 393:
#line 1218 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("pow");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3896 "sql.php"
        break;
      case 394:
#line 1219 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("radians");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3901 "sql.php"
        break;
      case 395:
#line 1220 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("round");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3906 "sql.php"
        break;
      case 396:
#line 1221 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("round");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3911 "sql.php"
        break;
      case 397:
#line 1222 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sign");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3916 "sql.php"
        break;
      case 398:
#line 1223 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3921 "sql.php"
        break;
      case 399:
#line 1224 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sqrt");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3926 "sql.php"
        break;
      case 400:
#line 1225 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("tan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3931 "sql.php"
        break;
      case 401:
#line 1226 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("truncate");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3936 "sql.php"
        break;
      case 402:
      case 403:
      case 410:
#line 1233 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("now");$yygotominor->expression=new filter_EmptyExpression();}
#line 3943 "sql.php"
        break;
      case 404:
#line 1235 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("day");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3948 "sql.php"
        break;
      case 405:
#line 1236 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("dayofweek");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3953 "sql.php"
        break;
      case 406:
#line 1237 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("dayofyear");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3958 "sql.php"
        break;
      case 407:
#line 1238 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("hour");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3963 "sql.php"
        break;
      case 408:
#line 1239 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("minute");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3968 "sql.php"
        break;
      case 409:
#line 1240 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("month");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3973 "sql.php"
        break;
      case 411:
#line 1242 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("second");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3978 "sql.php"
        break;
      case 412:
#line 1243 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("utc_date");$yygotominor->expression=new filter_EmptyExpression();}
#line 3983 "sql.php"
        break;
      case 413:
#line 1244 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("utc_time");$yygotominor->expression=new filter_EmptyExpression();}
#line 3988 "sql.php"
        break;
      case 414:
#line 1245 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("utc_timestamp");$yygotominor->expression=new filter_EmptyExpression();}
#line 3993 "sql.php"
        break;
      case 415:
#line 1246 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("weekday");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3998 "sql.php"
        break;
      case 416:
#line 1247 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("weekofyear");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 4003 "sql.php"
        break;
      case 417:
#line 1248 "sql.y"
{$yygotominor = new filter_UnaryDateFunction("year");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 4008 "sql.php"
        break;
  };
  $yygoto = self::$yyRuleInfo[2*$yyruleno];
  $yysize = self::$yyRuleInfo[(2*$yyruleno)+1];

  $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;
  
  $this->yyidx -= $yysize;
  $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);
  if( $yyact < self::YYNSTATE ){
    $this->yy_shift($yyact, $yygoto, $yygotominor);
  }else if( $yyact == self::YYNSTATE + self::YYNRULE + 1 ){
    $this->yy_accept();
  }
}

/*
** The following code executes when the parse fails
*/
private function yy_parse_failed(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sFail!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
}

/*
** The following code executes when a syntax error first occurs.
*/
private function yy_syntax_error(
  $yymajor,                   /* The major type of the error token */
  $yyminor            /* The minor type of the error token */
){
}

/*
** The following is executed when the parser accepts
*/
private function yy_accept(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sAccept!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 2 "sql.y"

      //echo "PARSING COMPLETE!!";
   
#line 4063 "sql.php"
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
function Parse(
  $yymajor,                 /* The major token code number */
  $yyminor = null           /* The value for the token */
){
  $yyact = 0;            /* The parser action. */
  $yyendofinput = 0;     /* True if we are at the end of input */
  $yyerrorhit = 0;   /* True if yymajor has invoked an error */

  /* (re)initialize the parser, if necessary */
  if( $this->yyidx<0 ){
    $this->yyidx = 0;
    $this->yyerrcnt = -1;
    $ent = new ParseyyStackEntry;
    $ent->stateno = 0;
    $ent->major = 0;
    $this->yystack = array( 0 => $ent );

    $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    $this->YY_ACCEPT_ACTION  = self::YYNSTATE + self::YYNRULE + 1;
    $this->YY_ERROR_ACTION   = self::YYNSTATE + self::YYNRULE;
  }
  $yyendofinput = ($yymajor==0);

  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sInput %s\n",$this->yyTracePrompt,
      self::$yyTokenName[$yymajor]);
  }

  do{
    $yyact = $this->yy_find_shift_action($yymajor);
    if( $yyact<self::YYNSTATE ){
      $this->yy_shift($yyact,$yymajor,$yyminor);
      $this->yyerrcnt--;
      if( $yyendofinput && $this->yyidx>=0 ){
        $yymajor = 0;
      }else{
        $yymajor = self::YYNOCODE;
      }
    }else if( $yyact < self::YYNSTATE + self::YYNRULE ){
      $this->yy_reduce($yyact-self::YYNSTATE);
    }else if( $yyact == $this->YY_ERROR_ACTION ){
      if( $this->yyTraceFILE ){
        fprintf($this->yyTraceFILE,"%sSyntax Error!\n",$this->yyTracePrompt);
      }
if (self::YYERRORSYMBOL) {
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( $this->yyerrcnt<0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $yymx = $this->yystack[$this->yyidx]->major;
      if( $yymx==self::YYERRORSYMBOL || $yyerrorhit ){
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE,"%sDiscard input token %s\n",
             $this->yyTracePrompt,self::$yyTokenName[$yymajor]);
        }
        $this->yy_destructor($yymajor,$yyminor);
        $yymajor = self::YYNOCODE;
      }else{
         while(
          $this->yyidx >= 0 &&
          $yymx != self::YYERRORSYMBOL &&
          ($yyact = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::YYERRORSYMBOL)) >= self::YYNSTATE
        ){
          $this->yy_pop_parser_stack();
        }
        if( $this->yyidx < 0 || $yymajor==0 ){
          $this->yy_destructor($yymajor,$yyminor);
          $this->yy_parse_failed();
          $yymajor = self::YYNOCODE;
        }else if( $yymx!=self::YYERRORSYMBOL ){
          $this->yy_shift($yyact,self::YYERRORSYMBOL,0);
        }
      }
      $this->yyerrcnt = 3;
      $yyerrorhit = 1;
} else {  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( $this->yyerrcnt<=0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $this->yyerrcnt = 3;
      $this->yy_destructor($yymajor,$yyminor);
      if( $yyendofinput ){
        $this->yy_parse_failed();
      }
      $yymajor = self::YYNOCODE;
}
    }else{
      $this->yy_accept();
      $yymajor = self::YYNOCODE;
    }
  }while( $yymajor!=self::YYNOCODE && $this->yyidx>=0 );
}

}
