<?php # vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */


/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
class ParseyyStackEntry {
  var /* int */ $stateno;       /* The state-number */
  var /* int */ $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  var $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

/* The state of the parser is completely contained in an instance of
** the following structure */
class ParseParser {
  var /* int */ $yyidx = -1;                    /* Index of top element in stack */
  var /* int */ $yyerrcnt;                 /* Shifts left before out of the error */
  // ParseARG_SDECL                /* A place to hold %extra_argument */
  var /* yyStackEntry */ $yystack = array(
  	/* of YYSTACKDEPTH elements */
	);  /* The parser's stack */

  var $yyTraceFILE = null;
  var $yyTracePrompt = null;



/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
  const TK_NAME =  1;
  const TK_INTNUM =  2;
  const TK_APPROXNUM =  3;
  const TK_DEADTOKEN =  4;
  const TK_COMMA =  5;
  const TK_CHARACTER =  6;
  const TK_SET =  7;
  const TK_CHAR =  8;
  const TK_LPAR =  9;
  const TK_RPAR = 10;
  const TK_VARYING = 11;
  const TK_VARCHAR = 12;
  const TK_NATIONAL = 13;
  const TK_NCHAR = 14;
  const TK_BIT = 15;
  const TK_NUMERIC = 16;
  const TK_DECIMAL = 17;
  const TK_DEC = 18;
  const TK_INTEGER = 19;
  const TK_SMALLINT = 20;
  const TK_FLOAT = 21;
  const TK_REAL = 22;
  const TK_DOUBLE = 23;
  const TK_PRECISION = 24;
  const TK_DATE = 25;
  const TK_TIME = 26;
  const TK_TIMESTAMP = 27;
  const TK_WITH = 28;
  const TK_ZONE = 29;
  const TK_INTERVAL = 30;
  const TK_TO = 31;
  const TK_YEAR = 32;
  const TK_MONTH = 33;
  const TK_DAY = 34;
  const TK_HOUR = 35;
  const TK_MINUTE = 36;
  const TK_SECOND = 37;
  const TK_PERIOD = 38;
  const TK_DEFAULT = 39;
  const TK_USER = 40;
  const TK_CURRENT_USER = 41;
  const TK_SESSION_USER = 42;
  const TK_SYSTEM_USER = 43;
  const TK_NULL = 44;
  const TK_PLUS_SIGN = 45;
  const TK_MINUS_SIGN = 46;
  const TK_CONSTRAINT = 47;
  const TK_NOT = 48;
  const TK_UNIQUE = 49;
  const TK_AUTO_INCREMENT = 50;
  const TK_PRIMARY = 51;
  const TK_KEY = 52;
  const TK_REFERENCES = 53;
  const TK_MATCH = 54;
  const TK_FULL = 55;
  const TK_PARTIAL = 56;
  const TK_ON = 57;
  const TK_UPDATE = 58;
  const TK_DELETE = 59;
  const TK_CASCADE = 60;
  const TK_NO = 61;
  const TK_ACTION = 62;
  const TK_CHECK = 63;
  const TK_OR = 64;
  const TK_AND = 65;
  const TK_IS = 66;
  const TK_ASTERISK = 67;
  const TK_SOLIDUS = 68;
  const TK_STRING = 69;
  const TK_COUNT = 70;
  const TK_MAX = 71;
  const TK_MIN = 72;
  const TK_DISTINCT = 73;
  const TK_ALL = 74;
  const TK_UNION = 75;
  const TK_EXCEPT = 76;
  const TK_INTERSECT = 77;
  const TK_SELECT = 78;
  const TK_AS = 79;
  const TK_LIMIT = 80;
  const TK_OFFSET = 81;
  const TK_ORDER = 82;
  const TK_BY = 83;
  const TK_ASC = 84;
  const TK_DESC = 85;
  const TK_FROM = 86;
  const TK_CROSS = 87;
  const TK_JOIN = 88;
  const TK_NATURAL = 89;
  const TK_INNER = 90;
  const TK_OUTER = 91;
  const TK_LEFT = 92;
  const TK_RIGHT = 93;
  const TK_USING = 94;
  const TK_WHERE = 95;
  const TK_GROUP = 96;
  const TK_HAVING = 97;
  const TK_VALUES = 98;
  const TK_TABLE = 99;
  const TK_CORRESPONDING = 100;
  const TK_NULLX = 101;
  const TK_TRUE = 102;
  const TK_FALSE = 103;
  const TK_UNKNOWN = 104;
  const TK_OP_EQ = 105;
  const TK_OP_GTLT = 106;
  const TK_OP_LT = 107;
  const TK_OP_GT = 108;
  const TK_OP_LTEQ = 109;
  const TK_OP_GTEQ = 110;
  const TK_DEFERRABLE = 111;
  const TK_INITIALLY = 112;
  const TK_DEFERRED = 113;
  const TK_IMMEDIATE = 114;
  const TK_CREATE = 115;
  const TK_RESTRICT = 116;
  const TK_DROP = 117;
  const TK_IF = 118;
  const TK_EXISTS = 119;
  const TK_INSERT = 120;
  const TK_INTO = 121;
  const TK_ABS = 122;
  const TK_ACOS = 123;
  const TK_ASIN = 124;
  const TK_ATAN = 125;
  const TK_ATAN2 = 126;
  const TK_CEIL = 127;
  const TK_COS = 128;
  const TK_COT = 129;
  const TK_CRC32 = 130;
  const TK_DEGREES = 131;
  const TK_EXP = 132;
  const TK_FLOOR = 133;
  const TK_FORMAT = 134;
  const TK_LN = 135;
  const TK_LOG = 136;
  const TK_LOG2 = 137;
  const TK_LOG10 = 138;
  const TK_MOD = 139;
  const TK_PI = 140;
  const TK_POW = 141;
  const TK_RADIANS = 142;
  const TK_ROUND = 143;
  const TK_SIGN = 144;
  const TK_SIN = 145;
  const TK_SQRT = 146;
  const TK_TAN = 147;
  const TK_TRUNCATE = 148;
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
  const YYNOCODE = 312;
#define ParseTOKENTYPE void*
  const YYSTACKDEPTH = 100;
  const YYNSTATE = 695;
  const YYNRULE = 391;
  const YYERRORSYMBOL = 149;

  /* QUESTE LE HO AGGIUNTE IO */
  const   YYWILDCARD = 0;
  public $operations_list= Array();
  /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
  var $YY_NO_ACTION;
  var $YY_ACCEPT_ACTION;
  var $YY_ERROR_ACTION;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static $yy_action = array(
 /*     0 */   444,  377,  657,  408,  425,  253,  406,  252,  407,  428,
 /*    10 */   410,  238,  572,  348,  122,  602,  529,  351,  239,  242,
 /*    20 */   243,  365,  367,  369,  644,  645,  371,  647,  373,  403,
 /*    30 */   649,  177,  178,  401,  402,  111,  660,  661,  662,  663,
 /*    40 */   664,  383,  415,  185,  901,  110,  426,   65,  343,  616,
 /*    50 */   617,  618,  619,  620,  901,  634,  635,  403,  105,  660,
 /*    60 */   661,  662,  663,  664,  379,  228,  297,  517,  509,  298,
 /*    70 */    10,  516,  518,  519,  128,  403,  230,  226,  499,  463,
 /*    80 */   170,  225,  464,  465,  417,  419,  420,  300,  422,  423,
 /*    90 */   424,  254,  432,  258,  892,  437,  227,  223,  458,  219,
 /*   100 */   266,  267,  233,  460,  586,  443,  445,  446,  444,  189,
 /*   110 */   190,  408,  425,  253,  406,  252,  407,  428,  410,  901,
 /*   120 */   901,  991,  172,  659,  107,  665,  454,  456,  457, 1087,
 /*   130 */   398,  399,  400,  403,  408,  116,  409,   16,  429,  407,
 /*   140 */    85,   63,  232,  566,  568,  569,  334,  583,  584,  335,
 /*   150 */   415,   86,   19,  116,  426,   65,  403,  462,  121,  409,
 /*   160 */   504,  342,  506,  507,   62,  332,  105,  521,  522,  523,
 /*   170 */   524,  525,  526,  228,  297,  517,  509,  298,   91,  516,
 /*   180 */   518,  519,  128,  403,  230,  226,  499,  463,  170,  225,
 /*   190 */   464,  465,  417,  419,  420,  300,  422,  423,  424,  254,
 /*   200 */   432,  258,  236,  437,  227,  223,  302,  221,  266,  267,
 /*   210 */   467,  460,  403,  443,  445,  446,  403,  444,   81,  409,
 /*   220 */   408,  425,  253,  406,  252,  407,  428,  410,  573,   68,
 /*   230 */   172,  537,  107,  169,  454,  456,  457,  408,  301,  253,
 /*   240 */   406,  411,  407,  408,  410,  413,  414,  447,  407,  543,
 /*   250 */   962,  534,    4,   13,   88,  308,   82,  403,  403,  415,
 /*   260 */   409,  570,  654,  426,   65,   56,  532,  124,  535,  536,
 /*   270 */   962,  563,  564,  565,  673,  105,  415,  121,  680,  681,
 /*   280 */   682,  683,  265,  962,  505,  962,  375,  962,  962,  304,
 /*   290 */   117,  527,  678,  498,  226,  394,  463,  170,  225,  464,
 /*   300 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*   310 */   258,  996,  437,  227,  223,  458,  219,  266,  267,   15,
 /*   320 */   460,  996,  443,  445,  446,  403,  404,  405,  409,  403,
 /*   330 */   404,  405,  409,    2,  169,  260,   57,   61,  265,  172,
 /*   340 */   505,  107,  214,  454,  456,  457,  408,  425,  253,  406,
 /*   350 */   252,  407,  428,  410,   13,   88,  408,  513,  514,  515,
 /*   360 */   429,  407,   85,  448,  782,  567,  568,  569,  588,  413,
 /*   370 */   414,  962,   12,  413,  414,  404,  405,  296,  408,  307,
 /*   380 */   333,  168,  429,  407,  692,  415,  511,  996,  996,  426,
 /*   390 */    65,  413,  414,  427,  255,  434,  435,  427,  255,  434,
 /*   400 */   435,  436,  169,  265,  962,  505,  962,  123,  962,  962,
 /*   410 */   580,  581,  582,  605,  606,  607,  608,  609,  413,  414,
 /*   420 */    95,  389,   13,   88,  224,  502,  465,  417,  419,  420,
 /*   430 */   421,  422,  423,  424,  254,  432,  258,  512,  437,  438,
 /*   440 */   169,  594,  427,  186,  234,  676,  268,  269,  270,  271,
 /*   450 */   272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
 /*   460 */   282,  283,  284,  285,  286,  288,  289,  290,  291,  292,
 /*   470 */   293,  294,  295,  403,  404,  405,  409,  330,  374,  387,
 /*   480 */   653,   62,  391,  408,   14,  253,  406,  411,  407,  408,
 /*   490 */   410,  555,  556,  429,  407,  449,  408,  425,  253,  406,
 /*   500 */   252,  407,  428,  410,  403,  599,  408,  409,  253,  406,
 /*   510 */   411,  407,   63,  410,  235,  408,   28,  413,  414,  429,
 /*   520 */   407,  430,  415,  612,  658,  378,   21,  668,  247,  408,
 /*   530 */   179,  694,  396,  411,  407,  415,  412,  554,  497,  426,
 /*   540 */    65,  427,  255,  434,  435,  415,  310,  265,  408,  505,
 /*   550 */   169,  436,  429,  407,  550,  595,  413,  414,  188,   10,
 /*   560 */   571,  339,  603,  604,  610,  611,  176,  589,  337,  613,
 /*   570 */    13,   88,  689,  170,  225,  464,  465,  417,  419,  420,
 /*   580 */   421,  422,  423,  424,  254,  432,  258,  408,  437,  438,
 /*   590 */   110,  429,  407,  692,  268,  269,  270,  271,  272,  273,
 /*   600 */   274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
 /*   610 */   284,  285,  286,  288,  289,  290,  291,  292,  293,  294,
 /*   620 */   295,  403,  404,  405,  409,  311,  650,  468,  323,    1,
 /*   630 */   408,  425,  253,  406,  252,  407,  428,  410,  712,  655,
 /*   640 */   469,  693,  408,  712,  253,  406,  411,  407,  408,  410,
 /*   650 */   321,  688,  429,  407,  450,  408,  596,  597,  549,  429,
 /*   660 */   407,  551,  413,  414,  439,  413,  414,  125,   12,  415,
 /*   670 */   544,  404,  405,  426,   65,  413,  414,  192,  408,  346,
 /*   680 */    91,  415,  429,  407,  449,  436,  375,    6,  104,  427,
 /*   690 */   255,  434,  435,  299,  517,  509,  298,  331,  516,  518,
 /*   700 */   519,  128,  956,  461,  322,  499,  463,  170,  225,  464,
 /*   710 */   465,  417,  419,  420,  300,  422,  423,  424,  254,  432,
 /*   720 */   258,  502,  437,  438,  403,  404,  405,  409,  403,   66,
 /*   730 */    67,  409,   61,  408,  182,  261,   62,  429,  407,  449,
 /*   740 */   687,  396,  268,  269,  270,  271,  272,  273,  274,  275,
 /*   750 */   276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
 /*   760 */   286,  288,  289,  290,  291,  292,  293,  294,  295,  408,
 /*   770 */   425,  253,  406,  252,  407,  428,  410,   26,    9,  408,
 /*   780 */   956,   40,  470,  429,  407,  449,  482,  327,   37,  340,
 /*   790 */   341,    5,  427,  255,  434,  435,  403,   58,   59,  409,
 /*   800 */   262,   69,  576,  577,   62,  169,  997,  403,  415,  183,
 /*   810 */   409,  997,  426,   65,   96,   62,  184,  413,  414,  672,
 /*   820 */   324,  413,  414,  552,  436,   13,   88,  308,  413,  414,
 /*   830 */    98,  303,  297,  517,  509,  298,  261,  516,  518,  519,
 /*   840 */   128,  240,  461,  241,  499,  463,  170,  225,  464,  465,
 /*   850 */   417,  419,  420,  300,  422,  423,  424,  254,  432,  258,
 /*   860 */   118,  437,  438,  408,  471,  253,  406,  411,  407,   71,
 /*   870 */   410,   66,   67,  169,  472,  234,  408,  425,  253,  406,
 /*   880 */   252,  407,  428,  410,  169,  575,  408,   49,  473,   44,
 /*   890 */   447,  407,  490,   13,   88,  308,   46,  167,  166,  413,
 /*   900 */   414,  264,  601,  408,   13,   88,  308,  447,  407,  413,
 /*   910 */   414,  600,  196,  403,  354,  415,  409,  578,  119,  426,
 /*   920 */    65,   62,  991,  413,  414,  175,  459,  413,  414,  413,
 /*   930 */   414,  436,  991,  164,   55,  587,  413,  414,  326,  297,
 /*   940 */   517,  509,  298,  591,  516,  518,  519,  128,  590,  461,
 /*   950 */   336,  499,  463,  170,  225,  464,  465,  417,  419,  420,
 /*   960 */   300,  422,  423,  424,  254,  432,  258,  408,  437,  438,
 /*   970 */   338,  429,  407,  449,  413,  414,  614,  474,  260,  408,
 /*   980 */   425,  253,  406,  252,  407,  428,  410,  513,  514,  515,
 /*   990 */   169,  901,  901,  991,  475,  263,  476,  593,  991,  991,
 /*  1000 */   477,  615,  478,  622,  479,  198,  453,  357,  244,  345,
 /*  1010 */    13,   88,  413,  414,  200,  202,  360,  363,  415,  347,
 /*  1020 */   205,  207,  426,   65,  305,  636,  640,  350,  209,  413,
 /*  1030 */   414,  413,  414,  642,  436,  413,  414,  413,  414,  413,
 /*  1040 */   414,  329,  297,  517,  509,  298,  384,  516,  518,  519,
 /*  1050 */   128,  670,  461,  352,  499,  463,  170,  225,  464,  465,
 /*  1060 */   417,  419,  420,  300,  422,  423,  424,  254,  432,  258,
 /*  1070 */   480,  437,  438,  481,  408,  425,  253,  406,  252,  407,
 /*  1080 */   428,  410,  353,  355,  483,  356,  408,  484,  253,  406,
 /*  1090 */   411,  407,  485,  410,  358,  486,  705,  488,  359,  306,
 /*  1100 */   361,  705,  362,  364,  639,  413,  414,  638,  413,  414,
 /*  1110 */   651,  366,  368,  415,  245,  246,  372,  426,   65,  413,
 /*  1120 */   414,  370,  413,  414,  375,  415,  656,  413,  414,  436,
 /*  1130 */   413,  414,  413,  414,  489,  667,  237,  297,  517,  509,
 /*  1140 */   298,  677,  516,  518,  519,  128,  380,  461,  491,  499,
 /*  1150 */   463,  170,  225,  464,  465,  417,  419,  420,  300,  422,
 /*  1160 */   423,  424,  254,  432,  258,  492,  437,  438,  493,  413,
 /*  1170 */   414,  494,  669,  408,  425,  253,  406,  252,  407,  428,
 /*  1180 */   410,  385,  381,  413,  414,  495,  248,  496,  388,   87,
 /*  1190 */    92,  684,    8,  256,  706,  113,  257,  114,  431,  171,
 /*  1200 */   413,  414,   70,  413,  414,   99,  413,  414,  115,  451,
 /*  1210 */   100,   79,  415,  990,  452,   22,  426,   65,   23,   24,
 /*  1220 */   413,  414,  413,  414,   25,   27,  132,   29,  436,   30,
 /*  1230 */    31,   32,   33,   34,   35,  390,  297,  517,  509,  298,
 /*  1240 */    36,  516,  518,  519,  128,  674,  461,   38,  499,  463,
 /*  1250 */   170,  225,  464,  465,  417,  419,  420,  300,  422,  423,
 /*  1260 */   424,  254,  432,  258,   39,  437,  438,   41,  408,  425,
 /*  1270 */   253,  406,  252,  407,  428,  410,   42,   43,  287,   45,
 /*  1280 */   408,  487,  253,  406,  411,  407,   47,  410,   48,   50,
 /*  1290 */    51,   52,   53,   54,  229,   80,  528,   11,  530,   10,
 /*  1300 */   101,  675,  531,  533,  102,  231,  539,  415,  542,  309,
 /*  1310 */   112,  426,   65,  545,  546,   20,   17,   83,   84,  415,
 /*  1320 */   579,  166,  574,  436,   90,  187,   89,  585,  592,  103,
 /*  1330 */   397,  297,  517,  509,  298,  218,  516,  518,  519,  128,
 /*  1340 */   598,  461,    7,  499,  463,  170,  225,  464,  465,  417,
 /*  1350 */   419,  420,  300,  422,  423,  424,  254,  432,  258,  167,
 /*  1360 */   437,  438,  403,  404,  405,  409,  344,  621,  193,  191,
 /*  1370 */    61,  408,  425,  253,  406,  252,  407,  428,  410,  623,
 /*  1380 */   194,  349,  624,  408,  195,  253,  406,  252,  407,  428,
 /*  1390 */   410,  625,  626,  197,  376,  627,  628,  199,  648,  629,
 /*  1400 */   691,  630,  201,  217,  631,  690,  413,  414,  632,  203,
 /*  1410 */   415,  633,  204,  679,  426,   65,  637,  206,  120,  641,
 /*  1420 */   208,  210,  415,  643,  652,  646,  436,  211,  212,  213,
 /*  1430 */   427,  255,  434,  435,  666,  508,  509,  298,  436,  516,
 /*  1440 */   518,  519,  128,  382,  461,  215,  499,  463,  170,  225,
 /*  1450 */   464,  465,  417,  419,  420,  300,  422,  423,  424,  254,
 /*  1460 */   432,  258,  783,  437,  438,  216,   93,  559,  386,  671,
 /*  1470 */    94,  254,   64,   97,  686,  437,  704,  704,   18,  704,
 /*  1480 */   704,  704,  704,  268,  269,  270,  271,  272,  273,  274,
 /*  1490 */   275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
 /*  1500 */   285,  286,  288,  289,  290,  291,  292,  293,  294,  295,
 /*  1510 */   403,  404,  405,  409,  704,  704,  328,  560,    1,  408,
 /*  1520 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  1530 */   704,  408,  704,  253,  406,  252,  407,  428,  410,  704,
 /*  1540 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  1550 */   704,  704,  704,  704,  413,  414,  704,  704,  415,  704,
 /*  1560 */   704,  704,  426,   65,  704,  704,  704,  704,  704,  704,
 /*  1570 */   415,  704,  704,  704,  436,  704,  704,  704,  427,  255,
 /*  1580 */   434,  435,  704,  704,  510,  298,  436,  516,  518,  519,
 /*  1590 */   128,  704,  461,  704,  499,  463,  170,  225,  464,  465,
 /*  1600 */   417,  419,  420,  300,  422,  423,  424,  254,  432,  258,
 /*  1610 */   502,  437,  438,  704,  704,  559,  704,  704,  704,  254,
 /*  1620 */   704,  704,  704,  437,  704,  704,  704,  704,  704,  704,
 /*  1630 */   704,  268,  269,  270,  271,  272,  273,  274,  275,  276,
 /*  1640 */   277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
 /*  1650 */   288,  289,  290,  291,  292,  293,  294,  295,  403,  404,
 /*  1660 */   405,  409,  704,  704,  704,  558,    3,  704,  704,  704,
 /*  1670 */   704,  704,  704,  704,  704,  408,  704,  253,  406,  411,
 /*  1680 */   407,  408,  410,  253,  406,  411,  407,  704,  410,  704,
 /*  1690 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  1700 */   704,  704,  413,  414,  403,  404,  405,  409,  704,  704,
 /*  1710 */   704,  704,   61,  704,  415,  704,  704,  704,  704,  704,
 /*  1720 */   415,  704,  704,  704,  704,  704,  427,  255,  434,  435,
 /*  1730 */    60,  704,  704,  704,  704,  704,  395,  704,  704,  704,
 /*  1740 */   704,  704,  704,  704,  704,  704,  704,  704,  413,  414,
 /*  1750 */   704,  704,  704,  704,  704,  704,  704,  704,  502,  704,
 /*  1760 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  1770 */   561,  704,  427,  255,  434,  435,  704,  704,  704,  268,
 /*  1780 */   269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /*  1790 */   279,  280,  281,  282,  283,  284,  285,  286,  288,  289,
 /*  1800 */   290,  291,  292,  293,  294,  295,  704,  704,  704,  704,
 /*  1810 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  1820 */   704,  704,  704,  704,  704,  268,  269,  270,  271,  272,
 /*  1830 */   273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
 /*  1840 */   283,  284,  285,  286,  288,  289,  290,  291,  292,  293,
 /*  1850 */   294,  295,  403,  404,  405,  409,  704,  704,  704,  704,
 /*  1860 */    61,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  1870 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  1880 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  1890 */   704,  704,  704,  704,  704,  704,  413,  414,  704,  704,
 /*  1900 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  1910 */   704,  704,  704,  704,  704,  704,  436,  704,  704,  704,
 /*  1920 */   427,  255,  434,  435,  704,  704,  704,  704,  704,  704,
 /*  1930 */   704,  704,  704,  704,  704,  704,  704,  108,  170,  225,
 /*  1940 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  320,
 /*  1950 */   432,  258,  704,  437,  438,  704,  704,  704,  704,  704,
 /*  1960 */   704,  704,  704,  704,  704,  704,   78,  704,  704,  562,
 /*  1970 */   548,  704,  704,  268,  269,  270,  271,  272,  273,  274,
 /*  1980 */   275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
 /*  1990 */   285,  286,  288,  289,  290,  291,  292,  293,  294,  295,
 /*  2000 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  704,
 /*  2010 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2020 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2030 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  415,
 /*  2040 */   704,  704,  704,  426,   65,  704,  704,  704,  704,  704,
 /*  2050 */   704,  704,  704,  704,  704,  436,  704,  704,  704,  704,
 /*  2060 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2070 */   704,  501,  704,  461,  704,  499,  463,  170,  225,  464,
 /*  2080 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  2090 */   258,  704,  437,  438,  408,  425,  253,  406,  252,  407,
 /*  2100 */   428,  410,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2110 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2120 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2130 */   704,  704,  704,  415,  704,  500,  704,  426,   65,  704,
 /*  2140 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  436,
 /*  2150 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  704,
 /*  2160 */   704,  704,  704,  704,  704,  520,  704,  461,  704,  499,
 /*  2170 */   463,  170,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  2180 */   423,  424,  254,  432,  258,  704,  437,  438,  704,  415,
 /*  2190 */   704,  704,  704,  426,   65,  704,  704,  704,  704,  704,
 /*  2200 */   704,  704,  704,  704,  704,  436,  704,  704,  704,  704,
 /*  2210 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  704,
 /*  2220 */   704,  704,  704,  704,  704,  704,  108,  170,  225,  464,
 /*  2230 */   465,  417,  419,  420,  421,  422,  423,  424,  320,  432,
 /*  2240 */   258,  704,  437,  438,  704,  704,  704,  704,  704,  415,
 /*  2250 */   704,  704,  704,  426,   65,  704,  704,  704,  547,  548,
 /*  2260 */   704,  704,  704,  704,  704,  436,  704,  704,  704,  704,
 /*  2270 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2280 */   704,  704,  704,  704,  704,  704,  174,  170,  225,  464,
 /*  2290 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  2300 */   258,  704,  437,  438,  408,  425,  253,  406,  252,  407,
 /*  2310 */   428,  410,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2320 */   704,  704,  704,  704,  704,  704,  325,  557,  704,  704,
 /*  2330 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2340 */   704,  704,  704,  415,  704,  704,  704,  426,   65,  704,
 /*  2350 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  436,
 /*  2360 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  704,
 /*  2370 */   704,  704,  704,  704,  704,  704,  704,  466,  704,  704,
 /*  2380 */   463,  170,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  2390 */   423,  424,  254,  432,  258,  704,  437,  438,  704,  415,
 /*  2400 */   704,  704,  704,  426,   65,  704,  704,  704,  704,  704,
 /*  2410 */   704,  704,  704,  704,  704,  436,  704,  704,  704,  704,
 /*  2420 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  704,
 /*  2430 */   704,  704,  704,  704,  704,  704,  174,  170,  225,  464,
 /*  2440 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  2450 */   258,  704,  437,  438,  704,  704,  704,  704,  704,  415,
 /*  2460 */   704,  704,  704,  426,   65,  704,  704,  704,  704,  704,
 /*  2470 */   704,  704,  704,  704,  704,  436,  704,  553,  704,  704,
 /*  2480 */   704,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  2490 */   704,  704,  704,  704,  704,  704,  319,  170,  225,  464,
 /*  2500 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  2510 */   258,  704,  437,  438,  704,  704,  704,  704,  704,  704,
 /*  2520 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  2530 */   704,  704,  704,  704,  704,  704,  436,  408,  425,  253,
 /*  2540 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  2550 */   704,  704,  704,  704,  704,  704,  704,  704,  133,  225,
 /*  2560 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  2570 */   432,  258,  704,  437,  438,  704,  415,  704,  704,  704,
 /*  2580 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2590 */   704,  704,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  2600 */   410,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2610 */   704,  704,  704,  704,  134,  225,  464,  465,  417,  419,
 /*  2620 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  2630 */   438,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  2640 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  704,
 /*  2650 */   704,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  2660 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2670 */   135,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  2680 */   424,  254,  432,  258,  704,  437,  438,  704,  704,  704,
 /*  2690 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  2700 */   704,  704,  704,  704,  704,  704,  436,  704,  704,  704,
 /*  2710 */   704,  704,  704,  408,  425,  253,  406,  252,  407,  428,
 /*  2720 */   410,  704,  704,  704,  704,  704,  704,  704,  129,  225,
 /*  2730 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  2740 */   432,  258,  704,  437,  438,  704,  704,  704,  704,  704,
 /*  2750 */   704,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  2760 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  408,
 /*  2770 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  2780 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2790 */   136,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  2800 */   424,  254,  432,  258,  704,  437,  438,  704,  415,  704,
 /*  2810 */   704,  704,  426,   65,  704,  704,  704,  704,  704,  704,
 /*  2820 */   704,  704,  704,  704,  436,  408,  425,  253,  406,  252,
 /*  2830 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  2840 */   704,  704,  704,  704,  704,  704,  137,  225,  464,  465,
 /*  2850 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  2860 */   704,  437,  438,  704,  415,  704,  704,  704,  426,   65,
 /*  2870 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2880 */   436,  704,  704,  408,  425,  253,  406,  252,  407,  428,
 /*  2890 */   410,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  2900 */   704,  704,  138,  225,  464,  465,  417,  419,  420,  421,
 /*  2910 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  2920 */   704,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  2930 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  704,
 /*  2940 */   704,  704,  704,  704,  704,  408,  425,  253,  406,  252,
 /*  2950 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  2960 */   139,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  2970 */   424,  254,  432,  258,  704,  437,  438,  704,  704,  704,
 /*  2980 */   704,  704,  704,  704,  415,  704,  704,  704,  426,   65,
 /*  2990 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3000 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  3010 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3020 */   704,  704,  140,  225,  464,  465,  417,  419,  420,  421,
 /*  3030 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  3040 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  3050 */   704,  704,  704,  704,  704,  704,  436,  408,  425,  253,
 /*  3060 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  3070 */   704,  704,  704,  704,  704,  704,  704,  704,  141,  225,
 /*  3080 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  3090 */   432,  258,  704,  437,  438,  704,  415,  704,  704,  704,
 /*  3100 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3110 */   704,  704,  436,  704,  704,  408,  425,  253,  406,  252,
 /*  3120 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  3130 */   704,  704,  704,  704,  142,  225,  464,  465,  417,  419,
 /*  3140 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  3150 */   438,  704,  704,  704,  415,  704,  704,  704,  426,   65,
 /*  3160 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3170 */   436,  704,  704,  704,  704,  704,  704,  408,  425,  253,
 /*  3180 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  3190 */   704,  704,  143,  225,  464,  465,  417,  419,  420,  421,
 /*  3200 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  3210 */   704,  704,  704,  704,  704,  704,  415,  704,  704,  704,
 /*  3220 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3230 */   704,  704,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  3240 */   410,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3250 */   704,  704,  704,  704,  144,  225,  464,  465,  417,  419,
 /*  3260 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  3270 */   438,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  3280 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  408,
 /*  3290 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  3300 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3310 */   145,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  3320 */   424,  254,  432,  258,  704,  437,  438,  704,  415,  704,
 /*  3330 */   704,  704,  426,   65,  704,  704,  704,  704,  704,  704,
 /*  3340 */   704,  704,  704,  704,  436,  704,  704,  408,  425,  253,
 /*  3350 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  3360 */   704,  704,  704,  704,  704,  704,  146,  225,  464,  465,
 /*  3370 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  3380 */   704,  437,  438,  704,  704,  704,  415,  704,  704,  704,
 /*  3390 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3400 */   704,  704,  436,  704,  704,  704,  704,  704,  704,  408,
 /*  3410 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  3420 */   704,  704,  704,  704,  147,  225,  464,  465,  417,  419,
 /*  3430 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  3440 */   438,  704,  704,  704,  704,  704,  704,  704,  415,  704,
 /*  3450 */   704,  704,  426,   65,  704,  704,  704,  704,  704,  704,
 /*  3460 */   704,  704,  704,  704,  436,  408,  425,  253,  406,  252,
 /*  3470 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  3480 */   704,  704,  704,  704,  704,  704,  148,  225,  464,  465,
 /*  3490 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  3500 */   704,  437,  438,  704,  415,  704,  704,  704,  426,   65,
 /*  3510 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3520 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  3530 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3540 */   704,  704,  130,  225,  464,  465,  417,  419,  420,  421,
 /*  3550 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  3560 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  3570 */   704,  704,  704,  704,  704,  704,  436,  704,  704,  408,
 /*  3580 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  3590 */   704,  704,  704,  704,  704,  704,  704,  704,  149,  225,
 /*  3600 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  3610 */   432,  258,  704,  437,  438,  704,  704,  704,  415,  704,
 /*  3620 */   704,  704,  426,   65,  704,  704,  704,  704,  704,  704,
 /*  3630 */   704,  704,  704,  704,  436,  704,  704,  704,  704,  704,
 /*  3640 */   704,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  3650 */   704,  704,  704,  704,  704,  704,  150,  225,  464,  465,
 /*  3660 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  3670 */   704,  437,  438,  704,  704,  704,  704,  704,  704,  704,
 /*  3680 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  3690 */   704,  704,  704,  704,  704,  704,  436,  408,  425,  253,
 /*  3700 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  3710 */   704,  704,  704,  704,  704,  704,  704,  704,  151,  225,
 /*  3720 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  3730 */   432,  258,  704,  437,  438,  704,  415,  704,  704,  704,
 /*  3740 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3750 */   704,  704,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  3760 */   410,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3770 */   704,  704,  704,  704,  152,  225,  464,  465,  417,  419,
 /*  3780 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  3790 */   438,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  3800 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  704,
 /*  3810 */   704,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  3820 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3830 */   153,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  3840 */   424,  254,  432,  258,  704,  437,  438,  704,  704,  704,
 /*  3850 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  3860 */   704,  704,  704,  704,  704,  704,  436,  704,  704,  704,
 /*  3870 */   704,  704,  704,  408,  425,  253,  406,  252,  407,  428,
 /*  3880 */   410,  704,  704,  704,  704,  704,  704,  704,  154,  225,
 /*  3890 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  3900 */   432,  258,  704,  437,  438,  704,  704,  704,  704,  704,
 /*  3910 */   704,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  3920 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  408,
 /*  3930 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  3940 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  3950 */   155,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  3960 */   424,  254,  432,  258,  704,  437,  438,  704,  415,  704,
 /*  3970 */   704,  704,  426,   65,  704,  704,  704,  704,  704,  704,
 /*  3980 */   704,  704,  704,  704,  436,  408,  425,  253,  406,  252,
 /*  3990 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  4000 */   704,  704,  704,  704,  704,  704,  156,  225,  464,  465,
 /*  4010 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  4020 */   704,  437,  438,  704,  415,  704,  704,  704,  426,   65,
 /*  4030 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4040 */   436,  704,  704,  408,  425,  253,  406,  252,  407,  428,
 /*  4050 */   410,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4060 */   704,  704,  131,  225,  464,  465,  417,  419,  420,  421,
 /*  4070 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  4080 */   704,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  4090 */   704,  704,  704,  704,  704,  704,  704,  704,  436,  704,
 /*  4100 */   704,  704,  704,  704,  704,  408,  425,  253,  406,  252,
 /*  4110 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  4120 */   157,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  4130 */   424,  254,  432,  258,  704,  437,  438,  704,  704,  704,
 /*  4140 */   704,  704,  704,  704,  415,  704,  704,  704,  426,   65,
 /*  4150 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4160 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  704,
 /*  4170 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4180 */   704,  704,  158,  225,  464,  465,  417,  419,  420,  421,
 /*  4190 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  4200 */   415,  704,  704,  704,  426,   65,  704,  704,  704,  704,
 /*  4210 */   704,  704,  704,  704,  704,  704,  436,  408,  425,  253,
 /*  4220 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  4230 */   704,  704,  704,  704,  704,  704,  704,  704,  159,  225,
 /*  4240 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  4250 */   432,  258,  704,  437,  438,  704,  415,  704,  704,  704,
 /*  4260 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4270 */   704,  704,  436,  704,  704,  408,  425,  253,  406,  252,
 /*  4280 */   407,  428,  410,  704,  704,  704,  704,  704,  704,  704,
 /*  4290 */   704,  704,  704,  704,  160,  225,  464,  465,  417,  419,
 /*  4300 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  4310 */   438,  704,  704,  704,  415,  704,  704,  704,  426,   65,
 /*  4320 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4330 */   436,  704,  704,  704,  704,  704,  704,  408,  425,  253,
 /*  4340 */   406,  252,  407,  428,  410,  704,  704,  704,  704,  704,
 /*  4350 */   704,  704,  161,  225,  464,  465,  417,  419,  420,  421,
 /*  4360 */   422,  423,  424,  254,  432,  258,  704,  437,  438,  704,
 /*  4370 */   704,  704,  704,  704,  704,  704,  415,  704,  704,  704,
 /*  4380 */   426,   65,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4390 */   704,  704,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  4400 */   410,  444,  704,  704,  408,  704,  253,  406,  249,  407,
 /*  4410 */   449,  410,  704,  704,  162,  225,  464,  465,  417,  419,
 /*  4420 */   420,  421,  422,  423,  424,  254,  432,  258,  704,  437,
 /*  4430 */   438,  704,  415,  704,  704,  704,  426,   65,  704,  704,
 /*  4440 */   704,  704,  704,  415,  704,  704,  704,  704,  436,  704,
 /*  4450 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  106,
 /*  4460 */   704,  392,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4470 */   163,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  4480 */   424,  254,  432,  258,  704,  437,  438,  704,  704,  415,
 /*  4490 */   704,  704,  704,  426,   65,  704,  704,  455,  223,  302,
 /*  4500 */   221,  266,  267,  704,  460,  436,  443,  445,  446,  408,
 /*  4510 */   425,  253,  406,  252,  407,  428,  410,  704,  704,  704,
 /*  4520 */   704,  704,  704,  172,  704,  107,  704,  454,  456,  457,
 /*  4530 */   416,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  4540 */   258,  704,  437,  438,  704,  704,  704,  704,  415,  704,
 /*  4550 */   704,  704,  426,   65,  704,  393,  704,  704,  704,  704,
 /*  4560 */   704,  704,  444,  704,  436,  408,  704,  253,  406,  411,
 /*  4570 */   407,  704,  410,  704,  444,  704,  704,  408,  704,  253,
 /*  4580 */   406,  411,  407,  704,  410,  704,  704,  704,  704,  433,
 /*  4590 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  4600 */   704,  437,  438,  704,  415,  704,  704,  704,  704,  704,
 /*  4610 */   704,  704,  704,  704,  704,  704,  415,  704,  704,  704,
 /*  4620 */   106,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4630 */   704,  704,  106,  704,  444,  704,  704,  408,  704,  253,
 /*  4640 */   406,  411,  407,  704,  410,  704,  704,  704,  704,  704,
 /*  4650 */   704,  704,  704,  704,  704,  704,  704,  704,  455,  251,
 /*  4660 */   458,  219,  266,  267,  704,  460,  704,  443,  445,  446,
 /*  4670 */   455,  223,  458,  219,  266,  267,  415,  460,  704,  443,
 /*  4680 */   445,  446,  704,  704,  172,  704,  107,  704,  454,  456,
 /*  4690 */   457,  704,  106,  704,  704,  704,  172,  704,  107,  704,
 /*  4700 */   454,  456,  457,  704,  704,  704,  704,  704,  704,  704,
 /*  4710 */   704,  704,  704,  704,  704,  685,  704,  444,  704,  704,
 /*  4720 */   408,  704,  253,  406,  411,  407,  704,  410,  704,  704,
 /*  4730 */   455,  223,  302,  221,  266,  267,  704,  460,  704,  443,
 /*  4740 */   445,  446,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4750 */   704,  704,  704,  704,  704,  704,  172,  704,  107,  415,
 /*  4760 */   454,  456,  457,  704,  704,  704,  704,  704,  704,  704,
 /*  4770 */   704,  704,  704,  704,  704,  106,  704,  704,  704,  704,
 /*  4780 */   704,  704,  704,  704,  444,  704,  704,  408,  704,  253,
 /*  4790 */   406,  411,  407,  704,  410,  704,  444,  704,  704,  408,
 /*  4800 */   704,  253,  406,  411,  407,  704,  410,  704,  704,  704,
 /*  4810 */   704,  704,  704,  455,  223,  458,  221,  266,  267,  704,
 /*  4820 */   460,  704,  443,  445,  446,  704,  415,  704,  704,  704,
 /*  4830 */   704,  704,  704,  704,  704,  704,  704,  704,  415,  172,
 /*  4840 */   704,  107,  106,  454,  456,  457,  704,  704,  704,  704,
 /*  4850 */   704,  704,  704,  704,  106,  704,  704,  704,  704,  704,
 /*  4860 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4870 */   408,  425,  253,  406,  252,  407,  428,  410,  704,  704,
 /*  4880 */   455,  250,  458,  219,  266,  267,  704,  460,  704,  443,
 /*  4890 */   445,  446,  455,  704,  704,  222,  541,  259,   73,  460,
 /*  4900 */   704,  443,  445,  446,  704,  704,  172,  704,  107,  415,
 /*  4910 */   454,  456,  457,  426,  704,  704,  704,  704,  172,  704,
 /*  4920 */   107,  704,  454,  456,  457,  436,  704,  444,  704,  704,
 /*  4930 */   408,  704,  253,  406,  411,  407,  704,  410,  704,  444,
 /*  4940 */   704,  704,  408,  704,  253,  406,  411,  407,  704,  410,
 /*  4950 */   704,  418,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  4960 */   258,  704,  437,  438,  704,  704,  704,  704,  704,  415,
 /*  4970 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  4980 */   704,  415,  704,  704,  704,  106,  704,  704,  704,  704,
 /*  4990 */   704,  704,  704,  704,  704,  704,  704,  106,  704,  704,
 /*  5000 */   704,  704,  704,  704,  704,  704,  444,  704,  704,  408,
 /*  5010 */   704,  253,  406,  411,  407,  704,  410,  704,  704,  704,
 /*  5020 */   704,  704,  704,  455,  704,  704,  222,  541,  315,   75,
 /*  5030 */   460,  704,  443,  445,  446,  455,  704,  704,  222,  541,
 /*  5040 */   312,   72,  460,  704,  443,  445,  446,  704,  415,  172,
 /*  5050 */   704,  107,  704,  454,  456,  457,  704,  704,  704,  704,
 /*  5060 */   704,  172,  704,  107,  106,  454,  456,  457,  704,  704,
 /*  5070 */   704,  704,  704,  704,  704,  704,  704,  444,  704,  704,
 /*  5080 */   408,  704,  253,  406,  411,  407,  704,  410,  704,  444,
 /*  5090 */   704,  704,  408,  704,  253,  406,  411,  407,  704,  410,
 /*  5100 */   704,  704,  455,  704,  704,  222,  541,  316,   74,  460,
 /*  5110 */   704,  443,  445,  446,  704,  704,  704,  704,  704,  415,
 /*  5120 */   704,  704,  704,  704,  704,  704,  704,  704,  172,  704,
 /*  5130 */   107,  415,  454,  456,  457,  106,  704,  704,  704,  704,
 /*  5140 */   704,  704,  704,  704,  704,  704,  704,  106,  704,  704,
 /*  5150 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5160 */   704,  704,  704,  704,  444,  704,  704,  408,  704,  253,
 /*  5170 */   406,  411,  407,  455,  410,  704,  220,  704,  704,   77,
 /*  5180 */   538,  440,  443,  445,  446,  455,  704,  704,  220,  704,
 /*  5190 */   704,   76,  538,  441,  443,  445,  446,  704,  704,  172,
 /*  5200 */   704,  107,  704,  454,  456,  457,  415,  704,  704,  704,
 /*  5210 */   704,  172,  704,  107,  704,  454,  456,  457,  704,  704,
 /*  5220 */   704,  704,  106,  704,  704,  704,  704,  704,  704,  704,
 /*  5230 */   704,  704,  704,  704,  704,  444,  704,  704,  408,  704,
 /*  5240 */   253,  406,  411,  407,  704,  410,  704,  444,  704,  704,
 /*  5250 */   408,  704,  253,  406,  411,  407,  704,  410,  704,  704,
 /*  5260 */   455,  704,  704,  222,  541,  313,  704,  460,  704,  443,
 /*  5270 */   445,  446,  704,  704,  704,  704,  704,  415,  704,  704,
 /*  5280 */   704,  704,  704,  704,  704,  704,  172,  704,  107,  415,
 /*  5290 */   454,  456,  457,  106,  704,  704,  704,  704,  704,  704,
 /*  5300 */   704,  704,  704,  704,  704,  106,  704,  704,  704,  704,
 /*  5310 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5320 */   704,  704,  444,  704,  704,  408,  704,  253,  406,  411,
 /*  5330 */   407,  455,  410,  704,  222,  541,  314,  704,  460,  704,
 /*  5340 */   443,  445,  446,  455,  704,  704,  222,  541,  317,  704,
 /*  5350 */   460,  704,  443,  445,  446,  704,  704,  172,  704,  107,
 /*  5360 */   704,  454,  456,  457,  415,  704,  704,  704,  704,  172,
 /*  5370 */   704,  107,  704,  454,  456,  457,  704,  704,  704,  704,
 /*  5380 */   106,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5390 */   704,  704,  704,  444,  704,  704,  408,  704,  253,  406,
 /*  5400 */   411,  407,  704,  410,  704,  444,  704,  704,  408,  704,
 /*  5410 */   253,  406,  411,  407,  704,  410,  704,  704,  455,  704,
 /*  5420 */   704,  222,  541,  318,  704,  460,  704,  443,  445,  446,
 /*  5430 */   704,  704,  704,  704,  704,  415,  704,  704,  704,  704,
 /*  5440 */   704,  704,  704,  704,  172,  704,  107,  415,  454,  456,
 /*  5450 */   457,  106,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5460 */   704,  704,  704,  106,  704,  704,  704,  704,  704,  704,
 /*  5470 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5480 */   704,  704,  704,  408,  704,  253,  406,  411,  407,  455,
 /*  5490 */   410,  704,  220,  704,  704,  704,  538,  442,  443,  445,
 /*  5500 */   446,  455,  704,  704,  220,  704,  704,  704,  538,  540,
 /*  5510 */   443,  445,  446,  704,  704,  172,  704,  107,  704,  454,
 /*  5520 */   456,  457,  415,  704,  704,  704,  704,  172,  704,  107,
 /*  5530 */   704,  454,  456,  457,  704,  704,  704,  704,  106,  704,
 /*  5540 */   704,  704,  704,  704,  704,  704,  704,  704,  408,  704,
 /*  5550 */   253,  406,  411,  407,  704,  410,  408,  704,  253,  406,
 /*  5560 */   411,  407,  704,  410,  704,  704,  408,  704,  253,  406,
 /*  5570 */   411,  407,  704,  410,  704,  704,  455,  704,  704,  503,
 /*  5580 */   704,  704,  704,  704,  704,  704,  704,  415,  704,  180,
 /*  5590 */   704,  704,  704,  704,  181,  415,  704,  704,  704,  704,
 /*  5600 */   704,  704,  165,  106,  107,  415,  454,  456,  457,  704,
 /*  5610 */   704,  106,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5620 */   704,  106,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5630 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5640 */   704,  455,  704,  408,  503,  253,  406,  411,  407,  455,
 /*  5650 */   410,  704,  503,  704,  704,  704,  704,  704,  704,  455,
 /*  5660 */   704,  704,  503,  704,  704,  704,  704,  173,  704,  107,
 /*  5670 */   704,  454,  456,  457,  704,  109,  704,  107,  704,  454,
 /*  5680 */   456,  457,  415,  704,  704,  126,  704,  107,  704,  454,
 /*  5690 */   456,  457,  704,  704,  704,  704,  704,  704,  106,  704,
 /*  5700 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5710 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5720 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5730 */   704,  704,  704,  704,  704,  704,  455,  704,  704,  503,
 /*  5740 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5750 */   704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
 /*  5760 */   704,  704,  127,  704,  107,  704,  454,  456,  457,
);
static $yy_lookahead = array(
 /*     0 */   151,  184,  185,  154,  155,  156,  157,  158,  159,  160,
 /*    10 */   161,    6,  201,    8,  168,  169,   10,   12,   13,   14,
 /*    20 */    15,   16,   17,   18,   19,   20,   21,   22,   23,    1,
 /*    30 */    25,   26,   27,   73,   74,   30,   32,   33,   34,   35,
 /*    40 */    36,   37,  193,  166,    0,  199,  197,  198,  171,  172,
 /*    50 */   173,  174,  175,  176,   10,  178,  179,    1,  209,   32,
 /*    60 */    33,   34,   35,   36,   37,  216,  217,  218,  219,  220,
 /*    70 */    64,  222,  223,  224,  225,    1,  227,  228,  229,  230,
 /*    80 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*    90 */   241,  242,  243,  244,   38,  246,  247,  248,  249,  250,
 /*   100 */   251,  252,  291,  254,  208,  256,  257,  258,  151,  213,
 /*   110 */   214,  154,  155,  156,  157,  158,  159,  160,  161,   75,
 /*   120 */    76,   77,  273,  188,  275,  190,  277,  278,  279,  150,
 /*   130 */   151,  152,  153,    1,  154,   79,    4,    5,  158,  159,
 /*   140 */   160,    9,  162,  163,  164,  165,   48,   49,   50,   51,
 /*   150 */   193,   53,    5,   79,  197,  198,    1,   10,  280,    4,
 /*   160 */   282,   63,  284,  285,    9,   48,  209,  105,  106,  107,
 /*   170 */   108,  109,  110,  216,  217,  218,  219,  220,   47,  222,
 /*   180 */   223,  224,  225,    1,  227,  228,  229,  230,  231,  232,
 /*   190 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*   200 */   243,  244,   57,  246,  247,  248,  249,  250,  251,  252,
 /*   210 */    10,  254,    1,  256,  257,  258,    1,  151,   86,    4,
 /*   220 */   154,  155,  156,  157,  158,  159,  160,  161,  111,   74,
 /*   230 */   273,   55,  275,   78,  277,  278,  279,  154,   48,  156,
 /*   240 */   157,  158,  159,  154,  161,   45,   46,  158,  159,   67,
 /*   250 */    55,   75,   57,   98,   99,  100,    5,    1,    1,  193,
 /*   260 */     4,    4,    2,  197,  198,    9,   90,    9,   92,   93,
 /*   270 */    75,  292,  293,  294,  295,  209,  193,  280,  299,  300,
 /*   280 */   301,  302,   87,   88,   89,   90,   28,   92,   93,   94,
 /*   290 */    79,  101,  209,  227,  228,   39,  230,  231,  232,  233,
 /*   300 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*   310 */   244,    0,  246,  247,  248,  249,  250,  251,  252,  226,
 /*   320 */   254,   10,  256,  257,  258,    1,    2,    3,    4,    1,
 /*   330 */     2,    3,    4,    9,   78,  246,  198,    9,   87,  273,
 /*   340 */    89,  275,    9,  277,  278,  279,  154,  155,  156,  157,
 /*   350 */   158,  159,  160,  161,   98,   99,  154,  102,  103,  104,
 /*   360 */   158,  159,  160,  274,   31,  163,  164,  165,  215,   45,
 /*   370 */    46,   55,   48,   45,   46,    2,    3,  281,  154,  283,
 /*   380 */    48,  298,  158,  159,  160,  193,  221,   76,   77,  197,
 /*   390 */   198,   45,   46,   69,   70,   71,   72,   69,   70,   71,
 /*   400 */    72,  209,   78,   87,   88,   89,   90,  200,   92,   93,
 /*   410 */   203,  204,  205,   40,   41,   42,   43,   44,   45,   46,
 /*   420 */    58,   59,   98,   99,  232,  101,  234,  235,  236,  237,
 /*   430 */   238,  239,  240,  241,  242,  243,  244,  221,  246,  247,
 /*   440 */    78,  215,   69,  111,  112,  296,  122,  123,  124,  125,
 /*   450 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   460 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   470 */   146,  147,  148,    1,    2,    3,    4,  115,  183,  117,
 /*   480 */   185,    9,  120,  154,  245,  156,  157,  158,  159,  154,
 /*   490 */   161,   84,   85,  158,  159,  160,  154,  155,  156,  157,
 /*   500 */   158,  159,  160,  161,    1,   10,  154,    4,  156,  157,
 /*   510 */   158,  159,    9,  161,    7,  154,    5,   45,   46,  158,
 /*   520 */   159,  160,  193,  155,  186,  187,  245,  189,  190,  154,
 /*   530 */   306,  307,  308,  158,  159,  193,  161,  272,  209,  197,
 /*   540 */   198,   69,   70,   71,   72,  193,  211,   87,  154,   89,
 /*   550 */    78,  209,  158,  159,  160,  212,   45,   46,  206,   64,
 /*   560 */   169,  209,  194,  195,  196,  197,  198,   60,   61,  155,
 /*   570 */    98,   99,  230,  231,  232,  233,  234,  235,  236,  237,
 /*   580 */   238,  239,  240,  241,  242,  243,  244,  154,  246,  247,
 /*   590 */   199,  158,  159,  160,  122,  123,  124,  125,  126,  127,
 /*   600 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   610 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*   620 */   148,    1,    2,    3,    4,  290,  182,   10,    5,    9,
 /*   630 */   154,  155,  156,  157,  158,  159,  160,  161,    5,  182,
 /*   640 */    10,  310,  154,   10,  156,  157,  158,  159,  154,  161,
 /*   650 */    80,  309,  158,  159,  160,  154,   55,   56,  264,  158,
 /*   660 */   159,  160,   45,   46,   10,   45,   46,    9,   48,  193,
 /*   670 */   261,    2,    3,  197,  198,   45,   46,    9,  154,   11,
 /*   680 */    47,  193,  158,  159,  160,  209,   28,   95,    5,   69,
 /*   690 */    70,   71,   72,  217,  218,  219,  220,  209,  222,  223,
 /*   700 */   224,  225,    1,  227,   81,  229,  230,  231,  232,  233,
 /*   710 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*   720 */   244,  101,  246,  247,    1,    2,    3,    4,    1,   75,
 /*   730 */    76,    4,    9,  154,  266,  211,    9,  158,  159,  160,
 /*   740 */   307,  308,  122,  123,  124,  125,  126,  127,  128,  129,
 /*   750 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*   760 */   140,  141,  142,  143,  144,  145,  146,  147,  148,  154,
 /*   770 */   155,  156,  157,  158,  159,  160,  161,    5,   95,  154,
 /*   780 */    79,    5,   10,  158,  159,  160,   10,   96,    5,  210,
 /*   790 */   211,   97,   69,   70,   71,   72,    1,   67,   68,    4,
 /*   800 */   276,   74,  113,  114,    9,   78,    5,    1,  193,  267,
 /*   810 */     4,   10,  197,  198,    5,    9,  268,   45,   46,   10,
 /*   820 */    82,   45,   46,  269,  209,   98,   99,  100,   45,   46,
 /*   830 */    39,  216,  217,  218,  219,  220,  211,  222,  223,  224,
 /*   840 */   225,    6,  227,    8,  229,  230,  231,  232,  233,  234,
 /*   850 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*   860 */   167,  246,  247,  154,   10,  156,  157,  158,  159,   74,
 /*   870 */   161,   75,   76,   78,   10,  112,  154,  155,  156,  157,
 /*   880 */   158,  159,  160,  161,   78,  291,  154,    5,   10,    5,
 /*   890 */   158,  159,   10,   98,   99,  100,    5,   58,   59,   45,
 /*   900 */    46,  276,  193,  154,   98,   99,  100,  158,  159,   45,
 /*   910 */    46,  202,    9,    1,   11,  193,    4,  291,  207,  197,
 /*   920 */   198,    9,    0,   45,   46,   54,   10,   45,   46,   45,
 /*   930 */    46,  209,   10,   48,    5,  214,   45,   46,  216,  217,
 /*   940 */   218,  219,  220,   39,  222,  223,  224,  225,   44,  227,
 /*   950 */    57,  229,  230,  231,  232,  233,  234,  235,  236,  237,
 /*   960 */   238,  239,  240,  241,  242,  243,  244,  154,  246,  247,
 /*   970 */    57,  158,  159,  160,   45,   46,    4,   10,  246,  154,
 /*   980 */   155,  156,  157,  158,  159,  160,  161,  102,  103,  104,
 /*   990 */    78,   75,   76,   77,   10,  246,   10,  213,   76,   77,
 /*  1000 */    10,  170,   10,    2,   10,    9,  274,   11,  180,  177,
 /*  1010 */    98,   99,   45,   46,    9,    9,   11,   11,  193,  177,
 /*  1020 */     5,    5,  197,  198,  211,   10,   10,  177,    5,   45,
 /*  1030 */    46,   45,   46,   10,  209,   45,   46,   45,   46,   45,
 /*  1040 */    46,  216,  217,  218,  219,  220,    5,  222,  223,  224,
 /*  1050 */   225,   10,  227,  177,  229,  230,  231,  232,  233,  234,
 /*  1060 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  1070 */    10,  246,  247,   10,  154,  155,  156,  157,  158,  159,
 /*  1080 */   160,  161,  177,  177,   10,  177,  154,   10,  156,  157,
 /*  1090 */   158,  159,   10,  161,  177,   10,    5,   10,  177,  286,
 /*  1100 */   177,   10,  177,  177,    2,   45,   46,    2,   45,   46,
 /*  1110 */   182,  181,  181,  193,  180,  180,  180,  197,  198,   45,
 /*  1120 */    46,  181,   45,   46,   28,  193,  182,   45,   46,  209,
 /*  1130 */    45,   46,   45,   46,   10,    2,  216,  217,  218,  219,
 /*  1140 */   220,  209,  222,  223,  224,  225,  192,  227,   10,  229,
 /*  1150 */   230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
 /*  1160 */   240,  241,  242,  243,  244,   10,  246,  247,   10,   45,
 /*  1170 */    46,   10,    2,  154,  155,  156,  157,  158,  159,  160,
 /*  1180 */   161,  192,  191,   45,   46,   10,  191,   10,  118,  297,
 /*  1190 */     5,  303,   95,    9,   38,   38,   67,   38,   10,    9,
 /*  1200 */    45,   46,   77,   45,   46,    9,   45,   46,    5,   10,
 /*  1210 */     9,   88,  193,   77,   10,    9,  197,  198,    9,    9,
 /*  1220 */    45,   46,   45,   46,    9,    9,   66,    9,  209,    9,
 /*  1230 */     9,    9,    9,    9,    9,  216,  217,  218,  219,  220,
 /*  1240 */     9,  222,  223,  224,  225,   60,  227,    9,  229,  230,
 /*  1250 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  1260 */   241,  242,  243,  244,    9,  246,  247,    9,  154,  155,
 /*  1270 */   156,  157,  158,  159,  160,  161,    9,    9,    9,    9,
 /*  1280 */   154,   10,  156,  157,  158,  159,    9,  161,    9,    9,
 /*  1290 */     9,    9,    9,    9,   66,   88,  101,   65,   10,   64,
 /*  1300 */     9,  116,   10,   91,    9,    2,   10,  193,   10,   83,
 /*  1310 */    38,  197,  198,    2,    2,    5,   83,   83,    5,  193,
 /*  1320 */    44,   59,  111,  209,    9,  111,   99,   52,   62,    9,
 /*  1330 */   216,  217,  218,  219,  220,  209,  222,  223,  224,  225,
 /*  1340 */    10,  227,    9,  229,  230,  231,  232,  233,  234,  235,
 /*  1350 */   236,  237,  238,  239,  240,  241,  242,  243,  244,   58,
 /*  1360 */   246,  247,    1,    2,    3,    4,    6,   10,    9,    7,
 /*  1370 */     9,  154,  155,  156,  157,  158,  159,  160,  161,   10,
 /*  1380 */     9,   11,   10,  154,    9,  156,  157,  158,  159,  160,
 /*  1390 */   161,   10,   10,    9,   26,   10,   10,    9,   24,   10,
 /*  1400 */    39,   10,    9,   99,   10,   44,   45,   46,   10,    9,
 /*  1410 */   193,   10,    9,  119,  197,  198,   10,    9,   31,   10,
 /*  1420 */     9,    9,  193,   10,   29,   10,  209,   10,   10,    9,
 /*  1430 */    69,   70,   71,   72,   10,  218,  219,  220,  209,  222,
 /*  1440 */   223,  224,  225,   10,  227,    9,  229,  230,  231,  232,
 /*  1450 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  1460 */   243,  244,   31,  246,  247,    9,   86,  238,   10,   10,
 /*  1470 */   121,  242,   10,    7,   98,  246,  311,  311,  105,  311,
 /*  1480 */   311,  311,  311,  122,  123,  124,  125,  126,  127,  128,
 /*  1490 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1500 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  1510 */     1,    2,    3,    4,  311,  311,  287,  288,    9,  154,
 /*  1520 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  1530 */   311,  154,  311,  156,  157,  158,  159,  160,  161,  311,
 /*  1540 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  1550 */   311,  311,  311,  311,   45,   46,  311,  311,  193,  311,
 /*  1560 */   311,  311,  197,  198,  311,  311,  311,  311,  311,  311,
 /*  1570 */   193,  311,  311,  311,  209,  311,  311,  311,   69,   70,
 /*  1580 */    71,   72,  311,  311,  219,  220,  209,  222,  223,  224,
 /*  1590 */   225,  311,  227,  311,  229,  230,  231,  232,  233,  234,
 /*  1600 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  1610 */   101,  246,  247,  311,  311,  238,  311,  311,  311,  242,
 /*  1620 */   311,  311,  311,  246,  311,  311,  311,  311,  311,  311,
 /*  1630 */   311,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1640 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1650 */   141,  142,  143,  144,  145,  146,  147,  148,    1,    2,
 /*  1660 */     3,    4,  311,  311,  311,  288,    9,  311,  311,  311,
 /*  1670 */   311,  311,  311,  311,  311,  154,  311,  156,  157,  158,
 /*  1680 */   159,  154,  161,  156,  157,  158,  159,  311,  161,  311,
 /*  1690 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  1700 */   311,  311,   45,   46,    1,    2,    3,    4,  311,  311,
 /*  1710 */   311,  311,    9,  311,  193,  311,  311,  311,  311,  311,
 /*  1720 */   193,  311,  311,  311,  311,  311,   69,   70,   71,   72,
 /*  1730 */   209,  311,  311,  311,  311,  311,  209,  311,  311,  311,
 /*  1740 */   311,  311,  311,  311,  311,  311,  311,  311,   45,   46,
 /*  1750 */   311,  311,  311,  311,  311,  311,  311,  311,  101,  311,
 /*  1760 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  1770 */    67,  311,   69,   70,   71,   72,  311,  311,  311,  122,
 /*  1780 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1790 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1800 */   143,  144,  145,  146,  147,  148,  311,  311,  311,  311,
 /*  1810 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  1820 */   311,  311,  311,  311,  311,  122,  123,  124,  125,  126,
 /*  1830 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1840 */   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
 /*  1850 */   147,  148,    1,    2,    3,    4,  311,  311,  311,  311,
 /*  1860 */     9,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  1870 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  1880 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  1890 */   311,  311,  311,  311,  311,  311,   45,   46,  311,  311,
 /*  1900 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  1910 */   311,  311,  311,  311,  311,  311,  209,  311,  311,  311,
 /*  1920 */    69,   70,   71,   72,  311,  311,  311,  311,  311,  311,
 /*  1930 */   311,  311,  311,  311,  311,  311,  311,  230,  231,  232,
 /*  1940 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  1950 */   243,  244,  311,  246,  247,  311,  311,  311,  311,  311,
 /*  1960 */   311,  311,  311,  311,  311,  311,  259,  311,  311,  262,
 /*  1970 */   263,  311,  311,  122,  123,  124,  125,  126,  127,  128,
 /*  1980 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1990 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  2000 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  311,
 /*  2010 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2020 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2030 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  193,
 /*  2040 */   311,  311,  311,  197,  198,  311,  311,  311,  311,  311,
 /*  2050 */   311,  311,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  2060 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2070 */   311,  225,  311,  227,  311,  229,  230,  231,  232,  233,
 /*  2080 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  2090 */   244,  311,  246,  247,  154,  155,  156,  157,  158,  159,
 /*  2100 */   160,  161,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2110 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2120 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2130 */   311,  311,  311,  193,  311,  289,  311,  197,  198,  311,
 /*  2140 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  209,
 /*  2150 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  311,
 /*  2160 */   311,  311,  311,  311,  311,  225,  311,  227,  311,  229,
 /*  2170 */   230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
 /*  2180 */   240,  241,  242,  243,  244,  311,  246,  247,  311,  193,
 /*  2190 */   311,  311,  311,  197,  198,  311,  311,  311,  311,  311,
 /*  2200 */   311,  311,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  2210 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  311,
 /*  2220 */   311,  311,  311,  311,  311,  311,  230,  231,  232,  233,
 /*  2230 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  2240 */   244,  311,  246,  247,  311,  311,  311,  311,  311,  193,
 /*  2250 */   311,  311,  311,  197,  198,  311,  311,  311,  262,  263,
 /*  2260 */   311,  311,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  2270 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2280 */   311,  311,  311,  311,  311,  311,  230,  231,  232,  233,
 /*  2290 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  2300 */   244,  311,  246,  247,  154,  155,  156,  157,  158,  159,
 /*  2310 */   160,  161,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2320 */   311,  311,  311,  311,  311,  311,  270,  271,  311,  311,
 /*  2330 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2340 */   311,  311,  311,  193,  311,  311,  311,  197,  198,  311,
 /*  2350 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  209,
 /*  2360 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  311,
 /*  2370 */   311,  311,  311,  311,  311,  311,  311,  227,  311,  311,
 /*  2380 */   230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
 /*  2390 */   240,  241,  242,  243,  244,  311,  246,  247,  311,  193,
 /*  2400 */   311,  311,  311,  197,  198,  311,  311,  311,  311,  311,
 /*  2410 */   311,  311,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  2420 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  311,
 /*  2430 */   311,  311,  311,  311,  311,  311,  230,  231,  232,  233,
 /*  2440 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  2450 */   244,  311,  246,  247,  311,  311,  311,  311,  311,  193,
 /*  2460 */   311,  311,  311,  197,  198,  311,  311,  311,  311,  311,
 /*  2470 */   311,  311,  311,  311,  311,  209,  311,  271,  311,  311,
 /*  2480 */   311,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  2490 */   311,  311,  311,  311,  311,  311,  230,  231,  232,  233,
 /*  2500 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  2510 */   244,  311,  246,  247,  311,  311,  311,  311,  311,  311,
 /*  2520 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  2530 */   311,  311,  311,  311,  311,  311,  209,  154,  155,  156,
 /*  2540 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  2550 */   311,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  2560 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  2570 */   243,  244,  311,  246,  247,  311,  193,  311,  311,  311,
 /*  2580 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2590 */   311,  311,  209,  154,  155,  156,  157,  158,  159,  160,
 /*  2600 */   161,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2610 */   311,  311,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  2620 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  2630 */   247,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  2640 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  311,
 /*  2650 */   311,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  2660 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2670 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  2680 */   241,  242,  243,  244,  311,  246,  247,  311,  311,  311,
 /*  2690 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  2700 */   311,  311,  311,  311,  311,  311,  209,  311,  311,  311,
 /*  2710 */   311,  311,  311,  154,  155,  156,  157,  158,  159,  160,
 /*  2720 */   161,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  2730 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  2740 */   243,  244,  311,  246,  247,  311,  311,  311,  311,  311,
 /*  2750 */   311,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  2760 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  154,
 /*  2770 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  2780 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2790 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  2800 */   241,  242,  243,  244,  311,  246,  247,  311,  193,  311,
 /*  2810 */   311,  311,  197,  198,  311,  311,  311,  311,  311,  311,
 /*  2820 */   311,  311,  311,  311,  209,  154,  155,  156,  157,  158,
 /*  2830 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  2840 */   311,  311,  311,  311,  311,  311,  231,  232,  233,  234,
 /*  2850 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  2860 */   311,  246,  247,  311,  193,  311,  311,  311,  197,  198,
 /*  2870 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2880 */   209,  311,  311,  154,  155,  156,  157,  158,  159,  160,
 /*  2890 */   161,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  2900 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  2910 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  2920 */   311,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  2930 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  311,
 /*  2940 */   311,  311,  311,  311,  311,  154,  155,  156,  157,  158,
 /*  2950 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  2960 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  2970 */   241,  242,  243,  244,  311,  246,  247,  311,  311,  311,
 /*  2980 */   311,  311,  311,  311,  193,  311,  311,  311,  197,  198,
 /*  2990 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3000 */   209,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  3010 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3020 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  3030 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  3040 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  3050 */   311,  311,  311,  311,  311,  311,  209,  154,  155,  156,
 /*  3060 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  3070 */   311,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  3080 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  3090 */   243,  244,  311,  246,  247,  311,  193,  311,  311,  311,
 /*  3100 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3110 */   311,  311,  209,  311,  311,  154,  155,  156,  157,  158,
 /*  3120 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  3130 */   311,  311,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  3140 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  3150 */   247,  311,  311,  311,  193,  311,  311,  311,  197,  198,
 /*  3160 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3170 */   209,  311,  311,  311,  311,  311,  311,  154,  155,  156,
 /*  3180 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  3190 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  3200 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  3210 */   311,  311,  311,  311,  311,  311,  193,  311,  311,  311,
 /*  3220 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3230 */   311,  311,  209,  154,  155,  156,  157,  158,  159,  160,
 /*  3240 */   161,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3250 */   311,  311,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  3260 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  3270 */   247,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  3280 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  154,
 /*  3290 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  3300 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3310 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  3320 */   241,  242,  243,  244,  311,  246,  247,  311,  193,  311,
 /*  3330 */   311,  311,  197,  198,  311,  311,  311,  311,  311,  311,
 /*  3340 */   311,  311,  311,  311,  209,  311,  311,  154,  155,  156,
 /*  3350 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  3360 */   311,  311,  311,  311,  311,  311,  231,  232,  233,  234,
 /*  3370 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  3380 */   311,  246,  247,  311,  311,  311,  193,  311,  311,  311,
 /*  3390 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3400 */   311,  311,  209,  311,  311,  311,  311,  311,  311,  154,
 /*  3410 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  3420 */   311,  311,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  3430 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  3440 */   247,  311,  311,  311,  311,  311,  311,  311,  193,  311,
 /*  3450 */   311,  311,  197,  198,  311,  311,  311,  311,  311,  311,
 /*  3460 */   311,  311,  311,  311,  209,  154,  155,  156,  157,  158,
 /*  3470 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  3480 */   311,  311,  311,  311,  311,  311,  231,  232,  233,  234,
 /*  3490 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  3500 */   311,  246,  247,  311,  193,  311,  311,  311,  197,  198,
 /*  3510 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3520 */   209,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  3530 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3540 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  3550 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  3560 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  3570 */   311,  311,  311,  311,  311,  311,  209,  311,  311,  154,
 /*  3580 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  3590 */   311,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  3600 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  3610 */   243,  244,  311,  246,  247,  311,  311,  311,  193,  311,
 /*  3620 */   311,  311,  197,  198,  311,  311,  311,  311,  311,  311,
 /*  3630 */   311,  311,  311,  311,  209,  311,  311,  311,  311,  311,
 /*  3640 */   311,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  3650 */   311,  311,  311,  311,  311,  311,  231,  232,  233,  234,
 /*  3660 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  3670 */   311,  246,  247,  311,  311,  311,  311,  311,  311,  311,
 /*  3680 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  3690 */   311,  311,  311,  311,  311,  311,  209,  154,  155,  156,
 /*  3700 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  3710 */   311,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  3720 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  3730 */   243,  244,  311,  246,  247,  311,  193,  311,  311,  311,
 /*  3740 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3750 */   311,  311,  209,  154,  155,  156,  157,  158,  159,  160,
 /*  3760 */   161,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3770 */   311,  311,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  3780 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  3790 */   247,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  3800 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  311,
 /*  3810 */   311,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  3820 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3830 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  3840 */   241,  242,  243,  244,  311,  246,  247,  311,  311,  311,
 /*  3850 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  3860 */   311,  311,  311,  311,  311,  311,  209,  311,  311,  311,
 /*  3870 */   311,  311,  311,  154,  155,  156,  157,  158,  159,  160,
 /*  3880 */   161,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  3890 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  3900 */   243,  244,  311,  246,  247,  311,  311,  311,  311,  311,
 /*  3910 */   311,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  3920 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  154,
 /*  3930 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  3940 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  3950 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  3960 */   241,  242,  243,  244,  311,  246,  247,  311,  193,  311,
 /*  3970 */   311,  311,  197,  198,  311,  311,  311,  311,  311,  311,
 /*  3980 */   311,  311,  311,  311,  209,  154,  155,  156,  157,  158,
 /*  3990 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  4000 */   311,  311,  311,  311,  311,  311,  231,  232,  233,  234,
 /*  4010 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  4020 */   311,  246,  247,  311,  193,  311,  311,  311,  197,  198,
 /*  4030 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4040 */   209,  311,  311,  154,  155,  156,  157,  158,  159,  160,
 /*  4050 */   161,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4060 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  4070 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  4080 */   311,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  4090 */   311,  311,  311,  311,  311,  311,  311,  311,  209,  311,
 /*  4100 */   311,  311,  311,  311,  311,  154,  155,  156,  157,  158,
 /*  4110 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  4120 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  4130 */   241,  242,  243,  244,  311,  246,  247,  311,  311,  311,
 /*  4140 */   311,  311,  311,  311,  193,  311,  311,  311,  197,  198,
 /*  4150 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4160 */   209,  154,  155,  156,  157,  158,  159,  160,  161,  311,
 /*  4170 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4180 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  4190 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  4200 */   193,  311,  311,  311,  197,  198,  311,  311,  311,  311,
 /*  4210 */   311,  311,  311,  311,  311,  311,  209,  154,  155,  156,
 /*  4220 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  4230 */   311,  311,  311,  311,  311,  311,  311,  311,  231,  232,
 /*  4240 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  4250 */   243,  244,  311,  246,  247,  311,  193,  311,  311,  311,
 /*  4260 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4270 */   311,  311,  209,  311,  311,  154,  155,  156,  157,  158,
 /*  4280 */   159,  160,  161,  311,  311,  311,  311,  311,  311,  311,
 /*  4290 */   311,  311,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  4300 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  4310 */   247,  311,  311,  311,  193,  311,  311,  311,  197,  198,
 /*  4320 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4330 */   209,  311,  311,  311,  311,  311,  311,  154,  155,  156,
 /*  4340 */   157,  158,  159,  160,  161,  311,  311,  311,  311,  311,
 /*  4350 */   311,  311,  231,  232,  233,  234,  235,  236,  237,  238,
 /*  4360 */   239,  240,  241,  242,  243,  244,  311,  246,  247,  311,
 /*  4370 */   311,  311,  311,  311,  311,  311,  193,  311,  311,  311,
 /*  4380 */   197,  198,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4390 */   311,  311,  209,  154,  155,  156,  157,  158,  159,  160,
 /*  4400 */   161,  151,  311,  311,  154,  311,  156,  157,  158,  159,
 /*  4410 */   160,  161,  311,  311,  231,  232,  233,  234,  235,  236,
 /*  4420 */   237,  238,  239,  240,  241,  242,  243,  244,  311,  246,
 /*  4430 */   247,  311,  193,  311,  311,  311,  197,  198,  311,  311,
 /*  4440 */   311,  311,  311,  193,  311,  311,  311,  311,  209,  311,
 /*  4450 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  209,
 /*  4460 */   311,  211,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4470 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  4480 */   241,  242,  243,  244,  311,  246,  247,  311,  311,  193,
 /*  4490 */   311,  311,  311,  197,  198,  311,  311,  247,  248,  249,
 /*  4500 */   250,  251,  252,  311,  254,  209,  256,  257,  258,  154,
 /*  4510 */   155,  156,  157,  158,  159,  160,  161,  311,  311,  311,
 /*  4520 */   311,  311,  311,  273,  311,  275,  311,  277,  278,  279,
 /*  4530 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  4540 */   244,  311,  246,  247,  311,  311,  311,  311,  193,  311,
 /*  4550 */   311,  311,  197,  198,  311,  305,  311,  311,  311,  311,
 /*  4560 */   311,  311,  151,  311,  209,  154,  311,  156,  157,  158,
 /*  4570 */   159,  311,  161,  311,  151,  311,  311,  154,  311,  156,
 /*  4580 */   157,  158,  159,  311,  161,  311,  311,  311,  311,  234,
 /*  4590 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  4600 */   311,  246,  247,  311,  193,  311,  311,  311,  311,  311,
 /*  4610 */   311,  311,  311,  311,  311,  311,  193,  311,  311,  311,
 /*  4620 */   209,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4630 */   311,  311,  209,  311,  151,  311,  311,  154,  311,  156,
 /*  4640 */   157,  158,  159,  311,  161,  311,  311,  311,  311,  311,
 /*  4650 */   311,  311,  311,  311,  311,  311,  311,  311,  247,  248,
 /*  4660 */   249,  250,  251,  252,  311,  254,  311,  256,  257,  258,
 /*  4670 */   247,  248,  249,  250,  251,  252,  193,  254,  311,  256,
 /*  4680 */   257,  258,  311,  311,  273,  311,  275,  311,  277,  278,
 /*  4690 */   279,  311,  209,  311,  311,  311,  273,  311,  275,  311,
 /*  4700 */   277,  278,  279,  311,  311,  311,  311,  311,  311,  311,
 /*  4710 */   311,  311,  311,  311,  311,  304,  311,  151,  311,  311,
 /*  4720 */   154,  311,  156,  157,  158,  159,  311,  161,  311,  311,
 /*  4730 */   247,  248,  249,  250,  251,  252,  311,  254,  311,  256,
 /*  4740 */   257,  258,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4750 */   311,  311,  311,  311,  311,  311,  273,  311,  275,  193,
 /*  4760 */   277,  278,  279,  311,  311,  311,  311,  311,  311,  311,
 /*  4770 */   311,  311,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  4780 */   311,  311,  311,  311,  151,  311,  311,  154,  311,  156,
 /*  4790 */   157,  158,  159,  311,  161,  311,  151,  311,  311,  154,
 /*  4800 */   311,  156,  157,  158,  159,  311,  161,  311,  311,  311,
 /*  4810 */   311,  311,  311,  247,  248,  249,  250,  251,  252,  311,
 /*  4820 */   254,  311,  256,  257,  258,  311,  193,  311,  311,  311,
 /*  4830 */   311,  311,  311,  311,  311,  311,  311,  311,  193,  273,
 /*  4840 */   311,  275,  209,  277,  278,  279,  311,  311,  311,  311,
 /*  4850 */   311,  311,  311,  311,  209,  311,  311,  311,  311,  311,
 /*  4860 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4870 */   154,  155,  156,  157,  158,  159,  160,  161,  311,  311,
 /*  4880 */   247,  248,  249,  250,  251,  252,  311,  254,  311,  256,
 /*  4890 */   257,  258,  247,  311,  311,  250,  251,  252,  253,  254,
 /*  4900 */   311,  256,  257,  258,  311,  311,  273,  311,  275,  193,
 /*  4910 */   277,  278,  279,  197,  311,  311,  311,  311,  273,  311,
 /*  4920 */   275,  311,  277,  278,  279,  209,  311,  151,  311,  311,
 /*  4930 */   154,  311,  156,  157,  158,  159,  311,  161,  311,  151,
 /*  4940 */   311,  311,  154,  311,  156,  157,  158,  159,  311,  161,
 /*  4950 */   311,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  4960 */   244,  311,  246,  247,  311,  311,  311,  311,  311,  193,
 /*  4970 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  4980 */   311,  193,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  4990 */   311,  311,  311,  311,  311,  311,  311,  209,  311,  311,
 /*  5000 */   311,  311,  311,  311,  311,  311,  151,  311,  311,  154,
 /*  5010 */   311,  156,  157,  158,  159,  311,  161,  311,  311,  311,
 /*  5020 */   311,  311,  311,  247,  311,  311,  250,  251,  252,  253,
 /*  5030 */   254,  311,  256,  257,  258,  247,  311,  311,  250,  251,
 /*  5040 */   252,  253,  254,  311,  256,  257,  258,  311,  193,  273,
 /*  5050 */   311,  275,  311,  277,  278,  279,  311,  311,  311,  311,
 /*  5060 */   311,  273,  311,  275,  209,  277,  278,  279,  311,  311,
 /*  5070 */   311,  311,  311,  311,  311,  311,  311,  151,  311,  311,
 /*  5080 */   154,  311,  156,  157,  158,  159,  311,  161,  311,  151,
 /*  5090 */   311,  311,  154,  311,  156,  157,  158,  159,  311,  161,
 /*  5100 */   311,  311,  247,  311,  311,  250,  251,  252,  253,  254,
 /*  5110 */   311,  256,  257,  258,  311,  311,  311,  311,  311,  193,
 /*  5120 */   311,  311,  311,  311,  311,  311,  311,  311,  273,  311,
 /*  5130 */   275,  193,  277,  278,  279,  209,  311,  311,  311,  311,
 /*  5140 */   311,  311,  311,  311,  311,  311,  311,  209,  311,  311,
 /*  5150 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5160 */   311,  311,  311,  311,  151,  311,  311,  154,  311,  156,
 /*  5170 */   157,  158,  159,  247,  161,  311,  250,  311,  311,  253,
 /*  5180 */   254,  255,  256,  257,  258,  247,  311,  311,  250,  311,
 /*  5190 */   311,  253,  254,  255,  256,  257,  258,  311,  311,  273,
 /*  5200 */   311,  275,  311,  277,  278,  279,  193,  311,  311,  311,
 /*  5210 */   311,  273,  311,  275,  311,  277,  278,  279,  311,  311,
 /*  5220 */   311,  311,  209,  311,  311,  311,  311,  311,  311,  311,
 /*  5230 */   311,  311,  311,  311,  311,  151,  311,  311,  154,  311,
 /*  5240 */   156,  157,  158,  159,  311,  161,  311,  151,  311,  311,
 /*  5250 */   154,  311,  156,  157,  158,  159,  311,  161,  311,  311,
 /*  5260 */   247,  311,  311,  250,  251,  252,  311,  254,  311,  256,
 /*  5270 */   257,  258,  311,  311,  311,  311,  311,  193,  311,  311,
 /*  5280 */   311,  311,  311,  311,  311,  311,  273,  311,  275,  193,
 /*  5290 */   277,  278,  279,  209,  311,  311,  311,  311,  311,  311,
 /*  5300 */   311,  311,  311,  311,  311,  209,  311,  311,  311,  311,
 /*  5310 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5320 */   311,  311,  151,  311,  311,  154,  311,  156,  157,  158,
 /*  5330 */   159,  247,  161,  311,  250,  251,  252,  311,  254,  311,
 /*  5340 */   256,  257,  258,  247,  311,  311,  250,  251,  252,  311,
 /*  5350 */   254,  311,  256,  257,  258,  311,  311,  273,  311,  275,
 /*  5360 */   311,  277,  278,  279,  193,  311,  311,  311,  311,  273,
 /*  5370 */   311,  275,  311,  277,  278,  279,  311,  311,  311,  311,
 /*  5380 */   209,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5390 */   311,  311,  311,  151,  311,  311,  154,  311,  156,  157,
 /*  5400 */   158,  159,  311,  161,  311,  151,  311,  311,  154,  311,
 /*  5410 */   156,  157,  158,  159,  311,  161,  311,  311,  247,  311,
 /*  5420 */   311,  250,  251,  252,  311,  254,  311,  256,  257,  258,
 /*  5430 */   311,  311,  311,  311,  311,  193,  311,  311,  311,  311,
 /*  5440 */   311,  311,  311,  311,  273,  311,  275,  193,  277,  278,
 /*  5450 */   279,  209,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5460 */   311,  311,  311,  209,  311,  311,  311,  311,  311,  311,
 /*  5470 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5480 */   311,  311,  311,  154,  311,  156,  157,  158,  159,  247,
 /*  5490 */   161,  311,  250,  311,  311,  311,  254,  255,  256,  257,
 /*  5500 */   258,  247,  311,  311,  250,  311,  311,  311,  254,  255,
 /*  5510 */   256,  257,  258,  311,  311,  273,  311,  275,  311,  277,
 /*  5520 */   278,  279,  193,  311,  311,  311,  311,  273,  311,  275,
 /*  5530 */   311,  277,  278,  279,  311,  311,  311,  311,  209,  311,
 /*  5540 */   311,  311,  311,  311,  311,  311,  311,  311,  154,  311,
 /*  5550 */   156,  157,  158,  159,  311,  161,  154,  311,  156,  157,
 /*  5560 */   158,  159,  311,  161,  311,  311,  154,  311,  156,  157,
 /*  5570 */   158,  159,  311,  161,  311,  311,  247,  311,  311,  250,
 /*  5580 */   311,  311,  311,  311,  311,  311,  311,  193,  311,  260,
 /*  5590 */   311,  311,  311,  311,  265,  193,  311,  311,  311,  311,
 /*  5600 */   311,  311,  273,  209,  275,  193,  277,  278,  279,  311,
 /*  5610 */   311,  209,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5620 */   311,  209,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5630 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5640 */   311,  247,  311,  154,  250,  156,  157,  158,  159,  247,
 /*  5650 */   161,  311,  250,  311,  311,  311,  311,  311,  311,  247,
 /*  5660 */   311,  311,  250,  311,  311,  311,  311,  273,  311,  275,
 /*  5670 */   311,  277,  278,  279,  311,  273,  311,  275,  311,  277,
 /*  5680 */   278,  279,  193,  311,  311,  273,  311,  275,  311,  277,
 /*  5690 */   278,  279,  311,  311,  311,  311,  311,  311,  209,  311,
 /*  5700 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5710 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5720 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5730 */   311,  311,  311,  311,  311,  311,  247,  311,  311,  250,
 /*  5740 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5750 */   311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
 /*  5760 */   311,  311,  273,  311,  275,  311,  277,  278,  279,
);
  const YY_SHIFT_USE_DFLT = -41;
  const YY_SHIFT_MAX = 397;
static $yy_shift_ofst = array(
 /*     0 */   362,  324,  324,  472,  620,  620,  620,  620,  620,  620,
 /*    10 */   620,  620, 1509, 1657, 1703, 1657, 1851, 1851, 1361, 1851,
 /*    20 */  1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,
 /*    30 */  1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,
 /*    40 */  1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,
 /*    50 */  1851, 1851, 1851, 1851, 1851, 1851,  912,  328,  328,  328,
 /*    60 */   256,  912,  912,  912,  912,  723,  155,  727,  806,  806,
 /*    70 */   795,  806,  912,  912,  912,  912,  912,  912,  132,  503,
 /*    80 */   503,  503,  503,  215,  215,    5,  215,  215,  215,  215,
 /*    90 */   257,  215,  215,  215,  215,  215,  257,   28,  373,   28,
 /*   100 */    28,   28,   28,   28,   28,   56,   74,   74,  211,  195,
 /*   110 */    98,    4,  182,   28,   28,   28,   28,   28,  131,  145,
 /*   120 */    27,  176,  633,  332,  260,  260,  316,  316,   62,  772,
 /*   130 */   776,  882,  885,  200,  617,  630,  854,  511,  864,  878,
 /*   140 */   967,  984,  986,  990,  992,  994,  783, 1060, 1063, 1074,
 /*   150 */  1077, 1082,  884, 1085,  891, 1087, 1124, 1138, 1155, 1158,
 /*   160 */  1161, 1175,  929, 1177,  255,  251,  507,  507, 1185,  -40,
 /*   170 */   346,  -40,  460,  460,  407,  601,  669,  258,  658,  683,
 /*   180 */   570,  592,  691,  694,  738,  791,  763,  763,  871,  893,
 /*   190 */   913,  972, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
 /*   200 */  1001, 1001, 1001, 1001, 1102, 1105, 1102, 1105, 1102, 1105,
 /*   210 */  1102, 1096, 1096, 1133, 1170, 1170, 1133, 1070, 1097,   44,
 /*   220 */   311,  916,  922,  654,  730,  730,  147,  701,    6,  190,
 /*   230 */   801,  623,  809,  117,  689,  904,  839,  495,  668,  835,
 /*   240 */   903,  996, 1005, 1006, 1015, 1016, 1023,  333, 1041, 1091,
 /*   250 */   796,  796, 1156, 1157, 1159, 1184, 1129, 1188, 1190, 1125,
 /*   260 */  1196, 1203, 1199, 1201, 1204, 1123, 1136, 1125, 1206, 1209,
 /*   270 */  1210, 1215, 1216, 1218, 1220, 1221, 1222, 1223, 1224, 1225,
 /*   280 */  1231, 1238, 1255, 1258, 1267, 1268, 1269, 1271, 1270, 1277,
 /*   290 */  1279, 1280, 1281, 1282, 1283, 1284, 1207, 1232, 1160, 1232,
 /*   300 */  1228, 1195, 1288, 1235, 1291, 1203, 1292, 1212, 1226, 1295,
 /*   310 */  1203, 1296, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1298,
 /*   320 */  1272, 1303, 1311, 1312, 1233, 1310, 1235, 1234, 1313, 1235,
 /*   330 */  1227, 1315, 1211, 1214, 1276, 1275, 1262, 1266, 1301, 1320,
 /*   340 */  1330, 1203, 1333, 1360, 1362, 1357, 1359, 1369, 1370, 1371,
 /*   350 */  1372, 1375, 1381, 1382, 1384, 1385, 1386, 1388, 1389, 1391,
 /*   360 */  1393, 1394, 1398, 1400, 1401, 1403, 1406, 1408, 1409, 1411,
 /*   370 */  1413, 1412, 1415, 1374, 1417, 1368, 1395, 1418, 1387, 1420,
 /*   380 */  1424, 1433, 1431, 1436, 1456, 1458, 1459, 1304, 1294, 1380,
 /*   390 */  1235, 1349, 1203, 1462, 1376, 1466, 1373, 1235,
);
  const YY_REDUCE_USE_DFLT = -190;
  const YY_REDUCE_MAX = 218;
static $yy_reduce_ofst = array(
 /*     0 */   -21, -151,  -43,   66,  615,  722,  825,  920, 1019, 1114,
 /*    10 */   476, 1217, 1365, 1846, 1707, 1940, 1996, 2056,  342, 2150,
 /*    20 */  2206, 2266, 2327, 2383, 2439, 2497, 2559, 2615, 2671, 2729,
 /*    30 */  2791, 2847, 2903, 2961, 3023, 3079, 3135, 3193, 3255, 3311,
 /*    40 */  3367, 3425, 3487, 3543, 3599, 3657, 3719, 3775, 3831, 3889,
 /*    50 */  3951, 4007, 4063, 4121, 4183, 4239, 4250,  192, 4296, 4355,
 /*    60 */  4411, 4423, 4483, 4566, 4633, 4716, 4645, 4776, 4788, 4855,
 /*    70 */  4926, 4938, 5013, 5084, 5096, 5171, 5242, 5254, 5329, 5394,
 /*    80 */  5402, 5412, 5489, 1229, 1377, -123,  352,   83,  329,  488,
 /*    90 */   -20,  709,  932, 1126, 1521, 1527,  202,  224,  368,  524,
 /*   100 */   625,  813,  335,  579,  433,   89,   89,  732,  394, -122,
 /*   110 */   207,  338,  361,  375,  361,  494,  749,  501, -154, -104,
 /*   120 */   -65,   96,  391, -189,  295, -183,   -3,   -3,   93,  138,
 /*   130 */   138,  138,  165,  138,  138,  138,  138,  138,  138,  138,
 /*   140 */   138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
 /*   150 */   138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
 /*   160 */   138,  138,  138,  138,  216,   -3,  153,  226,  149,  239,
 /*   170 */   138,  281,   -3,   -3,  265,  343,  414,  444,  457,  331,
 /*   180 */   409,  468,  542,  548,  554,  693,  594,  626,  711,  721,
 /*   190 */   784,  831,  832,  842,  850,  876,  905,  906,  908,  917,
 /*   200 */   921,  923,  925,  926,  828,  930,  934,  931,  935,  940,
 /*   210 */   936,  928,  944,  954,  991,  995,  989,  892,  888,
);
static $yy_default = array(
 /*     0 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    10 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    20 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    30 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    40 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    50 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    60 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    70 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    80 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*    90 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   100 */  1086, 1086, 1086, 1086, 1086,  946,  946, 1086,  927,  972,
 /*   110 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,  713,  837,
 /*   120 */  1086,  964,  816, 1011, 1086, 1086,  944,  945, 1086, 1086,
 /*   130 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   140 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   150 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   160 */  1086, 1086, 1086, 1086, 1086,  962, 1086, 1086, 1026,  895,
 /*   170 */   867,  895,  962,  960,  941, 1086, 1086,  774,  774, 1054,
 /*   180 */   932,  978,  980,  985,  936,  801, 1015, 1017,  833,  838,
 /*   190 */   840, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   200 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   210 */  1086,  774,  774, 1086, 1086, 1086, 1086, 1030, 1039,  949,
 /*   220 */   949,  949,  949, 1086,  870,  868, 1086,  898, 1086, 1086,
 /*   230 */   863,  933, 1086, 1012, 1086, 1086, 1086, 1086,  724, 1086,
 /*   240 */   734,  736,  738,  746, 1086, 1086, 1086,  794, 1086,  706,
 /*   250 */  1042, 1043,  705, 1086, 1086, 1086, 1086, 1086, 1086,  903,
 /*   260 */   950,  954, 1086,  951, 1086, 1086,  902, 1086, 1086, 1086,
 /*   270 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   280 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   290 */  1086, 1086, 1086, 1086, 1086, 1086, 1086,  849,  855,  850,
 /*   300 */   878, 1086,  900,  975, 1086,  977, 1086,  966,  992, 1086,
 /*   310 */   994, 1086,  904,  906,  905,  907,  908,  910,  909, 1086,
 /*   320 */  1086, 1086, 1086, 1086, 1086,  937,  986, 1086,  981,  979,
 /*   330 */  1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,  827,
 /*   340 */  1086,  830, 1086,  717, 1086, 1086,  727, 1086,  725,  729,
 /*   350 */  1086,  731, 1086, 1086,  740, 1086, 1086,  742, 1086, 1086,
 /*   360 */   744, 1086, 1086,  748, 1086,  752, 1086,  755, 1086,  758,
 /*   370 */  1086,  765, 1086, 1086, 1086, 1086, 1086, 1086, 1086,  791,
 /*   380 */  1086, 1086,  795,  796, 1086, 1086, 1086, 1086, 1086, 1086,
 /*   390 */  1040, 1086, 1045, 1086, 1086, 1086, 1086, 1055,  695,  696,
 /*   400 */   697,  896,  897,  698,  699,  700,  701,  702,  703,  704,
 /*   410 */   799,  706,  800,  813,  814,  829,  872,  874,  875,  876,
 /*   420 */   877,  878,  879,  880,  881,  882,  883,  884,  885,  705,
 /*   430 */   886,  887,  888,  873,  890,  891,  892,  893,  898,  899,
 /*   440 */   912,  913,  915,  916,  918,  919,  920,  894,  947,  831,
 /*   450 */   832,  952,  953,  948,  955,  956,  957,  958,  900,  959,
 /*   460 */   911,  863,  864,  866,  869,  871,  998, 1056, 1057, 1058,
 /*   470 */  1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
 /*   480 */  1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
 /*   490 */  1079, 1080, 1081, 1082, 1083, 1084, 1085,  989,  997,  865,
 /*   500 */   987,  988,  999,  949,  961,  963,  973,  974,  852,  853,
 /*   510 */   854,  856,  857, 1000, 1001, 1002,  858,  851,  860,  861,
 /*   520 */   862, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,  859,
 /*   530 */   917,  976,  965,  967,  968,  969,  970,  971,  995,  993,
 /*   540 */   914,  990,  889,  926,  921,  934,  935,  924,  925,  928,
 /*   550 */   929,  930,  931,  939,  940,  942,  943,  938,  983,  984,
 /*   560 */   982,  922,  923, 1021, 1022, 1023,  707,  708,  709,  710,
 /*   570 */   711,  715,  815, 1013, 1014, 1016, 1019, 1020, 1018,  819,
 /*   580 */   820,  821,  822,  823,  824,  825,  826,  839,  843,  844,
 /*   590 */   845,  846,  847,  841,  842,  834,  835,  836,  828,  848,
 /*   600 */   817,  818,  714,  802,  803,  804,  805,  806,  807,  808,
 /*   610 */   809,  810,  811,  812,  716,  718,  719,  720,  721,  722,
 /*   620 */   723,  726,  733,  728,  730,  732,  735,  741,  737,  743,
 /*   630 */   739,  745,  747,  749,  750,  751,  753,  754,  764,  763,
 /*   640 */   756,  757,  759,  760,  761,  762,  766,  767,  768,  769,
 /*   650 */   770,  771,  775,  776,  777,  772,  773,  778,  779,  780,
 /*   660 */   784,  785,  786,  787,  788,  790,  792,  793,  781,  789,
 /*   670 */   797,  798, 1024, 1025, 1027, 1028, 1029, 1033, 1032, 1031,
 /*   680 */  1034, 1035, 1036, 1037, 1038, 1041, 1044, 1046, 1048, 1050,
 /*   690 */  1051, 1052, 1049, 1053, 1047,
);

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
static $yyFallback = array(
);

/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
function ParseTrace(/* stream */ $TraceFILE, /* string */ $zTracePrompt){
  $this->yyTraceFILE = $TraceFILE;
  $this->yyTracePrompt = $zTracePrompt;
  if( $this->yyTraceFILE===null ) $this->yyTracePrompt = null;
  else if( $this->yyTracePrompt===null ) $this->yyTraceFILE = null;
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static $yyTokenName = array( 
  '$',             'NAME',          'INTNUM',        'APPROXNUM',   
  'DEADTOKEN',     'COMMA',         'CHARACTER',     'SET',         
  'CHAR',          'LPAR',          'RPAR',          'VARYING',     
  'VARCHAR',       'NATIONAL',      'NCHAR',         'BIT',         
  'NUMERIC',       'DECIMAL',       'DEC',           'INTEGER',     
  'SMALLINT',      'FLOAT',         'REAL',          'DOUBLE',      
  'PRECISION',     'DATE',          'TIME',          'TIMESTAMP',   
  'WITH',          'ZONE',          'INTERVAL',      'TO',          
  'YEAR',          'MONTH',         'DAY',           'HOUR',        
  'MINUTE',        'SECOND',        'PERIOD',        'DEFAULT',     
  'USER',          'CURRENT_USER',  'SESSION_USER',  'SYSTEM_USER', 
  'NULL',          'PLUS_SIGN',     'MINUS_SIGN',    'CONSTRAINT',  
  'NOT',           'UNIQUE',        'AUTO_INCREMENT',  'PRIMARY',     
  'KEY',           'REFERENCES',    'MATCH',         'FULL',        
  'PARTIAL',       'ON',            'UPDATE',        'DELETE',      
  'CASCADE',       'NO',            'ACTION',        'CHECK',       
  'OR',            'AND',           'IS',            'ASTERISK',    
  'SOLIDUS',       'STRING',        'COUNT',         'MAX',         
  'MIN',           'DISTINCT',      'ALL',           'UNION',       
  'EXCEPT',        'INTERSECT',     'SELECT',        'AS',          
  'LIMIT',         'OFFSET',        'ORDER',         'BY',          
  'ASC',           'DESC',          'FROM',          'CROSS',       
  'JOIN',          'NATURAL',       'INNER',         'OUTER',       
  'LEFT',          'RIGHT',         'USING',         'WHERE',       
  'GROUP',         'HAVING',        'VALUES',        'TABLE',       
  'CORRESPONDING',  'NULLX',         'TRUE',          'FALSE',       
  'UNKNOWN',       'OP_EQ',         'OP_GTLT',       'OP_LT',       
  'OP_GT',         'OP_LTEQ',       'OP_GTEQ',       'DEFERRABLE',  
  'INITIALLY',     'DEFERRED',      'IMMEDIATE',     'CREATE',      
  'RESTRICT',      'DROP',          'IF',            'EXISTS',      
  'INSERT',        'INTO',          'ABS',           'ACOS',        
  'ASIN',          'ATAN',          'ATAN2',         'CEIL',        
  'COS',           'COT',           'CRC32',         'DEGREES',     
  'EXP',           'FLOOR',         'FORMAT',        'LN',          
  'LOG',           'LOG2',          'LOG10',         'MOD',         
  'PI',            'POW',           'RADIANS',       'ROUND',       
  'SIGN',          'SIN',           'SQRT',          'TAN',         
  'TRUNCATE',      'error',         'query',         'query_specification',
  'sql_data_statement',  'sql_schema_statement',  'regular_identifier',  'unsigned_numeric_literal',
  'schema_name',   'unqualified_schema_name',  'identifier',    'actual_identifier',
  'column_name',   'qualified_identifier',  'table_element_list',  'table_element',
  'column_definition',  'table_constraint_definition',  'data_type',     'default_clause',
  'column_constraints',  'column_constraint_definition',  'character_set_specification',  'character_string_type',
  'national_character_string_type',  'bit_string_type',  'numeric_type',  'datetime_type',
  'interval_type',  'length',        'exact_numeric_type',  'approximate_numeric_type',
  'precision',     'scale',         'with_time_zone',  'time_precision',
  'timestamp_precision',  'time_fractional_seconds_precision',  'interval_qualifier',  'start_field', 
  'end_field',     'single_datetime_field',  'non_second_datetime_field',  'interval_leading_field_precision',
  'interval_fractional_seconds_precision',  'qualified_name',  'default_option',  'literal',     
  'signed_numeric_literal',  'general_literal',  'sign',          'constraint_name_definition',
  'column_constraint',  'constraint_attributes',  'constraint_name',  'unique_specification',
  'references_specification',  'check_constraint_definition',  'referenced_table_and_columns',  'reference_match_type',
  'referential_triggered_action',  'table_name',    'reference_column_list',  'column_name_list',
  'match_type',    'update_rule',   'delete_rule',   'referential_action',
  'search_condition',  'boolean_term',  'boolean_factor',  'boolean_test',
  'boolean_primary',  'truth_value',   'predicate',     'comparison_predicate',
  'null_predicate',  'row_value_constructor',  'comp_op',       'row_value_constructor_element',
  'row_value_constructor_list',  'row_subquery',  'value_expression',  'numeric_value_expression',
  'term',          'math_numeric_value_expression',  'factor',        'numeric_primary',
  'value_expression_primary',  'unsigned_value_specification',  'column_reference',  'scalar_subquery',
  'set_function_specification',  'unsigned_literal',  'qualifier',     'general_set_function',
  'set_function_type',  'set_quantifier',  'correlation_name',  'subquery',    
  'query_expression',  'non_join_query_expression',  'joined_table',  'non_join_query_term',
  'query_term',    'corresponding_spec',  'non_join_query_primary',  'query_primary',
  'simple_table',  'table_value_constructor',  'explicit_table',  'select_list', 
  'table_expression',  'limit_clause',  'select_sublist',  'derived_column',
  'as_clause',     'from_clause',   'where_clause',  'group_by_clause',
  'having_clause',  'orderby_clause',  'orderby_expression_list',  'orderby_expression',
  'ordering',      'table_reference',  'correlation_specification',  'derived_table',
  'derived_column_list',  'table_subquery',  'cross_join',    'qualified_join',
  'natural_join',  'join_type',     'join_specification',  'outer_join_type',
  'join_condition',  'named_columns_join',  'join_column_list',  'grouping_column_reference_list',
  'grouping_column_reference',  'table_value_constructor_list',  'corresponding_column_list',  'constraint_check_time',
  'sql_schema_definition_statement',  'sql_schema_manipulation_statement',  'table_definition',  'drop_table_statement',
  'drop_behaviour',  'drop_if_exists',  'tables_list',   'sql_data_change_statement',
  'delete_statement_searched',  'insert_statement',  'update_statement_searched',  'delete_statement_where_search',
  'insert_columns_and_source',  'insert_column_list',  'set_clause_list',  'set_clause',  
  'object_column',  'update_source',  'update_statement_where_search',
);

/* For tracing reduce actions, the names of all rules are required.
*/
static $yyRuleName = array(
 /*   0 */ "query ::= query_specification",
 /*   1 */ "query ::= sql_data_statement",
 /*   2 */ "query ::= sql_schema_statement",
 /*   3 */ "regular_identifier ::= NAME",
 /*   4 */ "unsigned_numeric_literal ::= INTNUM",
 /*   5 */ "unsigned_numeric_literal ::= APPROXNUM",
 /*   6 */ "schema_name ::= unqualified_schema_name",
 /*   7 */ "identifier ::= actual_identifier",
 /*   8 */ "actual_identifier ::= regular_identifier",
 /*   9 */ "unqualified_schema_name ::= DEADTOKEN",
 /*  10 */ "column_name ::= identifier",
 /*  11 */ "qualified_identifier ::= identifier",
 /*  12 */ "table_element_list ::= table_element",
 /*  13 */ "table_element_list ::= table_element_list COMMA table_element",
 /*  14 */ "table_element ::= column_definition",
 /*  15 */ "table_element ::= table_constraint_definition",
 /*  16 */ "table_constraint_definition ::= DEADTOKEN",
 /*  17 */ "column_definition ::= column_name data_type default_clause column_constraints",
 /*  18 */ "column_constraints ::=",
 /*  19 */ "column_constraints ::= column_constraint_definition",
 /*  20 */ "column_constraints ::= column_constraints column_constraint_definition",
 /*  21 */ "character_set_specification ::= DEADTOKEN",
 /*  22 */ "data_type ::= character_string_type",
 /*  23 */ "data_type ::= character_string_type CHARACTER SET character_set_specification",
 /*  24 */ "data_type ::= national_character_string_type",
 /*  25 */ "data_type ::= bit_string_type",
 /*  26 */ "data_type ::= numeric_type",
 /*  27 */ "data_type ::= datetime_type",
 /*  28 */ "data_type ::= interval_type",
 /*  29 */ "character_string_type ::= CHARACTER",
 /*  30 */ "character_string_type ::= CHAR",
 /*  31 */ "character_string_type ::= CHARACTER LPAR length RPAR",
 /*  32 */ "character_string_type ::= CHARACTER VARYING",
 /*  33 */ "character_string_type ::= CHARACTER VARYING LPAR length RPAR",
 /*  34 */ "character_string_type ::= CHAR VARYING",
 /*  35 */ "character_string_type ::= CHAR VARYING LPAR length RPAR",
 /*  36 */ "character_string_type ::= VARCHAR",
 /*  37 */ "character_string_type ::= VARCHAR LPAR length RPAR",
 /*  38 */ "length ::= INTNUM",
 /*  39 */ "national_character_string_type ::= NATIONAL CHARACTER",
 /*  40 */ "national_character_string_type ::= NATIONAL CHARACTER LPAR length RPAR",
 /*  41 */ "national_character_string_type ::= NATIONAL CHAR",
 /*  42 */ "national_character_string_type ::= NATIONAL CHAR LPAR length RPAR",
 /*  43 */ "national_character_string_type ::= NCHAR",
 /*  44 */ "national_character_string_type ::= NCHAR LPAR length RPAR",
 /*  45 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING",
 /*  46 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING LPAR length RPAR",
 /*  47 */ "national_character_string_type ::= NATIONAL CHAR VARYING",
 /*  48 */ "national_character_string_type ::= NATIONAL CHAR VARYING LPAR length RPAR",
 /*  49 */ "national_character_string_type ::= NCHAR VARYING",
 /*  50 */ "national_character_string_type ::= NCHAR VARYING LPAR length RPAR",
 /*  51 */ "bit_string_type ::= BIT",
 /*  52 */ "bit_string_type ::= BIT LPAR length RPAR",
 /*  53 */ "bit_string_type ::= BIT VARYING",
 /*  54 */ "bit_string_type ::= BIT VARYING LPAR length RPAR",
 /*  55 */ "numeric_type ::= exact_numeric_type",
 /*  56 */ "numeric_type ::= approximate_numeric_type",
 /*  57 */ "exact_numeric_type ::= NUMERIC",
 /*  58 */ "exact_numeric_type ::= NUMERIC LPAR precision RPAR",
 /*  59 */ "exact_numeric_type ::= NUMERIC LPAR precision COMMA scale RPAR",
 /*  60 */ "exact_numeric_type ::= DECIMAL",
 /*  61 */ "exact_numeric_type ::= DECIMAL LPAR precision RPAR",
 /*  62 */ "exact_numeric_type ::= DECIMAL LPAR precision COMMA scale RPAR",
 /*  63 */ "exact_numeric_type ::= DEC",
 /*  64 */ "exact_numeric_type ::= DEC LPAR precision RPAR",
 /*  65 */ "exact_numeric_type ::= DEC LPAR precision COMMA scale RPAR",
 /*  66 */ "exact_numeric_type ::= INTEGER",
 /*  67 */ "exact_numeric_type ::= SMALLINT",
 /*  68 */ "precision ::= INTNUM",
 /*  69 */ "scale ::= INTNUM",
 /*  70 */ "approximate_numeric_type ::= FLOAT",
 /*  71 */ "approximate_numeric_type ::= FLOAT LPAR precision RPAR",
 /*  72 */ "approximate_numeric_type ::= REAL",
 /*  73 */ "approximate_numeric_type ::= DOUBLE PRECISION",
 /*  74 */ "datetime_type ::= DATE",
 /*  75 */ "datetime_type ::= TIME with_time_zone",
 /*  76 */ "datetime_type ::= TIME LPAR time_precision RPAR with_time_zone",
 /*  77 */ "datetime_type ::= TIMESTAMP with_time_zone",
 /*  78 */ "datetime_type ::= TIMESTAMP LPAR timestamp_precision RPAR with_time_zone",
 /*  79 */ "with_time_zone ::=",
 /*  80 */ "with_time_zone ::= WITH TIME ZONE",
 /*  81 */ "time_precision ::= time_fractional_seconds_precision",
 /*  82 */ "time_fractional_seconds_precision ::= INTNUM",
 /*  83 */ "timestamp_precision ::= time_fractional_seconds_precision",
 /*  84 */ "interval_type ::= INTERVAL interval_qualifier",
 /*  85 */ "interval_qualifier ::= start_field TO end_field",
 /*  86 */ "interval_qualifier ::= single_datetime_field",
 /*  87 */ "start_field ::= non_second_datetime_field",
 /*  88 */ "start_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /*  89 */ "non_second_datetime_field ::= YEAR",
 /*  90 */ "non_second_datetime_field ::= MONTH",
 /*  91 */ "non_second_datetime_field ::= DAY",
 /*  92 */ "non_second_datetime_field ::= HOUR",
 /*  93 */ "non_second_datetime_field ::= MINUTE",
 /*  94 */ "interval_leading_field_precision ::= INTNUM",
 /*  95 */ "end_field ::= non_second_datetime_field",
 /*  96 */ "end_field ::= SECOND",
 /*  97 */ "end_field ::= SECOND LPAR interval_fractional_seconds_precision RPAR",
 /*  98 */ "interval_fractional_seconds_precision ::= INTNUM",
 /*  99 */ "single_datetime_field ::= non_second_datetime_field",
 /* 100 */ "single_datetime_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /* 101 */ "single_datetime_field ::= SECOND",
 /* 102 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision RPAR",
 /* 103 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision COMMA LPAR interval_fractional_seconds_precision RPAR RPAR",
 /* 104 */ "qualified_name ::= qualified_identifier",
 /* 105 */ "qualified_name ::= schema_name PERIOD qualified_identifier",
 /* 106 */ "default_clause ::=",
 /* 107 */ "default_clause ::= DEFAULT default_option",
 /* 108 */ "default_option ::= literal",
 /* 109 */ "default_option ::= USER",
 /* 110 */ "default_option ::= CURRENT_USER",
 /* 111 */ "default_option ::= SESSION_USER",
 /* 112 */ "default_option ::= SYSTEM_USER",
 /* 113 */ "default_option ::= NULL",
 /* 114 */ "literal ::= signed_numeric_literal",
 /* 115 */ "literal ::= general_literal",
 /* 116 */ "signed_numeric_literal ::= unsigned_numeric_literal",
 /* 117 */ "signed_numeric_literal ::= sign unsigned_numeric_literal",
 /* 118 */ "sign ::= PLUS_SIGN",
 /* 119 */ "sign ::= MINUS_SIGN",
 /* 120 */ "column_constraint_definition ::= constraint_name_definition column_constraint constraint_attributes",
 /* 121 */ "constraint_name_definition ::=",
 /* 122 */ "constraint_name_definition ::= CONSTRAINT constraint_name",
 /* 123 */ "constraint_name ::= qualified_name",
 /* 124 */ "column_constraint ::= NOT NULL",
 /* 125 */ "column_constraint ::= unique_specification",
 /* 126 */ "column_constraint ::= references_specification",
 /* 127 */ "column_constraint ::= check_constraint_definition",
 /* 128 */ "unique_specification ::= UNIQUE",
 /* 129 */ "unique_specification ::= AUTO_INCREMENT",
 /* 130 */ "unique_specification ::= PRIMARY KEY",
 /* 131 */ "references_specification ::= REFERENCES referenced_table_and_columns reference_match_type referential_triggered_action",
 /* 132 */ "referenced_table_and_columns ::= table_name",
 /* 133 */ "referenced_table_and_columns ::= table_name LPAR reference_column_list RPAR",
 /* 134 */ "table_name ::= qualified_name",
 /* 135 */ "reference_column_list ::= column_name_list",
 /* 136 */ "column_name_list ::= column_name",
 /* 137 */ "column_name_list ::= column_name_list COMMA column_name",
 /* 138 */ "reference_match_type ::=",
 /* 139 */ "reference_match_type ::= MATCH match_type",
 /* 140 */ "match_type ::= FULL",
 /* 141 */ "match_type ::= PARTIAL",
 /* 142 */ "referential_triggered_action ::=",
 /* 143 */ "referential_triggered_action ::= update_rule",
 /* 144 */ "referential_triggered_action ::= update_rule delete_rule",
 /* 145 */ "referential_triggered_action ::= delete_rule",
 /* 146 */ "referential_triggered_action ::= delete_rule update_rule",
 /* 147 */ "update_rule ::= ON UPDATE referential_action",
 /* 148 */ "delete_rule ::= ON DELETE referential_action",
 /* 149 */ "referential_action ::= CASCADE",
 /* 150 */ "referential_action ::= SET NULL",
 /* 151 */ "referential_action ::= SET DEFAULT",
 /* 152 */ "referential_action ::= NO ACTION",
 /* 153 */ "check_constraint_definition ::= CHECK LPAR search_condition RPAR",
 /* 154 */ "search_condition ::= boolean_term",
 /* 155 */ "search_condition ::= search_condition OR boolean_term",
 /* 156 */ "boolean_term ::= boolean_factor",
 /* 157 */ "boolean_term ::= boolean_term AND boolean_factor",
 /* 158 */ "boolean_factor ::= boolean_test",
 /* 159 */ "boolean_factor ::= NOT boolean_test",
 /* 160 */ "boolean_test ::= boolean_primary",
 /* 161 */ "boolean_test ::= boolean_primary IS truth_value",
 /* 162 */ "boolean_test ::= boolean_primary IS NOT truth_value",
 /* 163 */ "boolean_primary ::= predicate",
 /* 164 */ "boolean_primary ::= LPAR search_condition RPAR",
 /* 165 */ "predicate ::= comparison_predicate",
 /* 166 */ "predicate ::= null_predicate",
 /* 167 */ "comparison_predicate ::= row_value_constructor comp_op row_value_constructor",
 /* 168 */ "row_value_constructor ::= row_value_constructor_element",
 /* 169 */ "row_value_constructor ::= LPAR row_value_constructor_list RPAR",
 /* 170 */ "row_value_constructor ::= row_subquery",
 /* 171 */ "row_value_constructor_element ::= value_expression",
 /* 172 */ "value_expression ::= numeric_value_expression",
 /* 173 */ "numeric_value_expression ::= term",
 /* 174 */ "numeric_value_expression ::= math_numeric_value_expression",
 /* 175 */ "numeric_value_expression ::= numeric_value_expression sign term",
 /* 176 */ "term ::= factor",
 /* 177 */ "term ::= term ASTERISK factor",
 /* 178 */ "term ::= term SOLIDUS factor",
 /* 179 */ "factor ::= numeric_primary",
 /* 180 */ "factor ::= sign numeric_primary",
 /* 181 */ "numeric_primary ::= value_expression_primary",
 /* 182 */ "value_expression_primary ::= unsigned_value_specification",
 /* 183 */ "value_expression_primary ::= column_reference",
 /* 184 */ "value_expression_primary ::= scalar_subquery",
 /* 185 */ "value_expression_primary ::= set_function_specification",
 /* 186 */ "unsigned_value_specification ::= unsigned_literal",
 /* 187 */ "unsigned_literal ::= unsigned_numeric_literal",
 /* 188 */ "unsigned_literal ::= general_literal",
 /* 189 */ "general_literal ::= STRING",
 /* 190 */ "column_reference ::= column_name",
 /* 191 */ "column_reference ::= qualifier PERIOD column_name",
 /* 192 */ "set_function_specification ::= COUNT LPAR ASTERISK RPAR",
 /* 193 */ "set_function_specification ::= general_set_function",
 /* 194 */ "general_set_function ::= set_function_type LPAR set_quantifier value_expression RPAR",
 /* 195 */ "set_function_type ::= MAX",
 /* 196 */ "set_function_type ::= MIN",
 /* 197 */ "qualifier ::= table_name",
 /* 198 */ "qualifier ::= correlation_name",
 /* 199 */ "correlation_name ::= identifier",
 /* 200 */ "set_quantifier ::=",
 /* 201 */ "set_quantifier ::= DISTINCT",
 /* 202 */ "set_quantifier ::= ALL",
 /* 203 */ "scalar_subquery ::= subquery",
 /* 204 */ "subquery ::= LPAR query_expression RPAR",
 /* 205 */ "query_expression ::= non_join_query_expression",
 /* 206 */ "query_expression ::= joined_table",
 /* 207 */ "non_join_query_expression ::= non_join_query_term",
 /* 208 */ "non_join_query_expression ::= query_expression UNION query_term",
 /* 209 */ "non_join_query_expression ::= query_expression UNION ALL query_term",
 /* 210 */ "non_join_query_expression ::= query_expression UNION corresponding_spec query_term",
 /* 211 */ "non_join_query_expression ::= query_expression UNION ALL corresponding_spec query_term",
 /* 212 */ "non_join_query_expression ::= query_expression EXCEPT query_term",
 /* 213 */ "non_join_query_expression ::= query_expression EXCEPT ALL query_term",
 /* 214 */ "non_join_query_expression ::= query_expression EXCEPT corresponding_spec query_term",
 /* 215 */ "non_join_query_expression ::= query_expression EXCEPT ALL corresponding_spec query_term",
 /* 216 */ "non_join_query_term ::= non_join_query_primary",
 /* 217 */ "non_join_query_term ::= query_term INTERSECT query_primary",
 /* 218 */ "non_join_query_term ::= query_term INTERSECT ALL query_primary",
 /* 219 */ "non_join_query_term ::= query_term INTERSECT corresponding_spec query_primary",
 /* 220 */ "non_join_query_term ::= query_term INTERSECT ALL corresponding_spec query_primary",
 /* 221 */ "non_join_query_primary ::= simple_table",
 /* 222 */ "non_join_query_primary ::= LPAR non_join_query_expression RPAR",
 /* 223 */ "simple_table ::= query_specification",
 /* 224 */ "simple_table ::= table_value_constructor",
 /* 225 */ "simple_table ::= explicit_table",
 /* 226 */ "query_specification ::= SELECT set_quantifier select_list table_expression limit_clause",
 /* 227 */ "select_list ::= ASTERISK",
 /* 228 */ "select_list ::= select_sublist",
 /* 229 */ "select_list ::= select_list COMMA select_sublist",
 /* 230 */ "select_sublist ::= derived_column",
 /* 231 */ "select_sublist ::= qualifier PERIOD ASTERISK",
 /* 232 */ "derived_column ::= value_expression",
 /* 233 */ "derived_column ::= value_expression as_clause",
 /* 234 */ "as_clause ::= column_name",
 /* 235 */ "as_clause ::= AS column_name",
 /* 236 */ "table_expression ::= from_clause where_clause group_by_clause having_clause orderby_clause",
 /* 237 */ "limit_clause ::=",
 /* 238 */ "limit_clause ::= LIMIT INTNUM",
 /* 239 */ "limit_clause ::= LIMIT INTNUM OFFSET INTNUM",
 /* 240 */ "limit_clause ::= LIMIT INTNUM COMMA INTNUM",
 /* 241 */ "orderby_clause ::=",
 /* 242 */ "orderby_clause ::= ORDER BY orderby_expression_list",
 /* 243 */ "orderby_expression_list ::= orderby_expression",
 /* 244 */ "orderby_expression_list ::= orderby_expression_list COMMA orderby_expression",
 /* 245 */ "orderby_expression ::= value_expression ordering",
 /* 246 */ "ordering ::=",
 /* 247 */ "ordering ::= ASC",
 /* 248 */ "ordering ::= DESC",
 /* 249 */ "from_clause ::= FROM table_reference",
 /* 250 */ "from_clause ::= table_reference COMMA table_reference",
 /* 251 */ "table_reference ::= table_name",
 /* 252 */ "table_reference ::= table_name correlation_specification",
 /* 253 */ "table_reference ::= derived_table correlation_specification",
 /* 254 */ "table_reference ::= joined_table",
 /* 255 */ "correlation_specification ::= correlation_name",
 /* 256 */ "correlation_specification ::= AS correlation_name",
 /* 257 */ "correlation_specification ::= correlation_name LPAR derived_column_list RPAR",
 /* 258 */ "correlation_specification ::= AS correlation_name LPAR derived_column_list RPAR",
 /* 259 */ "derived_column_list ::= column_name_list",
 /* 260 */ "derived_table ::= table_subquery",
 /* 261 */ "table_subquery ::= subquery",
 /* 262 */ "joined_table ::= cross_join",
 /* 263 */ "joined_table ::= qualified_join",
 /* 264 */ "joined_table ::= LPAR joined_table RPAR",
 /* 265 */ "cross_join ::= table_reference CROSS JOIN table_reference",
 /* 266 */ "qualified_join ::= table_reference natural_join join_type JOIN table_reference join_specification",
 /* 267 */ "natural_join ::=",
 /* 268 */ "natural_join ::= NATURAL",
 /* 269 */ "join_type ::=",
 /* 270 */ "join_type ::= INNER",
 /* 271 */ "join_type ::= outer_join_type",
 /* 272 */ "join_type ::= outer_join_type OUTER",
 /* 273 */ "join_type ::= UNION",
 /* 274 */ "outer_join_type ::= LEFT",
 /* 275 */ "outer_join_type ::= RIGHT",
 /* 276 */ "outer_join_type ::= FULL",
 /* 277 */ "join_specification ::=",
 /* 278 */ "join_specification ::= join_condition",
 /* 279 */ "join_specification ::= named_columns_join",
 /* 280 */ "join_condition ::= ON search_condition",
 /* 281 */ "named_columns_join ::= USING LPAR join_column_list RPAR",
 /* 282 */ "join_column_list ::= column_name_list",
 /* 283 */ "where_clause ::=",
 /* 284 */ "where_clause ::= WHERE search_condition",
 /* 285 */ "group_by_clause ::=",
 /* 286 */ "group_by_clause ::= GROUP BY grouping_column_reference_list",
 /* 287 */ "grouping_column_reference_list ::= grouping_column_reference",
 /* 288 */ "grouping_column_reference_list ::= grouping_column_reference_list COMMA grouping_column_reference",
 /* 289 */ "grouping_column_reference ::= column_reference",
 /* 290 */ "having_clause ::=",
 /* 291 */ "having_clause ::= HAVING search_condition",
 /* 292 */ "table_value_constructor ::= VALUES table_value_constructor_list",
 /* 293 */ "table_value_constructor_list ::= row_value_constructor",
 /* 294 */ "explicit_table ::= TABLE table_name",
 /* 295 */ "query_term ::= non_join_query_term",
 /* 296 */ "query_term ::= joined_table",
 /* 297 */ "corresponding_spec ::= CORRESPONDING",
 /* 298 */ "corresponding_spec ::= CORRESPONDING BY LPAR corresponding_column_list RPAR",
 /* 299 */ "corresponding_column_list ::= column_name_list",
 /* 300 */ "query_primary ::= non_join_query_primary",
 /* 301 */ "query_primary ::= joined_table",
 /* 302 */ "row_value_constructor_list ::= row_value_constructor_element",
 /* 303 */ "row_value_constructor_list ::= row_value_constructor_list COMMA row_value_constructor_element",
 /* 304 */ "row_subquery ::= NULLX",
 /* 305 */ "truth_value ::= TRUE",
 /* 306 */ "truth_value ::= FALSE",
 /* 307 */ "truth_value ::= UNKNOWN",
 /* 308 */ "comp_op ::= OP_EQ",
 /* 309 */ "comp_op ::= OP_GTLT",
 /* 310 */ "comp_op ::= OP_LT",
 /* 311 */ "comp_op ::= OP_GT",
 /* 312 */ "comp_op ::= OP_LTEQ",
 /* 313 */ "comp_op ::= OP_GTEQ",
 /* 314 */ "null_predicate ::= column_reference IS NULLX",
 /* 315 */ "null_predicate ::= column_reference IS NOT NULLX",
 /* 316 */ "constraint_attributes ::=",
 /* 317 */ "constraint_attributes ::= constraint_check_time",
 /* 318 */ "constraint_attributes ::= constraint_check_time DEFERRABLE",
 /* 319 */ "constraint_attributes ::= constraint_check_time NOT DEFERRABLE",
 /* 320 */ "constraint_attributes ::= DEFERRABLE",
 /* 321 */ "constraint_attributes ::= DEFERRABLE constraint_check_time",
 /* 322 */ "constraint_attributes ::= NOT DEFERRABLE",
 /* 323 */ "constraint_attributes ::= NOT DEFERRABLE constraint_check_time",
 /* 324 */ "constraint_check_time ::= INITIALLY DEFERRED",
 /* 325 */ "constraint_check_time ::= INITIALLY IMMEDIATE",
 /* 326 */ "sql_schema_statement ::= sql_schema_definition_statement",
 /* 327 */ "sql_schema_statement ::= sql_schema_manipulation_statement",
 /* 328 */ "sql_schema_definition_statement ::= table_definition",
 /* 329 */ "table_definition ::= CREATE TABLE table_name LPAR table_element_list RPAR",
 /* 330 */ "sql_schema_manipulation_statement ::= drop_table_statement",
 /* 331 */ "drop_behaviour ::=",
 /* 332 */ "drop_behaviour ::= CASCADE",
 /* 333 */ "drop_behaviour ::= RESTRICT",
 /* 334 */ "drop_table_statement ::= DROP TABLE drop_if_exists tables_list drop_behaviour",
 /* 335 */ "drop_if_exists ::=",
 /* 336 */ "drop_if_exists ::= IF EXISTS",
 /* 337 */ "tables_list ::= table_name",
 /* 338 */ "tables_list ::= tables_list COMMA table_name",
 /* 339 */ "sql_data_statement ::= sql_data_change_statement",
 /* 340 */ "sql_data_change_statement ::= delete_statement_searched",
 /* 341 */ "sql_data_change_statement ::= insert_statement",
 /* 342 */ "sql_data_change_statement ::= update_statement_searched",
 /* 343 */ "delete_statement_searched ::= DELETE FROM table_name delete_statement_where_search",
 /* 344 */ "delete_statement_where_search ::=",
 /* 345 */ "delete_statement_where_search ::= WHERE search_condition",
 /* 346 */ "insert_statement ::= INSERT INTO table_name insert_columns_and_source",
 /* 347 */ "insert_columns_and_source ::= LPAR insert_column_list RPAR query_expression",
 /* 348 */ "insert_columns_and_source ::= query_expression",
 /* 349 */ "insert_columns_and_source ::= DEFAULT VALUES",
 /* 350 */ "insert_column_list ::= column_name_list",
 /* 351 */ "set_clause_list ::= set_clause_list COMMA set_clause",
 /* 352 */ "set_clause_list ::= set_clause",
 /* 353 */ "set_clause ::= object_column OP_EQ update_source",
 /* 354 */ "object_column ::= column_name",
 /* 355 */ "update_source ::= value_expression",
 /* 356 */ "update_source ::= NULL",
 /* 357 */ "update_source ::= DEFAULT",
 /* 358 */ "update_statement_searched ::= UPDATE table_name SET set_clause_list update_statement_where_search",
 /* 359 */ "update_statement_where_search ::=",
 /* 360 */ "update_statement_where_search ::= WHERE search_condition",
 /* 361 */ "math_numeric_value_expression ::= ABS LPAR numeric_value_expression RPAR",
 /* 362 */ "math_numeric_value_expression ::= ACOS LPAR numeric_value_expression RPAR",
 /* 363 */ "math_numeric_value_expression ::= ASIN LPAR numeric_value_expression RPAR",
 /* 364 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression RPAR",
 /* 365 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 366 */ "math_numeric_value_expression ::= ATAN2 LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 367 */ "math_numeric_value_expression ::= CEIL LPAR numeric_value_expression RPAR",
 /* 368 */ "math_numeric_value_expression ::= COS LPAR numeric_value_expression RPAR",
 /* 369 */ "math_numeric_value_expression ::= COT LPAR numeric_value_expression RPAR",
 /* 370 */ "math_numeric_value_expression ::= CRC32 LPAR numeric_value_expression RPAR",
 /* 371 */ "math_numeric_value_expression ::= DEGREES LPAR numeric_value_expression RPAR",
 /* 372 */ "math_numeric_value_expression ::= EXP LPAR numeric_value_expression RPAR",
 /* 373 */ "math_numeric_value_expression ::= FLOOR LPAR numeric_value_expression RPAR",
 /* 374 */ "math_numeric_value_expression ::= FORMAT LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 375 */ "math_numeric_value_expression ::= LN LPAR numeric_value_expression RPAR",
 /* 376 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression RPAR",
 /* 377 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 378 */ "math_numeric_value_expression ::= LOG2 LPAR numeric_value_expression RPAR",
 /* 379 */ "math_numeric_value_expression ::= LOG10 LPAR numeric_value_expression RPAR",
 /* 380 */ "math_numeric_value_expression ::= MOD LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 381 */ "math_numeric_value_expression ::= PI LPAR RPAR",
 /* 382 */ "math_numeric_value_expression ::= POW LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 383 */ "math_numeric_value_expression ::= RADIANS LPAR numeric_value_expression RPAR",
 /* 384 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression RPAR",
 /* 385 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 386 */ "math_numeric_value_expression ::= SIGN LPAR numeric_value_expression RPAR",
 /* 387 */ "math_numeric_value_expression ::= SIN LPAR numeric_value_expression RPAR",
 /* 388 */ "math_numeric_value_expression ::= SQRT LPAR numeric_value_expression RPAR",
 /* 389 */ "math_numeric_value_expression ::= TAN LPAR numeric_value_expression RPAR",
 /* 390 */ "math_numeric_value_expression ::= TRUNCATE LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
);

/*
** This function returns the symbolic name associated with a token
** value.
*/
function ParseTokenName(/* int */ $tokenType){
  if (isset(self::$yyTokenName[$tokenType]))
    return self::$yyTokenName[$tokenType];
  return "Unknown";
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
private function yy_destructor($yymajor, $yypminor){
  switch( $yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
private function yy_pop_parser_stack() {
  if ($this->yyidx < 0) return 0;
  $yytos = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE ) {
    fprintf($this->yyTraceFILE,"%sPopping %s\n",
      $this->yyTracePrompt,
      self::$yyTokenName[$yytos->major]);
  }
  $this->yy_destructor( $yytos->major, $yytos->minor);
  unset($this->yystack[$this->yyidx]);
  $this->yyidx--;
  return $yytos->major;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
function __destruct()
{
  while($this->yyidx >= 0)
    $this->yy_pop_parser_stack();
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_shift_action(
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
  $stateno = $this->yystack[$this->yyidx]->stateno;
 
  if( $stateno>self::YY_SHIFT_MAX || 
      ($i = self::$yy_shift_ofst[$stateno])==self::YY_SHIFT_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    if( $iLookAhead>0 ){
      if (isset(self::$yyFallback[$iLookAhead]) &&
        ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n",
             $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], 
             self::$yyTokenName[$iFallback]);
        }
        return $this->yy_find_shift_action($iFallback);
      }
      {
        $j = $i - $iLookAhead + self::YYWILDCARD;
        if( $j>=0 && $j<count(self::$yy_action) && self::$yy_lookahead[$j]==self::YYWILDCARD ){
          if( $this->yyTraceFILE ){
            fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n",
               $this->yyTracePrompt, self::$yyTokenName[$iLookAhead],
               self::$yyTokenName[self::YYWILDCARD]);
          }
          return self::$yy_action[$j];
        }
      }
    }
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_reduce_action(
  $stateno,              /* Current state number */
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
 
  if( $stateno>self::YY_REDUCE_MAX ||
      ($i = self::$yy_reduce_ofst[$stateno])==self::YY_REDUCE_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Perform a shift action.
*/
private function yy_shift(
  $yyNewState,               /* The new state to shift in */
  $yyMajor,                  /* The major token to shift in */
  $yypMinor         /* Pointer ot the minor token to shift in */
){
  $this->yyidx++;
  if (isset($this->yystack[$this->yyidx])) {
    $yytos = $this->yystack[$this->yyidx];
  } else {
    $yytos = new ParseyyStackEntry;
    $this->yystack[$this->yyidx] = $yytos;
  }
  $yytos->stateno = $yyNewState;
  $yytos->major = $yyMajor;
  $yytos->minor = $yypMinor;
  if( $this->yyTraceFILE) {
    fprintf($this->yyTraceFILE,"%sShift %d\n",$this->yyTracePrompt,$yyNewState);
    fprintf($this->yyTraceFILE,"%sStack:",$this->yyTracePrompt);
    for ($i = 1; $i <= $this->yyidx; $i++) {
      $ent = $this->yystack[$i];
      fprintf($this->yyTraceFILE," %s",self::$yyTokenName[$ent->major]);
    }
    fprintf($this->yyTraceFILE,"\n");
  }
}

private function __overflow_dead_code() {
  /* if the stack can overflow (it can't in the PHP implementation)
   * Then the following code would be emitted */
}

/* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule 
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
static $yyRuleInfo = array(
  150, 1,
  150, 1,
  150, 1,
  154, 1,
  155, 1,
  155, 1,
  156, 1,
  158, 1,
  159, 1,
  157, 1,
  160, 1,
  161, 1,
  162, 1,
  162, 3,
  163, 1,
  163, 1,
  165, 1,
  164, 4,
  168, 0,
  168, 1,
  168, 2,
  170, 1,
  166, 1,
  166, 4,
  166, 1,
  166, 1,
  166, 1,
  166, 1,
  166, 1,
  171, 1,
  171, 1,
  171, 4,
  171, 2,
  171, 5,
  171, 2,
  171, 5,
  171, 1,
  171, 4,
  177, 1,
  172, 2,
  172, 5,
  172, 2,
  172, 5,
  172, 1,
  172, 4,
  172, 3,
  172, 6,
  172, 3,
  172, 6,
  172, 2,
  172, 5,
  173, 1,
  173, 4,
  173, 2,
  173, 5,
  174, 1,
  174, 1,
  178, 1,
  178, 4,
  178, 6,
  178, 1,
  178, 4,
  178, 6,
  178, 1,
  178, 4,
  178, 6,
  178, 1,
  178, 1,
  180, 1,
  181, 1,
  179, 1,
  179, 4,
  179, 1,
  179, 2,
  175, 1,
  175, 2,
  175, 5,
  175, 2,
  175, 5,
  182, 0,
  182, 3,
  183, 1,
  185, 1,
  184, 1,
  176, 2,
  186, 3,
  186, 1,
  187, 1,
  187, 4,
  190, 1,
  190, 1,
  190, 1,
  190, 1,
  190, 1,
  191, 1,
  188, 1,
  188, 1,
  188, 4,
  192, 1,
  189, 1,
  189, 4,
  189, 1,
  189, 4,
  189, 8,
  193, 1,
  193, 3,
  167, 0,
  167, 2,
  194, 1,
  194, 1,
  194, 1,
  194, 1,
  194, 1,
  194, 1,
  195, 1,
  195, 1,
  196, 1,
  196, 2,
  198, 1,
  198, 1,
  169, 3,
  199, 0,
  199, 2,
  202, 1,
  200, 2,
  200, 1,
  200, 1,
  200, 1,
  203, 1,
  203, 1,
  203, 2,
  204, 4,
  206, 1,
  206, 4,
  209, 1,
  210, 1,
  211, 1,
  211, 3,
  207, 0,
  207, 2,
  212, 1,
  212, 1,
  208, 0,
  208, 1,
  208, 2,
  208, 1,
  208, 2,
  213, 3,
  214, 3,
  215, 1,
  215, 2,
  215, 2,
  215, 2,
  205, 4,
  216, 1,
  216, 3,
  217, 1,
  217, 3,
  218, 1,
  218, 2,
  219, 1,
  219, 3,
  219, 4,
  220, 1,
  220, 3,
  222, 1,
  222, 1,
  223, 3,
  225, 1,
  225, 3,
  225, 1,
  227, 1,
  230, 1,
  231, 1,
  231, 1,
  231, 3,
  232, 1,
  232, 3,
  232, 3,
  234, 1,
  234, 2,
  235, 1,
  236, 1,
  236, 1,
  236, 1,
  236, 1,
  237, 1,
  241, 1,
  241, 1,
  197, 1,
  238, 1,
  238, 3,
  240, 4,
  240, 1,
  243, 5,
  244, 1,
  244, 1,
  242, 1,
  242, 1,
  246, 1,
  245, 0,
  245, 1,
  245, 1,
  239, 1,
  247, 3,
  248, 1,
  248, 1,
  249, 1,
  249, 3,
  249, 4,
  249, 4,
  249, 5,
  249, 3,
  249, 4,
  249, 4,
  249, 5,
  251, 1,
  251, 3,
  251, 4,
  251, 4,
  251, 5,
  254, 1,
  254, 3,
  256, 1,
  256, 1,
  256, 1,
  151, 5,
  259, 1,
  259, 1,
  259, 3,
  262, 1,
  262, 3,
  263, 1,
  263, 2,
  264, 1,
  264, 2,
  260, 5,
  261, 0,
  261, 2,
  261, 4,
  261, 4,
  269, 0,
  269, 3,
  270, 1,
  270, 3,
  271, 2,
  272, 0,
  272, 1,
  272, 1,
  265, 2,
  265, 3,
  273, 1,
  273, 2,
  273, 2,
  273, 1,
  274, 1,
  274, 2,
  274, 4,
  274, 5,
  276, 1,
  275, 1,
  277, 1,
  250, 1,
  250, 1,
  250, 3,
  278, 4,
  279, 6,
  280, 0,
  280, 1,
  281, 0,
  281, 1,
  281, 1,
  281, 2,
  281, 1,
  283, 1,
  283, 1,
  283, 1,
  282, 0,
  282, 1,
  282, 1,
  284, 2,
  285, 4,
  286, 1,
  266, 0,
  266, 2,
  267, 0,
  267, 3,
  287, 1,
  287, 3,
  288, 1,
  268, 0,
  268, 2,
  257, 2,
  289, 1,
  258, 2,
  252, 1,
  252, 1,
  253, 1,
  253, 5,
  290, 1,
  255, 1,
  255, 1,
  228, 1,
  228, 3,
  229, 1,
  221, 1,
  221, 1,
  221, 1,
  226, 1,
  226, 1,
  226, 1,
  226, 1,
  226, 1,
  226, 1,
  224, 3,
  224, 4,
  201, 0,
  201, 1,
  201, 2,
  201, 3,
  201, 1,
  201, 2,
  201, 2,
  201, 3,
  291, 2,
  291, 2,
  153, 1,
  153, 1,
  292, 1,
  294, 6,
  293, 1,
  296, 0,
  296, 1,
  296, 1,
  295, 5,
  297, 0,
  297, 2,
  298, 1,
  298, 3,
  152, 1,
  299, 1,
  299, 1,
  299, 1,
  300, 4,
  303, 0,
  303, 2,
  301, 4,
  304, 4,
  304, 1,
  304, 2,
  305, 1,
  306, 3,
  306, 1,
  307, 3,
  308, 1,
  309, 1,
  309, 1,
  309, 1,
  302, 5,
  310, 0,
  310, 2,
  233, 4,
  233, 4,
  233, 4,
  233, 4,
  233, 6,
  233, 6,
  233, 4,
  233, 4,
  233, 4,
  233, 4,
  233, 4,
  233, 4,
  233, 4,
  233, 6,
  233, 4,
  233, 4,
  233, 6,
  233, 4,
  233, 4,
  233, 6,
  233, 3,
  233, 6,
  233, 4,
  233, 4,
  233, 6,
  233, 4,
  233, 4,
  233, 4,
  233, 4,
  233, 6,
);

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
private function yy_reduce(
  $yyruleno                 /* Number of the rule by which to reduce */
){
  $yygoto = 0;                     /* The next state */
  $yyact = 0;                      /* The next action */
  $yygotominor = null;        /* The LHS of the rule reduced */
  $yymsp = null;            /* The top of the parser's stack */
  $yysize = 0;                     /* Amount to pop the stack */
  
  $yymsp = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
    fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt,
      self::$yyRuleName[$yyruleno]);
  }

  switch( $yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
#line 8 "sql.y"
{
		$this->yystack[$this->yyidx + 0]->minor->actions[] = new qpAction_returnRelation($this->yystack[$this->yyidx + 0]->minor->last_relation_id);		
		$yygotominor=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 2584 "sql.php"
        break;
      case 1:
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      case 10:
      case 11:
      case 14:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 38:
      case 55:
      case 56:
      case 104:
      case 125:
      case 134:
      case 154:
      case 156:
      case 158:
      case 160:
      case 163:
      case 165:
      case 166:
      case 168:
      case 171:
      case 172:
      case 173:
      case 174:
      case 176:
      case 179:
      case 181:
      case 182:
      case 183:
      case 186:
      case 187:
      case 188:
      case 193:
      case 197:
      case 199:
      case 205:
      case 207:
      case 216:
      case 221:
      case 224:
      case 230:
      case 232:
      case 254:
      case 255:
      case 256:
      case 263:
      case 271:
      case 280:
      case 289:
      case 292:
      case 293:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 326:
      case 327:
      case 330:
      case 339:
      case 340:
      case 341:
      case 342:
      case 345:
      case 350:
      case 355:
      case 360:
#line 12 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;}
#line 2666 "sql.php"
        break;
      case 4:
#line 20 "sql.y"
{$yygotominor = new filter_StaticIntnum($this->yystack[$this->yyidx + 0]->minor->value);}
#line 2671 "sql.php"
        break;
      case 12:
      case 302:
      case 352:
#line 41 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;
	}
#line 2681 "sql.php"
        break;
      case 13:
#line 45 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2689 "sql.php"
        break;
      case 17:
#line 55 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->name = $this->yystack[$this->yyidx + -3]->minor->value;
		if(isset($this->yystack[$this->yyidx + 0]->minor)){
			foreach($this->yystack[$this->yyidx + 0]->minor as $constraint){
				if(strtoupper($constraint)=="AUTO_INCREMENT")
					$this->yystack[$this->yyidx + -2]->minor->autoinc=1;
					$this->yystack[$this->yyidx + -2]->minor->is_unique=1;
			}
		}
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2704 "sql.php"
        break;
      case 19:
      case 337:
#line 68 "sql.y"
{$yygotominor = Array(); $yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;}
#line 2710 "sql.php"
        break;
      case 20:
#line 69 "sql.y"
{$this->yystack[$this->yyidx + -1]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 2715 "sql.php"
        break;
      case 31:
#line 92 "sql.y"
{$yygotominor = new PHPFDB_char(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 2720 "sql.php"
        break;
      case 36:
#line 97 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, 666);}
#line 2725 "sql.php"
        break;
      case 37:
#line 98 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 2730 "sql.php"
        break;
      case 66:
#line 132 "sql.y"
{$yygotominor = new PHPFDB_int();}
#line 2735 "sql.php"
        break;
      case 70:
#line 139 "sql.y"
{$yygotominor = new PHPFDB_float();}
#line 2740 "sql.php"
        break;
      case 118:
#line 213 "sql.y"
{$yygotominor="plus_sign";}
#line 2745 "sql.php"
        break;
      case 119:
#line 214 "sql.y"
{$yygotominor="minus_sign";}
#line 2750 "sql.php"
        break;
      case 120:
      case 169:
#line 220 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 2756 "sql.php"
        break;
      case 129:
      case 234:
      case 235:
      case 274:
      case 275:
      case 276:
#line 233 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2766 "sql.php"
        break;
      case 136:
#line 245 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor->value;
	}
#line 2774 "sql.php"
        break;
      case 137:
#line 249 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor->value;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2782 "sql.php"
        break;
      case 155:
#line 283 "sql.y"
{
		$yygotominor= new filter_OR($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2789 "sql.php"
        break;
      case 157:
#line 288 "sql.y"
{
		$yygotominor= new filter_AND($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2796 "sql.php"
        break;
      case 167:
#line 305 "sql.y"
{
		$yygotominor= new filter_COMP($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2803 "sql.php"
        break;
      case 175:
#line 324 "sql.y"
{ ECHO "TODOTODOTODOTODO";}
#line 2808 "sql.php"
        break;
      case 180:
#line 331 "sql.y"
{$yygotominor= new filter_UnaryMathFunction($this->yystack[$this->yyidx + -1]->minor); $yygotominor->expression=$this->yystack[$this->yyidx + 0]->minor;}
#line 2813 "sql.php"
        break;
      case 185:
#line 339 "sql.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor;}
#line 2818 "sql.php"
        break;
      case 189:
#line 354 "sql.y"
{
	$yygotominor = new filter_StaticString(substr($this->yystack[$this->yyidx + 0]->minor->value, 1, strlen($this->yystack[$this->yyidx + 0]->minor->value)-2));
}
#line 2825 "sql.php"
        break;
      case 190:
      case 354:
#line 386 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value);}
#line 2831 "sql.php"
        break;
      case 191:
#line 387 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value, $this->yystack[$this->yyidx + -2]->minor->value);}
#line 2836 "sql.php"
        break;
      case 192:
#line 389 "sql.y"
{$yygotominor = new filter_SetFunction("count_asterisk"); $yygotominor->expression = new filter_EmptyExpression();}
#line 2841 "sql.php"
        break;
      case 194:
#line 392 "sql.y"
{$this->yystack[$this->yyidx + -4]->minor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor=$this->yystack[$this->yyidx + -4]->minor;}
#line 2846 "sql.php"
        break;
      case 195:
#line 394 "sql.y"
{$yygotominor = new filter_SetFunction("max");}
#line 2851 "sql.php"
        break;
      case 196:
#line 395 "sql.y"
{$yygotominor = new filter_SetFunction("min");}
#line 2856 "sql.php"
        break;
      case 200:
      case 359:
#line 402 "sql.y"
{$yygotominor=NULL;}
#line 2862 "sql.php"
        break;
      case 201:
#line 403 "sql.y"
{$yygotominor="DISTINCT";}
#line 2867 "sql.php"
        break;
      case 202:
#line 404 "sql.y"
{$yygotominor="ALL";}
#line 2872 "sql.php"
        break;
      case 226:
#line 441 "sql.y"
{
		$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		
		if(isset($this->yystack[$this->yyidx + -1]->minor->filter)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_filterResults($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->filter);
		}
		$total_group = false;
		$expression_columns = Array();	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection))
			foreach($this->yystack[$this->yyidx + -2]->minor->columns_projection as $p){
				if($p->is_set_function) {
					$total_group=true;
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				} elseif($p->is_math_function) {
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				}
			}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $this->yystack[$this->yyidx + -1]->minor->grouping_columns);
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
		} elseif(!(empty($expression_columns))) {
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $expression_columns);
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->grouping_columns, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
			$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		} else {
			if($total_group){
				$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, array(), $this->yystack[$this->yyidx + -2]->minor->columns_projection);
				$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
			}
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$indexes = Array();
			for($i=0;$i<count($this->yystack[$this->yyidx + -2]->minor->columns_projection);$i++)
				$indexes[] = $i;
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_selectColumnsByIndexes($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $indexes);
		}			
		if($this->yystack[$this->yyidx + -3]->minor=="DISTINCT")
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_distinctValues($this->yystack[$this->yyidx + -1]->minor->last_relation_id);
		elseif($this->yystack[$this->yyidx + -3]->minor=="ALL"){
		}			
		if(isset($this->yystack[$this->yyidx + 0]->minor))
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_limitRows($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + 0]->minor->rows, $this->yystack[$this->yyidx + 0]->minor->offset);
		$yygotominor=$this->yystack[$this->yyidx + -1]->minor;
	}
#line 2926 "sql.php"
        break;
      case 227:
#line 492 "sql.y"
{$yygotominor->columns_projection = NULL;$yygotominor->set_functions=NULL;}
#line 2931 "sql.php"
        break;
      case 228:
#line 493 "sql.y"
{
		$yygotominor->columns_projection = Array();
		$yygotominor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;

	}
#line 2940 "sql.php"
        break;
      case 229:
#line 498 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2948 "sql.php"
        break;
      case 233:
#line 507 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor; $yygotominor->alias=$this->yystack[$this->yyidx + 0]->minor;}
#line 2953 "sql.php"
        break;
      case 236:
#line 512 "sql.y"
{
		$yygotominor->actions = $this->yystack[$this->yyidx + -4]->minor->actions;
		if(isset($this->yystack[$this->yyidx + -2]->minor)&&isset($this->yystack[$this->yyidx + -2]->minor->grouping_columns))
			$yygotominor->grouping_columns = $this->yystack[$this->yyidx + -2]->minor->grouping_columns;
		if(isset($this->yystack[$this->yyidx + -3]->minor)&&isset($this->yystack[$this->yyidx + -3]->minor->filter))
			$yygotominor->filter = $this->yystack[$this->yyidx + -3]->minor->filter;
	}
#line 2964 "sql.php"
        break;
      case 238:
#line 521 "sql.y"
{$yygotominor->offset=0;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2969 "sql.php"
        break;
      case 239:
#line 522 "sql.y"
{$yygotominor->offset=$this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + -2]->minor->value;}
#line 2974 "sql.php"
        break;
      case 240:
#line 523 "sql.y"
{$yygotominor->offset=$this->yystack[$this->yyidx + -2]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2979 "sql.php"
        break;
      case 249:
#line 535 "sql.y"
{
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;
	}
#line 2986 "sql.php"
        break;
      case 251:
#line 540 "sql.y"
{$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + 0]->minor->value);}
#line 2991 "sql.php"
        break;
      case 252:
#line 541 "sql.y"
{$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value);}
#line 2996 "sql.php"
        break;
      case 266:
#line 563 "sql.y"
{
	$yygotominor->join_type = $this->yystack[$this->yyidx + -3]->minor;
	$b_last_relation = $this->yystack[$this->yyidx + -5]->minor->actions[count($this->yystack[$this->yyidx + -5]->minor->actions)-1];
	$e_last_relation = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1];
	$yygotominor->actions = array_merge($this->yystack[$this->yyidx + -5]->minor->actions, $this->yystack[$this->yyidx + -1]->minor->actions);
	$yygotominor->actions[] = new qpAction_joinRelationsLeft($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
}
#line 3007 "sql.php"
        break;
      case 278:
#line 585 "sql.y"
{$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;}
#line 3012 "sql.php"
        break;
      case 284:
#line 595 "sql.y"
{
	$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;
}
#line 3019 "sql.php"
        break;
      case 285:
#line 599 "sql.y"
{$yygotominor->grouping_columns = NULL;}
#line 3024 "sql.php"
        break;
      case 286:
#line 600 "sql.y"
{$yygotominor->grouping_columns = $this->yystack[$this->yyidx + 0]->minor;}
#line 3029 "sql.php"
        break;
      case 287:
#line 602 "sql.y"
{$yygotominor = Array(); $yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3034 "sql.php"
        break;
      case 288:
#line 603 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;$yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3039 "sql.php"
        break;
      case 303:
      case 351:
#line 648 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor = $this->yystack[$this->yyidx + -2]->minor;
	}
#line 3048 "sql.php"
        break;
      case 314:
#line 669 "sql.y"
{
		$yygotominor = new filter_IsNullColumn($this->yystack[$this->yyidx + -2]->minor);
	}
#line 3055 "sql.php"
        break;
      case 315:
#line 672 "sql.y"
{
		$yygotominor = new filter_IsNotNullColumn($this->yystack[$this->yyidx + -3]->minor);
	}
#line 3062 "sql.php"
        break;
      case 328:
#line 718 "sql.y"
{
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3069 "sql.php"
        break;
      case 329:
#line 765 "sql.y"
{
		$yygotominor->action = new qpAction_createTable($this->yystack[$this->yyidx + -3]->minor->value, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3076 "sql.php"
        break;
      case 334:
#line 934 "sql.y"
{
		$yygotominor->actions = Array();
		foreach($this->yystack[$this->yyidx + -1]->minor as $c){
			$yygotominor->actions[] = new qpAction_dropTable($c->value);
		}
	}
#line 3086 "sql.php"
        break;
      case 338:
#line 945 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3091 "sql.php"
        break;
      case 343:
#line 1033 "sql.y"
{
		$yygotominor->actions = Array();
		if(is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_bulkDelete($this->yystack[$this->yyidx + -1]->minor->value);
		} else {
			$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value);
			$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
			$yygotominor->actions[] = new qpAction_addressedDelete($last_relation_id);
		}
	}
#line 3106 "sql.php"
        break;
      case 344:
#line 1045 "sql.y"
{
		$yygotominor = NULL;
	}
#line 3113 "sql.php"
        break;
      case 346:
#line 1052 "sql.y"
{
		$yygotominor->actions[] = new qpAction_insertRow($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3120 "sql.php"
        break;
      case 347:
#line 1056 "sql.y"
{
		$yygotominor = Array();
		foreach($this->yystack[$this->yyidx + -2]->minor as $key => $column_name){
			$yygotominor[$column_name] = $this->yystack[$this->yyidx + 0]->minor[$key];
		}
	}
#line 3130 "sql.php"
        break;
      case 348:
#line 1062 "sql.y"
{print_r($this->yystack[$this->yyidx + 0]->minor);}
#line 3135 "sql.php"
        break;
      case 353:
#line 1083 "sql.y"
{$yygotominor->column=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->new_value=$this->yystack[$this->yyidx + 0]->minor;}
#line 3140 "sql.php"
        break;
      case 358:
#line 1091 "sql.y"
{
		$yygotominor->actions = Array();
		$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -3]->minor->value);
		$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;

		if(!is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
		}
		$yygotominor->actions[]=new qpAction_updateValues($last_relation_id, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3154 "sql.php"
        break;
      case 361:
#line 1152 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("abs");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3159 "sql.php"
        break;
      case 362:
#line 1153 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("acos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3164 "sql.php"
        break;
      case 363:
#line 1154 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("asin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3169 "sql.php"
        break;
      case 364:
#line 1155 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("atan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3174 "sql.php"
        break;
      case 365:
      case 366:
#line 1156 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("atan2");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3180 "sql.php"
        break;
      case 367:
#line 1158 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ceil");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3185 "sql.php"
        break;
      case 368:
#line 1159 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3190 "sql.php"
        break;
      case 369:
#line 1160 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cot");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3195 "sql.php"
        break;
      case 370:
#line 1161 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("crc32");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3200 "sql.php"
        break;
      case 371:
#line 1162 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("degrees");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3205 "sql.php"
        break;
      case 372:
#line 1163 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("exp");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3210 "sql.php"
        break;
      case 373:
#line 1164 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("floor");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3215 "sql.php"
        break;
      case 374:
#line 1165 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("format");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3220 "sql.php"
        break;
      case 375:
      case 376:
#line 1166 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ln");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3226 "sql.php"
        break;
      case 377:
#line 1168 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3231 "sql.php"
        break;
      case 378:
#line 1169 "sql.y"
{$val2 = new filter_StaticIntnum(2);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val2;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3236 "sql.php"
        break;
      case 379:
#line 1170 "sql.y"
{$val10 = new filter_StaticIntnum(10);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val10;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3241 "sql.php"
        break;
      case 380:
#line 1171 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("mod");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3246 "sql.php"
        break;
      case 381:
#line 1172 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("pi");$yygotominor->expression=new filter_EmptyExpression();}
#line 3251 "sql.php"
        break;
      case 382:
#line 1173 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("pow");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3256 "sql.php"
        break;
      case 383:
#line 1174 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("radians");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3261 "sql.php"
        break;
      case 384:
#line 1175 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("round");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3266 "sql.php"
        break;
      case 385:
#line 1176 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("round");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3271 "sql.php"
        break;
      case 386:
#line 1177 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sign");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3276 "sql.php"
        break;
      case 387:
#line 1178 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3281 "sql.php"
        break;
      case 388:
#line 1179 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sqrt");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3286 "sql.php"
        break;
      case 389:
#line 1180 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("tan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3291 "sql.php"
        break;
      case 390:
#line 1181 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("truncate");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3296 "sql.php"
        break;
  };
  $yygoto = self::$yyRuleInfo[2*$yyruleno];
  $yysize = self::$yyRuleInfo[(2*$yyruleno)+1];

  $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;
  
  $this->yyidx -= $yysize;
  $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);
  if( $yyact < self::YYNSTATE ){
    $this->yy_shift($yyact, $yygoto, $yygotominor);
  }else if( $yyact == self::YYNSTATE + self::YYNRULE + 1 ){
    $this->yy_accept();
  }
}

/*
** The following code executes when the parse fails
*/
private function yy_parse_failed(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sFail!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
}

/*
** The following code executes when a syntax error first occurs.
*/
private function yy_syntax_error(
  $yymajor,                   /* The major type of the error token */
  $yyminor            /* The minor type of the error token */
){
}

/*
** The following is executed when the parser accepts
*/
private function yy_accept(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sAccept!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 2 "sql.y"

      //echo "PARSING COMPLETE!!";
   
#line 3351 "sql.php"
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
function Parse(
  $yymajor,                 /* The major token code number */
  $yyminor = null           /* The value for the token */
){
  $yyact = 0;            /* The parser action. */
  $yyendofinput = 0;     /* True if we are at the end of input */
  $yyerrorhit = 0;   /* True if yymajor has invoked an error */

  /* (re)initialize the parser, if necessary */
  if( $this->yyidx<0 ){
    $this->yyidx = 0;
    $this->yyerrcnt = -1;
    $ent = new ParseyyStackEntry;
    $ent->stateno = 0;
    $ent->major = 0;
    $this->yystack = array( 0 => $ent );

    $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    $this->YY_ACCEPT_ACTION  = self::YYNSTATE + self::YYNRULE + 1;
    $this->YY_ERROR_ACTION   = self::YYNSTATE + self::YYNRULE;
  }
  $yyendofinput = ($yymajor==0);

  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sInput %s\n",$this->yyTracePrompt,
      self::$yyTokenName[$yymajor]);
  }

  do{
    $yyact = $this->yy_find_shift_action($yymajor);
    if( $yyact<self::YYNSTATE ){
      $this->yy_shift($yyact,$yymajor,$yyminor);
      $this->yyerrcnt--;
      if( $yyendofinput && $this->yyidx>=0 ){
        $yymajor = 0;
      }else{
        $yymajor = self::YYNOCODE;
      }
    }else if( $yyact < self::YYNSTATE + self::YYNRULE ){
      $this->yy_reduce($yyact-self::YYNSTATE);
    }else if( $yyact == $this->YY_ERROR_ACTION ){
      if( $this->yyTraceFILE ){
        fprintf($this->yyTraceFILE,"%sSyntax Error!\n",$this->yyTracePrompt);
      }
if (self::YYERRORSYMBOL) {
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( $this->yyerrcnt<0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $yymx = $this->yystack[$this->yyidx]->major;
      if( $yymx==self::YYERRORSYMBOL || $yyerrorhit ){
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE,"%sDiscard input token %s\n",
             $this->yyTracePrompt,self::$yyTokenName[$yymajor]);
        }
        $this->yy_destructor($yymajor,$yyminor);
        $yymajor = self::YYNOCODE;
      }else{
         while(
          $this->yyidx >= 0 &&
          $yymx != self::YYERRORSYMBOL &&
          ($yyact = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::YYERRORSYMBOL)) >= self::YYNSTATE
        ){
          $this->yy_pop_parser_stack();
        }
        if( $this->yyidx < 0 || $yymajor==0 ){
          $this->yy_destructor($yymajor,$yyminor);
          $this->yy_parse_failed();
          $yymajor = self::YYNOCODE;
        }else if( $yymx!=self::YYERRORSYMBOL ){
          $this->yy_shift($yyact,self::YYERRORSYMBOL,0);
        }
      }
      $this->yyerrcnt = 3;
      $yyerrorhit = 1;
} else {  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( $this->yyerrcnt<=0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $this->yyerrcnt = 3;
      $this->yy_destructor($yymajor,$yyminor);
      if( $yyendofinput ){
        $this->yy_parse_failed();
      }
      $yymajor = self::YYNOCODE;
}
    }else{
      $this->yy_accept();
      $yymajor = self::YYNOCODE;
    }
  }while( $yymajor!=self::YYNOCODE && $this->yyidx>=0 );
}

}
