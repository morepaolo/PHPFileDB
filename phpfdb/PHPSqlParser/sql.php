<?php # vim:ts=2:sw=2:et:
/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included which follows the "include" declaration
** in the input file. */


/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
class ParseyyStackEntry {
  var /* int */ $stateno;       /* The state-number */
  var /* int */ $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
  var $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

/* The state of the parser is completely contained in an instance of
** the following structure */
class ParseParser {
  var /* int */ $yyidx = -1;                    /* Index of top element in stack */
  var /* int */ $yyerrcnt;                 /* Shifts left before out of the error */
  // ParseARG_SDECL                /* A place to hold %extra_argument */
  var /* yyStackEntry */ $yystack = array(
  	/* of YYSTACKDEPTH elements */
	);  /* The parser's stack */

  var $yyTraceFILE = null;
  var $yyTracePrompt = null;



/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
  const TK_NAME =  1;
  const TK_INTNUM =  2;
  const TK_APPROXNUM =  3;
  const TK_DEADTOKEN =  4;
  const TK_COMMA =  5;
  const TK_CHARACTER =  6;
  const TK_SET =  7;
  const TK_CHAR =  8;
  const TK_LPAR =  9;
  const TK_RPAR = 10;
  const TK_VARYING = 11;
  const TK_VARCHAR = 12;
  const TK_NATIONAL = 13;
  const TK_NCHAR = 14;
  const TK_BLOB = 15;
  const TK_BIT = 16;
  const TK_NUMERIC = 17;
  const TK_DECIMAL = 18;
  const TK_DEC = 19;
  const TK_INTEGER = 20;
  const TK_SMALLINT = 21;
  const TK_FLOAT = 22;
  const TK_REAL = 23;
  const TK_DOUBLE = 24;
  const TK_PRECISION = 25;
  const TK_DATE = 26;
  const TK_TIME = 27;
  const TK_TIMESTAMP = 28;
  const TK_WITH = 29;
  const TK_ZONE = 30;
  const TK_INTERVAL = 31;
  const TK_TO = 32;
  const TK_YEAR = 33;
  const TK_MONTH = 34;
  const TK_DAY = 35;
  const TK_HOUR = 36;
  const TK_MINUTE = 37;
  const TK_SECOND = 38;
  const TK_PERIOD = 39;
  const TK_DEFAULT = 40;
  const TK_USER = 41;
  const TK_CURRENT_USER = 42;
  const TK_SESSION_USER = 43;
  const TK_SYSTEM_USER = 44;
  const TK_NULL = 45;
  const TK_PLUS_SIGN = 46;
  const TK_MINUS_SIGN = 47;
  const TK_CONSTRAINT = 48;
  const TK_NOT = 49;
  const TK_UNIQUE = 50;
  const TK_AUTO_INCREMENT = 51;
  const TK_PRIMARY = 52;
  const TK_KEY = 53;
  const TK_REFERENCES = 54;
  const TK_MATCH = 55;
  const TK_FULL = 56;
  const TK_PARTIAL = 57;
  const TK_ON = 58;
  const TK_UPDATE = 59;
  const TK_DELETE = 60;
  const TK_CASCADE = 61;
  const TK_NO = 62;
  const TK_ACTION = 63;
  const TK_CHECK = 64;
  const TK_OR = 65;
  const TK_AND = 66;
  const TK_IS = 67;
  const TK_ASTERISK = 68;
  const TK_SOLIDUS = 69;
  const TK_STRING = 70;
  const TK_COUNT = 71;
  const TK_MAX = 72;
  const TK_MIN = 73;
  const TK_DISTINCT = 74;
  const TK_ALL = 75;
  const TK_UNION = 76;
  const TK_EXCEPT = 77;
  const TK_INTERSECT = 78;
  const TK_SELECT = 79;
  const TK_AS = 80;
  const TK_LIMIT = 81;
  const TK_OFFSET = 82;
  const TK_ORDER = 83;
  const TK_BY = 84;
  const TK_ASC = 85;
  const TK_DESC = 86;
  const TK_FROM = 87;
  const TK_CROSS = 88;
  const TK_JOIN = 89;
  const TK_NATURAL = 90;
  const TK_INNER = 91;
  const TK_OUTER = 92;
  const TK_LEFT = 93;
  const TK_RIGHT = 94;
  const TK_USING = 95;
  const TK_WHERE = 96;
  const TK_GROUP = 97;
  const TK_HAVING = 98;
  const TK_VALUES = 99;
  const TK_TABLE = 100;
  const TK_CORRESPONDING = 101;
  const TK_NULLX = 102;
  const TK_TRUE = 103;
  const TK_FALSE = 104;
  const TK_UNKNOWN = 105;
  const TK_OP_EQ = 106;
  const TK_OP_GTLT = 107;
  const TK_OP_LT = 108;
  const TK_OP_GT = 109;
  const TK_OP_LTEQ = 110;
  const TK_OP_GTEQ = 111;
  const TK_DEFERRABLE = 112;
  const TK_INITIALLY = 113;
  const TK_DEFERRED = 114;
  const TK_IMMEDIATE = 115;
  const TK_CREATE = 116;
  const TK_RESTRICT = 117;
  const TK_DROP = 118;
  const TK_IF = 119;
  const TK_EXISTS = 120;
  const TK_INSERT = 121;
  const TK_INTO = 122;
  const TK_ABS = 123;
  const TK_ACOS = 124;
  const TK_ASIN = 125;
  const TK_ATAN = 126;
  const TK_ATAN2 = 127;
  const TK_CEIL = 128;
  const TK_COS = 129;
  const TK_COT = 130;
  const TK_CRC32 = 131;
  const TK_DEGREES = 132;
  const TK_EXP = 133;
  const TK_FLOOR = 134;
  const TK_FORMAT = 135;
  const TK_LN = 136;
  const TK_LOG = 137;
  const TK_LOG2 = 138;
  const TK_LOG10 = 139;
  const TK_MOD = 140;
  const TK_PI = 141;
  const TK_POW = 142;
  const TK_RADIANS = 143;
  const TK_ROUND = 144;
  const TK_SIGN = 145;
  const TK_SIN = 146;
  const TK_SQRT = 147;
  const TK_TAN = 148;
  const TK_TRUNCATE = 149;
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
  const YYNOCODE = 314;
#define ParseTOKENTYPE void*
  const YYSTACKDEPTH = 100;
  const YYNSTATE = 697;
  const YYNRULE = 393;
  const YYERRORSYMBOL = 150;

  /* QUESTE LE HO AGGIUNTE IO */
  const   YYWILDCARD = 0;
  public $operations_list= Array();
  /* since we cant use expressions to initialize these as class
   * constants, we do so during parser init. */
  var $YY_NO_ACTION;
  var $YY_ACCEPT_ACTION;
  var $YY_ERROR_ACTION;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static $yy_action = array(
 /*     0 */   444,  377,  659,  408,  425,  253,  406,  252,  407,  428,
 /*    10 */   410,  238,  104,  348,  122,  602,  529,  351,  239,  242,
 /*    20 */   633,  243,  365,  367,  369,  646,  647,  371,  649,  373,
 /*    30 */   403,  651,  177,  178,  401,  402,  111,  662,  663,  664,
 /*    40 */   665,  666,  383,  415,  185,  571,  110,  426,   65,  343,
 /*    50 */   616,  617,  618,  619,  620,  621,  235,  636,  637,  105,
 /*    60 */   662,  663,  664,  665,  666,  379,  228,  297,  517,  509,
 /*    70 */   298,   10,  516,  518,  519,  128,  110,  230,  226,  499,
 /*    80 */   463,  170,  225,  464,  465,  417,  419,  420,  300,  422,
 /*    90 */   423,  424,  254,  432,  258,  905,  437,  227,  223,  458,
 /*   100 */   219,  266,  267,    9,  460,  905,  443,  445,  446,  444,
 /*   110 */   589,  337,  408,  425,  253,  406,  252,  407,  428,  410,
 /*   120 */   661,  403,  667,  172,  409,  107,  236,  454,  456,  457,
 /*   130 */  1091,  398,  399,  400,  403,  408,   91,  409,   16,  429,
 /*   140 */   407,   85,   63,  232,  566,  568,  569,  660,  378,  408,
 /*   150 */   670,  247,  415,  429,  407,   85,  426,   65,  567,  568,
 /*   160 */   569,  403,  403,  121,  409,  409,  403,  333,  105,   63,
 /*   170 */    62,  905,  905,  995,  656,  228,  297,  517,  509,  298,
 /*   180 */   403,  516,  518,  519,  128,   57,  230,  226,  499,  463,
 /*   190 */   170,  225,  464,  465,  417,  419,  420,  300,  422,  423,
 /*   200 */   424,  254,  432,  258,  896,  437,  227,  223,  302,  221,
 /*   210 */   266,  267,  301,  460,   28,  443,  445,  446,  403,  444,
 /*   220 */    81,  570,  408,  425,  253,  406,  252,  407,  428,  410,
 /*   230 */   186,  234,  172,  296,  107,  307,  454,  456,  457,  408,
 /*   240 */   169,  253,  406,  411,  407,  116,  410,  543,  334,  583,
 /*   250 */   584,  335,  966,   86,    4,  413,  414,  513,  514,  515,
 /*   260 */    13,   88,  415,  342,  408,  527,  426,   65,  429,  407,
 /*   270 */   449,  459,  966,  563,  564,  565,  675,  572,  105,  415,
 /*   280 */   682,  683,  684,  685,  265,  966,  505,  966,  586,  966,
 /*   290 */   966,  304,  188,  189,  190,  339,  498,  226,  439,  463,
 /*   300 */   170,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*   310 */   424,  254,  432,  258, 1000,  437,  227,  223,  458,  219,
 /*   320 */   266,  267,  261,  460, 1000,  443,  445,  446,  403,  404,
 /*   330 */   405,  409,  403,  404,  405,  409,    2,  905,  905,  995,
 /*   340 */    61,  612,  172,  374,  107,  655,  454,  456,  457,  408,
 /*   350 */   425,  253,  406,  252,  407,  428,  410,  408,  413,  414,
 /*   360 */    15,  429,  407,  694,   66,   67,  408,  233,  555,  556,
 /*   370 */   429,  407,  694,  413,  414,  537,   12,  413,  414,  404,
 /*   380 */   405,  603,  604,  610,  611,  176,  265,  262,  505,  415,
 /*   390 */   511, 1000, 1000,  426,   65,  534,  512,  427,  255,  434,
 /*   400 */   435,  427,  255,  434,  435,  436,  169,  588,  403,  467,
 /*   410 */   532,  409,  535,  536,  596,  597,   62,  594,  605,  606,
 /*   420 */   607,  608,  609,  413,  414,  214,   13,   88,  224,  502,
 /*   430 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*   440 */   258,  403,  437,  438,  409,  413,  414,  427,  786,   62,
 /*   450 */   268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
 /*   460 */   278,  279,  280,  281,  282,  283,  284,  285,  286,  288,
 /*   470 */   289,  290,  291,  292,  293,  294,  295,  403,  404,  405,
 /*   480 */   409,  403,  404,  405,  409,   62,  169,  408,  323,   61,
 /*   490 */   408,  429,  407,  449,  429,  407,  430,  966,  408,  425,
 /*   500 */   253,  406,  252,  407,  428,  410,   13,   88,  308,   19,
 /*   510 */   179,  696,  396,  123,  462,   68,  580,  581,  582,  169,
 /*   520 */   689,  396,  413,  414,  678,  403,  404,  405,  409,  265,
 /*   530 */   966,  505,  966,    1,  966,  966,   37,   14,  415,   13,
 /*   540 */    88,  308,  426,   65,  340,  341,  427,  255,  434,  435,
 /*   550 */   427,  255,  434,  435,  436,  169,  521,  522,  523,  524,
 /*   560 */   525,  526,  121,  403,  504,  322,  506,  507,   58,   59,
 /*   570 */   413,  414,  192,   12,  346,   13,   88,  413,  414,  416,
 /*   580 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*   590 */   164,  437,  438,  468,  427,  255,  434,  435,   21,  268,
 /*   600 */   269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
 /*   610 */   279,  280,  281,  282,  283,  284,  285,  286,  288,  289,
 /*   620 */   290,  291,  292,  293,  294,  295,  502,  408,  403,  413,
 /*   630 */   414,  429,  407,  449,  408,  425,  253,  406,  252,  407,
 /*   640 */   428,  410,  116,  554,  513,  514,  515,  268,  269,  270,
 /*   650 */   271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
 /*   660 */   281,  282,  283,  284,  285,  286,  288,  289,  290,  291,
 /*   670 */   292,  293,  294,  295,  415,  404,  405,  408,  426,   65,
 /*   680 */   403,  411,  407,  409,  412,  261,  613,  408,   62, 1001,
 /*   690 */   436,  429,  407,  450, 1001,  576,  577,  303,  297,  517,
 /*   700 */   509,  298,  595,  516,  518,  519,  128,  117,  461,   92,
 /*   710 */   499,  463,  170,  225,  464,  465,  417,  419,  420,  300,
 /*   720 */   422,  423,  424,  254,  432,  258,  652,  437,  438,  408,
 /*   730 */   425,  253,  406,  252,  407,  428,  410,   96,  444,  469,
 /*   740 */   657,  408,  674,  253,  406,  411,  407,  408,  410,   44,
 /*   750 */   264,  429,  407,  550,   69,  408,  695,  408,  169,  447,
 /*   760 */   407,  447,  407,  408,   82,  676,  408,  447,  407,  415,
 /*   770 */   429,  407,  551,  426,   65,  413,  414,  321,   13,   88,
 /*   780 */   308,  415,  124,  408,  125,  436,  544,  429,  407,  449,
 /*   790 */   413,  414,  326,  297,  517,  509,  298,  106,  516,  518,
 /*   800 */   519,  128,  375,  461,  375,  499,  463,  170,  225,  464,
 /*   810 */   465,  417,  419,  420,  300,  422,  423,  424,  254,  432,
 /*   820 */   258,  677,  437,  438,  408,  425,  253,  406,  252,  407,
 /*   830 */   428,  410,   46,    6,  471,  455,  251,  458,  219,  266,
 /*   840 */   267,  305,  460,  995,  443,  445,  446,  265,  260,  505,
 /*   850 */   260,  327,  591,  995,  714,  182,  263,  590,  549,  714,
 /*   860 */   240,  172,  241,  107,  415,  454,  456,  457,  426,   65,
 /*   870 */   413,  414,  960,  413,  414,  332,  448,    5,  453,  408,
 /*   880 */   436,  253,  406,  411,  407,  183,  410,  329,  297,  517,
 /*   890 */   509,  298,  687,  516,  518,  519,  128,   91,  461,  184,
 /*   900 */   499,  463,  170,  225,  464,  465,  417,  419,  420,  300,
 /*   910 */   422,  423,  424,  254,  432,  258,  306,  437,  438,  415,
 /*   920 */   995,  995,  472,   95,  389,  408,  425,  253,  406,  252,
 /*   930 */   407,  428,  410,  324,  444,  497,  473,  408,  573,  253,
 /*   940 */   406,  411,  407,  169,  410,   26,  552,  474,  167,  166,
 /*   950 */   470,  960,  196,  198,  354,  357,   66,   67,  413,  414,
 /*   960 */   200,  202,  360,  363,   98,  415,  118,  575,  234,  426,
 /*   970 */    65,  403,  413,  414,  409,  578,  175,  415,  119,   62,
 /*   980 */   330,  436,  387,  413,  414,  391,  413,  414,  237,  297,
 /*   990 */   517,  509,  298,  106,  516,  518,  519,  128,  593,  461,
 /*  1000 */   599,  499,  463,  170,  225,  464,  465,  417,  419,  420,
 /*  1010 */   300,  422,  423,  424,  254,  432,  258,  475,  437,  438,
 /*  1020 */   408,  425,  253,  406,  252,  407,  428,  410,  614,  336,
 /*  1030 */   476,  455,  223,  458,  219,  266,  267,  477,  460,  205,
 /*  1040 */   443,  445,  446,  207,  638,   71,  209,  384,  642,  169,
 /*  1050 */   587,  644,  672,  413,  414,   10,  338,  172,  615,  107,
 /*  1060 */   415,  454,  456,  457,  426,   65,  413,  414,  623,   13,
 /*  1070 */    88,  308,  345,  413,  414,  408,  436,  253,  406,  411,
 /*  1080 */   407,  347,  410,  390,  297,  517,  509,  298,   40,  516,
 /*  1090 */   518,  519,  128,  482,  461,  350,  499,  463,  170,  225,
 /*  1100 */   464,  465,  417,  419,  420,  300,  422,  423,  424,  254,
 /*  1110 */   432,  258,   49,  437,  438,  415,   55,  490,  352,  478,
 /*  1120 */   353,  408,  425,  253,  406,  252,  407,  428,  410,  413,
 /*  1130 */   414,  331,  355,  408,  479,  253,  406,  411,  407,  480,
 /*  1140 */   410,  356,  481,  707,  483,  641,  484,  358,  707,  244,
 /*  1150 */   640,  359,  361,  413,  414,  413,  414,  413,  414,  362,
 /*  1160 */   364,  415,  366,  408,  245,  426,   65,  429,  407,  449,
 /*  1170 */   413,  414,  368,  415,  246,  413,  414,  436,  413,  414,
 /*  1180 */   413,  414,  413,  414,  397,  297,  517,  509,  298,  680,
 /*  1190 */   516,  518,  519,  128,  370,  461,  372,  499,  463,  170,
 /*  1200 */   225,  464,  465,  417,  419,  420,  300,  422,  423,  424,
 /*  1210 */   254,  432,  258,  485,  437,  438,  403,  404,  405,  409,
 /*  1220 */   486,  310,  488,  375,   61,  408,  669,  253,  406,  411,
 /*  1230 */   407,  489,  410,  491,  653,  492,  658,  380,  671,  408,
 /*  1240 */   425,  253,  406,  252,  407,  428,  410,  381,  248,  413,
 /*  1250 */   414,  385,  388,   87,  493,  693,  413,  414,  413,  414,
 /*  1260 */   692,  413,  414,    8,  686,  601,  708,  413,  414,  413,
 /*  1270 */   414,  413,  414,  113,  600,  256,  114,  257,  168,  415,
 /*  1280 */   431,  171,   70,  426,   65,  427,  255,  434,  435,   99,
 /*  1290 */   413,  414,  115,  451,  100,  436,  452,   79,  494,   22,
 /*  1300 */   311,   23,   24,  299,  517,  509,  298,  994,  516,  518,
 /*  1310 */   519,  128,   25,  461,   27,  499,  463,  170,  225,  464,
 /*  1320 */   465,  417,  419,  420,  300,  422,  423,  424,  254,  432,
 /*  1330 */   258,   29,  437,  438,  413,  414,   30,   31,  268,  269,
 /*  1340 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
 /*  1350 */   280,  281,  282,  283,  284,  285,  286,  288,  289,  290,
 /*  1360 */   291,  292,  293,  294,  295,  403,  404,  405,  409,  487,
 /*  1370 */   495,   32,  408,    1,  253,  406,  411,  407,   33,  410,
 /*  1380 */    80,  496,   34,  408,   35,  253,  406,  411,  407,   36,
 /*  1390 */   410,   38,   39,   41,   42,   43,  287,   45,  408,   47,
 /*  1400 */   253,  406,  411,  407,   48,  410,  413,  414,   50,   51,
 /*  1410 */   413,  414,  415,  403,  404,  405,  409,  413,  414,   52,
 /*  1420 */    53,    3,   54,  415,   11,  528,   10,  530,  679,  101,
 /*  1430 */   132,  531,  229,  533,  427,  255,  434,  435,  415,  218,
 /*  1440 */   309,  102,  112,  539,  542,  231,  545,  546,   89,   90,
 /*  1450 */    17,   20,   83,   84,   60,  574,  187,  585,  413,  414,
 /*  1460 */   579,  166,  103,    7,  167,  592,  502,  598,  344,  622,
 /*  1470 */   191,  624,  650,  193,  120,  194,  349,  625,  195,  376,
 /*  1480 */   626,  627,  427,  255,  434,  435,  197,  268,  269,  270,
 /*  1490 */   271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
 /*  1500 */   281,  282,  283,  284,  285,  286,  288,  289,  290,  291,
 /*  1510 */   292,  293,  294,  295,  502,  628,  629,  199,  654,  630,
 /*  1520 */   631,  201,  787,  632,  634,  203,  217,  635,  639,  204,
 /*  1530 */   206,   94,  643,  208,  210,  268,  269,  270,  271,  272,
 /*  1540 */   273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
 /*  1550 */   283,  284,  285,  286,  288,  289,  290,  291,  292,  293,
 /*  1560 */   294,  295,  403,  404,  405,  409,  645,  648,  211,  212,
 /*  1570 */    61,  408,  425,  253,  406,  252,  407,  428,  410,  408,
 /*  1580 */   213,  253,  406,  411,  407,  668,  410,  382,  215,  216,
 /*  1590 */   408,  386,  253,  406,  252,  407,  428,  410,  673,  681,
 /*  1600 */    64,  688,   93,   97,   18,  708,  708,  413,  414,  708,
 /*  1610 */   708,  415,  708,  708,  708,  426,   65,  708,  708,  415,
 /*  1620 */   708,  708,  708,  708,  708,  708,  708,  436,  708,  561,
 /*  1630 */   415,  427,  255,  434,  435,  395,  508,  509,  298,  708,
 /*  1640 */   516,  518,  519,  128,  708,  461,  436,  499,  463,  170,
 /*  1650 */   225,  464,  465,  417,  419,  420,  300,  422,  423,  424,
 /*  1660 */   254,  432,  258,  708,  437,  438,  403,  404,  405,  409,
 /*  1670 */   708,  708,  708,  708,   61,  559,  708,  708,  708,  254,
 /*  1680 */   708,  708,  708,  437,  268,  269,  270,  271,  272,  273,
 /*  1690 */   274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
 /*  1700 */   284,  285,  286,  288,  289,  290,  291,  292,  293,  294,
 /*  1710 */   295,  413,  414,  708,  708,  708,  708,  708,  708,  708,
 /*  1720 */   708,  708,  708,  708,  328,  560,  708,  708,  708,  708,
 /*  1730 */   708,  708,  708,  708,  708,  427,  255,  434,  435,  708,
 /*  1740 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1750 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1760 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1770 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1780 */   708,  708,  708,  708,  708,  708,  708,  708,  268,  269,
 /*  1790 */   270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
 /*  1800 */   280,  281,  282,  283,  284,  285,  286,  288,  289,  290,
 /*  1810 */   291,  292,  293,  294,  295,  408,  425,  253,  406,  252,
 /*  1820 */   407,  428,  410,  708,  708,  708,  708,  708,  708,  708,
 /*  1830 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1840 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1850 */   708,  708,  708,  708,  708,  415,  708,  708,  708,  426,
 /*  1860 */    65,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1870 */   708,  436,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1880 */   708,  510,  298,  708,  516,  518,  519,  128,  708,  461,
 /*  1890 */   708,  499,  463,  170,  225,  464,  465,  417,  419,  420,
 /*  1900 */   300,  422,  423,  424,  254,  432,  258,  708,  437,  438,
 /*  1910 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1920 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1930 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1940 */   708,  708,  708,  708,  408,  425,  253,  406,  252,  407,
 /*  1950 */   428,  410,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1960 */   708,  708,  708,  408,  425,  253,  406,  252,  407,  428,
 /*  1970 */   410,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  1980 */   708,  708,  708,  708,  415,  708,  708,  708,  426,   65,
 /*  1990 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2000 */   436,  708,  708,  415,  708,  708,  708,  426,   65,  708,
 /*  2010 */   708,  708,  708,  708,  708,  708,  501,  708,  461,  436,
 /*  2020 */   499,  463,  170,  225,  464,  465,  417,  419,  420,  421,
 /*  2030 */   422,  423,  424,  254,  432,  258,  708,  437,  438,  708,
 /*  2040 */   108,  170,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  2050 */   423,  424,  320,  432,  258,  708,  437,  438,  408,  425,
 /*  2060 */   253,  406,  252,  407,  428,  410,  708,  708,  708,   78,
 /*  2070 */   708,  708,  562,  548,  708,  708,  708,  708,  708,  708,
 /*  2080 */   500,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2090 */   708,  708,  708,  708,  708,  708,  708,  708,  415,  708,
 /*  2100 */   708,  708,  426,   65,  708,  708,  708,  708,  708,  708,
 /*  2110 */   708,  708,  708,  708,  436,  708,  708,  708,  708,  408,
 /*  2120 */   425,  253,  406,  252,  407,  428,  410,  708,  708,  708,
 /*  2130 */   520,  708,  461,  708,  499,  463,  170,  225,  464,  465,
 /*  2140 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  2150 */   708,  437,  438,  403,  708,  708,  409,  708,  708,  415,
 /*  2160 */   708,   56,  708,  426,   65,  708,  708,  708,  708,  708,
 /*  2170 */   708,  708,  708,  708,  708,  436,  408,  425,  253,  406,
 /*  2180 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  2190 */   708,  708,  394,  708,  708,  708,  108,  170,  225,  464,
 /*  2200 */   465,  417,  419,  420,  421,  422,  423,  424,  320,  432,
 /*  2210 */   258,  708,  437,  438,  708,  708,  415,  708,  708,  708,
 /*  2220 */   426,   65,  708,  708,  708,  708,  708,  708,  547,  548,
 /*  2230 */   708,  169,  436,  708,  708,  708,  408,  425,  253,  406,
 /*  2240 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  2250 */   708,   13,   88,  174,  170,  225,  464,  465,  417,  419,
 /*  2260 */   420,  421,  422,  423,  424,  254,  432,  258,  708,  437,
 /*  2270 */   438,  708,  708,  708,  708,  708,  415,  708,  708,  708,
 /*  2280 */   426,   65,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2290 */   708,  708,  436,  325,  557,  408,  425,  253,  406,  252,
 /*  2300 */   407,  428,  410,  708,  708,  708,  708,  708,  708,  708,
 /*  2310 */   708,  708,  708,  691,  170,  225,  464,  465,  417,  419,
 /*  2320 */   420,  421,  422,  423,  424,  254,  432,  258,  708,  437,
 /*  2330 */   438,  708,  708,  708,  708,  415,  708,  708,  708,  426,
 /*  2340 */    65,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2350 */   708,  436,  708,  408,  425,  253,  406,  252,  407,  428,
 /*  2360 */   410,  708,  708,  708,  708,  708,  708,  708,  708,  466,
 /*  2370 */   708,  708,  463,  170,  225,  464,  465,  417,  419,  420,
 /*  2380 */   421,  422,  423,  424,  254,  432,  258,  708,  437,  438,
 /*  2390 */   708,  708,  690,  415,  708,  708,  708,  426,   65,  708,
 /*  2400 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  436,
 /*  2410 */   408,  425,  253,  406,  252,  407,  428,  410,  708,  708,
 /*  2420 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2430 */   174,  170,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  2440 */   423,  424,  254,  432,  258,  708,  437,  438,  708,  708,
 /*  2450 */   415,  708,  708,  708,  426,   65,  708,  708,  708,  708,
 /*  2460 */   708,  708,  708,  708,  708,  708,  436,  708,  708,  708,
 /*  2470 */   708,  553,  408,  425,  253,  406,  252,  407,  428,  410,
 /*  2480 */   708,  708,  708,  708,  708,  708,  708,  319,  170,  225,
 /*  2490 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  2500 */   432,  258,  708,  437,  438,  708,  708,  708,  708,  708,
 /*  2510 */   708,  708,  415,  708,  708,  708,  426,   65,  708,  708,
 /*  2520 */   708,  708,  708,  708,  708,  708,  708,  708,  436,  408,
 /*  2530 */   425,  253,  406,  252,  407,  428,  410,  708,  708,  708,
 /*  2540 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2550 */   133,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  2560 */   424,  254,  432,  258,  708,  437,  438,  708,  708,  415,
 /*  2570 */   708,  708,  708,  426,   65,  708,  708,  708,  708,  708,
 /*  2580 */   708,  708,  708,  708,  708,  436,  408,  425,  253,  406,
 /*  2590 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  2600 */   708,  708,  708,  708,  708,  708,  708,  134,  225,  464,
 /*  2610 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  2620 */   258,  708,  437,  438,  708,  708,  415,  708,  708,  708,
 /*  2630 */   426,   65,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2640 */   708,  708,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  2650 */   410,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2660 */   708,  708,  708,  708,  135,  225,  464,  465,  417,  419,
 /*  2670 */   420,  421,  422,  423,  424,  254,  432,  258,  708,  437,
 /*  2680 */   438,  708,  708,  415,  708,  708,  708,  426,   65,  708,
 /*  2690 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  436,
 /*  2700 */   708,  708,  708,  708,  708,  708,  408,  425,  253,  406,
 /*  2710 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  2720 */   708,  129,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  2730 */   423,  424,  254,  432,  258,  708,  437,  438,  708,  708,
 /*  2740 */   708,  708,  708,  708,  708,  708,  415,  708,  708,  708,
 /*  2750 */   426,   65,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2760 */   708,  708,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  2770 */   410,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2780 */   708,  708,  708,  708,  136,  225,  464,  465,  417,  419,
 /*  2790 */   420,  421,  422,  423,  424,  254,  432,  258,  708,  437,
 /*  2800 */   438,  708,  708,  415,  708,  708,  708,  426,   65,  708,
 /*  2810 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  436,
 /*  2820 */   408,  425,  253,  406,  252,  407,  428,  410,  708,  708,
 /*  2830 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2840 */   708,  137,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  2850 */   423,  424,  254,  432,  258,  708,  437,  438,  708,  708,
 /*  2860 */   415,  708,  708,  708,  426,   65,  708,  708,  708,  708,
 /*  2870 */   708,  708,  708,  708,  708,  708,  436,  408,  425,  253,
 /*  2880 */   406,  252,  407,  428,  410,  708,  708,  708,  708,  708,
 /*  2890 */   708,  708,  708,  708,  708,  708,  708,  708,  138,  225,
 /*  2900 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  2910 */   432,  258,  708,  437,  438,  708,  708,  415,  708,  708,
 /*  2920 */   708,  426,   65,  708,  708,  708,  708,  708,  708,  708,
 /*  2930 */   708,  708,  708,  436,  708,  708,  708,  708,  708,  708,
 /*  2940 */   408,  425,  253,  406,  252,  407,  428,  410,  708,  708,
 /*  2950 */   708,  708,  708,  708,  708,  139,  225,  464,  465,  417,
 /*  2960 */   419,  420,  421,  422,  423,  424,  254,  432,  258,  708,
 /*  2970 */   437,  438,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  2980 */   415,  708,  708,  708,  426,   65,  708,  708,  708,  708,
 /*  2990 */   708,  708,  708,  708,  708,  708,  436,  408,  425,  253,
 /*  3000 */   406,  252,  407,  428,  410,  708,  708,  708,  708,  708,
 /*  3010 */   708,  708,  708,  708,  708,  708,  708,  708,  140,  225,
 /*  3020 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  3030 */   432,  258,  708,  437,  438,  708,  708,  415,  708,  708,
 /*  3040 */   708,  426,   65,  708,  708,  708,  708,  708,  708,  708,
 /*  3050 */   708,  708,  708,  436,  408,  425,  253,  406,  252,  407,
 /*  3060 */   428,  410,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3070 */   708,  708,  708,  708,  708,  141,  225,  464,  465,  417,
 /*  3080 */   419,  420,  421,  422,  423,  424,  254,  432,  258,  708,
 /*  3090 */   437,  438,  708,  708,  415,  708,  708,  708,  426,   65,
 /*  3100 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3110 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  708,
 /*  3120 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3130 */   708,  708,  142,  225,  464,  465,  417,  419,  420,  421,
 /*  3140 */   422,  423,  424,  254,  432,  258,  708,  437,  438,  708,
 /*  3150 */   708,  415,  708,  708,  708,  426,   65,  708,  708,  708,
 /*  3160 */   708,  708,  708,  708,  708,  708,  708,  436,  708,  708,
 /*  3170 */   708,  708,  708,  708,  408,  425,  253,  406,  252,  407,
 /*  3180 */   428,  410,  708,  708,  708,  708,  708,  708,  708,  143,
 /*  3190 */   225,  464,  465,  417,  419,  420,  421,  422,  423,  424,
 /*  3200 */   254,  432,  258,  708,  437,  438,  708,  708,  708,  708,
 /*  3210 */   708,  708,  708,  708,  415,  708,  708,  708,  426,   65,
 /*  3220 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3230 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  708,
 /*  3240 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3250 */   708,  708,  144,  225,  464,  465,  417,  419,  420,  421,
 /*  3260 */   422,  423,  424,  254,  432,  258,  708,  437,  438,  708,
 /*  3270 */   708,  415,  708,  708,  708,  426,   65,  708,  708,  708,
 /*  3280 */   708,  708,  708,  708,  708,  708,  708,  436,  408,  425,
 /*  3290 */   253,  406,  252,  407,  428,  410,  708,  708,  708,  708,
 /*  3300 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  145,
 /*  3310 */   225,  464,  465,  417,  419,  420,  421,  422,  423,  424,
 /*  3320 */   254,  432,  258,  708,  437,  438,  708,  708,  415,  708,
 /*  3330 */   708,  708,  426,   65,  708,  708,  708,  708,  708,  708,
 /*  3340 */   708,  708,  708,  708,  436,  408,  425,  253,  406,  252,
 /*  3350 */   407,  428,  410,  708,  708,  708,  708,  708,  708,  708,
 /*  3360 */   708,  708,  708,  708,  708,  708,  146,  225,  464,  465,
 /*  3370 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  3380 */   708,  437,  438,  708,  708,  415,  708,  708,  708,  426,
 /*  3390 */    65,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3400 */   708,  436,  708,  708,  708,  708,  708,  708,  408,  425,
 /*  3410 */   253,  406,  252,  407,  428,  410,  708,  708,  708,  708,
 /*  3420 */   708,  708,  708,  147,  225,  464,  465,  417,  419,  420,
 /*  3430 */   421,  422,  423,  424,  254,  432,  258,  708,  437,  438,
 /*  3440 */   708,  708,  708,  708,  708,  708,  708,  708,  415,  708,
 /*  3450 */   708,  708,  426,   65,  708,  708,  708,  708,  708,  708,
 /*  3460 */   708,  708,  708,  708,  436,  408,  425,  253,  406,  252,
 /*  3470 */   407,  428,  410,  708,  708,  708,  708,  708,  708,  708,
 /*  3480 */   708,  708,  708,  708,  708,  708,  148,  225,  464,  465,
 /*  3490 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  3500 */   708,  437,  438,  708,  708,  415,  708,  708,  708,  426,
 /*  3510 */    65,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3520 */   708,  436,  408,  425,  253,  406,  252,  407,  428,  410,
 /*  3530 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3540 */   708,  708,  708,  130,  225,  464,  465,  417,  419,  420,
 /*  3550 */   421,  422,  423,  424,  254,  432,  258,  708,  437,  438,
 /*  3560 */   708,  708,  415,  708,  708,  708,  426,   65,  708,  708,
 /*  3570 */   708,  708,  708,  708,  708,  708,  708,  708,  436,  408,
 /*  3580 */   425,  253,  406,  252,  407,  428,  410,  708,  708,  708,
 /*  3590 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3600 */   149,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  3610 */   424,  254,  432,  258,  708,  437,  438,  708,  708,  415,
 /*  3620 */   708,  708,  708,  426,   65,  708,  708,  708,  708,  708,
 /*  3630 */   708,  708,  708,  708,  708,  436,  708,  708,  708,  708,
 /*  3640 */   708,  708,  408,  425,  253,  406,  252,  407,  428,  410,
 /*  3650 */   708,  708,  708,  708,  708,  708,  708,  150,  225,  464,
 /*  3660 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  3670 */   258,  708,  437,  438,  708,  708,  708,  708,  708,  708,
 /*  3680 */   708,  708,  415,  708,  708,  708,  426,   65,  708,  708,
 /*  3690 */   708,  708,  708,  708,  708,  708,  708,  708,  436,  408,
 /*  3700 */   425,  253,  406,  252,  407,  428,  410,  708,  708,  708,
 /*  3710 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3720 */   151,  225,  464,  465,  417,  419,  420,  421,  422,  423,
 /*  3730 */   424,  254,  432,  258,  708,  437,  438,  708,  708,  415,
 /*  3740 */   708,  708,  708,  426,   65,  708,  708,  708,  708,  708,
 /*  3750 */   708,  708,  708,  708,  708,  436,  408,  425,  253,  406,
 /*  3760 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  3770 */   708,  708,  708,  708,  708,  708,  708,  152,  225,  464,
 /*  3780 */   465,  417,  419,  420,  421,  422,  423,  424,  254,  432,
 /*  3790 */   258,  708,  437,  438,  708,  708,  415,  708,  708,  708,
 /*  3800 */   426,   65,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3810 */   708,  708,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  3820 */   410,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3830 */   708,  708,  708,  708,  153,  225,  464,  465,  417,  419,
 /*  3840 */   420,  421,  422,  423,  424,  254,  432,  258,  708,  437,
 /*  3850 */   438,  708,  708,  415,  708,  708,  708,  426,   65,  708,
 /*  3860 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  436,
 /*  3870 */   708,  708,  708,  708,  708,  708,  408,  425,  253,  406,
 /*  3880 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  3890 */   708,  154,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  3900 */   423,  424,  254,  432,  258,  708,  437,  438,  708,  708,
 /*  3910 */   708,  708,  708,  708,  708,  708,  415,  708,  708,  708,
 /*  3920 */   426,   65,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3930 */   708,  708,  436,  408,  425,  253,  406,  252,  407,  428,
 /*  3940 */   410,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  3950 */   708,  708,  708,  708,  155,  225,  464,  465,  417,  419,
 /*  3960 */   420,  421,  422,  423,  424,  254,  432,  258,  708,  437,
 /*  3970 */   438,  708,  708,  415,  708,  708,  708,  426,   65,  708,
 /*  3980 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  436,
 /*  3990 */   408,  425,  253,  406,  252,  407,  428,  410,  708,  708,
 /*  4000 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4010 */   708,  156,  225,  464,  465,  417,  419,  420,  421,  422,
 /*  4020 */   423,  424,  254,  432,  258,  708,  437,  438,  708,  708,
 /*  4030 */   415,  708,  708,  708,  426,   65,  708,  708,  708,  708,
 /*  4040 */   708,  708,  708,  708,  708,  708,  436,  408,  425,  253,
 /*  4050 */   406,  252,  407,  428,  410,  708,  708,  708,  708,  708,
 /*  4060 */   708,  708,  708,  708,  708,  708,  708,  708,  131,  225,
 /*  4070 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  4080 */   432,  258,  708,  437,  438,  708,  708,  415,  708,  708,
 /*  4090 */   708,  426,   65,  708,  708,  708,  708,  708,  708,  708,
 /*  4100 */   708,  708,  708,  436,  708,  708,  708,  708,  708,  708,
 /*  4110 */   408,  425,  253,  406,  252,  407,  428,  410,  708,  708,
 /*  4120 */   708,  708,  708,  708,  708,  157,  225,  464,  465,  417,
 /*  4130 */   419,  420,  421,  422,  423,  424,  254,  432,  258,  708,
 /*  4140 */   437,  438,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4150 */   415,  708,  708,  708,  426,   65,  708,  708,  708,  708,
 /*  4160 */   708,  708,  708,  708,  708,  708,  436,  408,  425,  253,
 /*  4170 */   406,  252,  407,  428,  410,  708,  708,  708,  708,  708,
 /*  4180 */   708,  708,  708,  708,  708,  708,  708,  708,  158,  225,
 /*  4190 */   464,  465,  417,  419,  420,  421,  422,  423,  424,  254,
 /*  4200 */   432,  258,  708,  437,  438,  708,  708,  415,  708,  708,
 /*  4210 */   708,  426,   65,  708,  708,  708,  708,  708,  708,  708,
 /*  4220 */   708,  708,  708,  436,  408,  425,  253,  406,  252,  407,
 /*  4230 */   428,  410,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4240 */   708,  708,  708,  708,  708,  159,  225,  464,  465,  417,
 /*  4250 */   419,  420,  421,  422,  423,  424,  254,  432,  258,  708,
 /*  4260 */   437,  438,  708,  708,  415,  708,  708,  708,  426,   65,
 /*  4270 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4280 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  708,
 /*  4290 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4300 */   708,  708,  160,  225,  464,  465,  417,  419,  420,  421,
 /*  4310 */   422,  423,  424,  254,  432,  258,  708,  437,  438,  708,
 /*  4320 */   708,  415,  708,  708,  708,  426,   65,  708,  708,  708,
 /*  4330 */   708,  708,  708,  708,  708,  708,  708,  436,  708,  708,
 /*  4340 */   708,  708,  708,  708,  408,  425,  253,  406,  252,  407,
 /*  4350 */   428,  410,  708,  708,  708,  708,  708,  708,  708,  161,
 /*  4360 */   225,  464,  465,  417,  419,  420,  421,  422,  423,  424,
 /*  4370 */   254,  432,  258,  708,  437,  438,  708,  708,  708,  708,
 /*  4380 */   708,  708,  708,  708,  415,  708,  708,  708,  426,   65,
 /*  4390 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4400 */   436,  408,  425,  253,  406,  252,  407,  428,  410,  444,
 /*  4410 */   708,  708,  408,  708,  253,  406,  249,  407,  449,  410,
 /*  4420 */   708,  708,  162,  225,  464,  465,  417,  419,  420,  421,
 /*  4430 */   422,  423,  424,  254,  432,  258,  708,  437,  438,  708,
 /*  4440 */   708,  415,  708,  708,  708,  426,   65,  708,  708,  708,
 /*  4450 */   708,  708,  415,  708,  708,  708,  708,  436,  408,  425,
 /*  4460 */   253,  406,  252,  407,  428,  410,  708,  708,  106,  708,
 /*  4470 */   392,  708,  708,  708,  708,  708,  708,  708,  708,  163,
 /*  4480 */   225,  464,  465,  417,  419,  420,  421,  422,  423,  424,
 /*  4490 */   254,  432,  258,  708,  437,  438,  708,  708,  415,  708,
 /*  4500 */   708,  708,  426,   65,  708,  708,  455,  223,  302,  221,
 /*  4510 */   266,  267,  708,  460,  436,  443,  445,  446,  444,  708,
 /*  4520 */   708,  408,  708,  253,  406,  411,  407,  708,  410,  708,
 /*  4530 */   708,  708,  172,  708,  107,  708,  454,  456,  457,  433,
 /*  4540 */   417,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  4550 */   708,  437,  438,  708,  708,  708,  708,  708,  708,  708,
 /*  4560 */   708,  415,  444,  708,  393,  408,  708,  253,  406,  411,
 /*  4570 */   407,  708,  410,  708,  708,  708,  708,  106,  708,  708,
 /*  4580 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4590 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4600 */   708,  708,  708,  708,  708,  415,  708,  708,  708,  708,
 /*  4610 */   708,  708,  708,  708,  708,  455,  223,  302,  221,  266,
 /*  4620 */   267,  106,  460,  708,  443,  445,  446,  708,  708,  708,
 /*  4630 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4640 */   708,  172,  708,  107,  708,  454,  456,  457,  708,  708,
 /*  4650 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  455,
 /*  4660 */   223,  458,  221,  266,  267,  708,  460,  708,  443,  445,
 /*  4670 */   446,  444,  708,  708,  408,  708,  253,  406,  411,  407,
 /*  4680 */   708,  410,  708,  708,  708,  172,  708,  107,  708,  454,
 /*  4690 */   456,  457,  708,  708,  708,  708,  708,  708,  408,  425,
 /*  4700 */   253,  406,  252,  407,  428,  410,  708,  708,  708,  708,
 /*  4710 */   708,  708,  708,  708,  415,  444,  708,  708,  408,  708,
 /*  4720 */   253,  406,  411,  407,  708,  410,  708,  708,  708,  708,
 /*  4730 */   106,  708,  708,  708,  708,  708,  708,  708,  415,  708,
 /*  4740 */   708,  708,  426,  708,  708,  708,  708,  708,  708,  708,
 /*  4750 */   708,  708,  708,  708,  436,  708,  708,  708,  415,  708,
 /*  4760 */   708,  708,  708,  708,  708,  708,  708,  708,  455,  250,
 /*  4770 */   458,  219,  266,  267,  106,  460,  708,  443,  445,  446,
 /*  4780 */   418,  419,  420,  421,  422,  423,  424,  254,  432,  258,
 /*  4790 */   708,  437,  438,  708,  172,  708,  107,  708,  454,  456,
 /*  4800 */   457,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4810 */   708,  708,  455,  708,  708,  222,  541,  259,   73,  460,
 /*  4820 */   708,  443,  445,  446,  444,  708,  708,  408,  708,  253,
 /*  4830 */   406,  411,  407,  708,  410,  708,  708,  708,  172,  708,
 /*  4840 */   107,  708,  454,  456,  457,  708,  708,  708,  708,  708,
 /*  4850 */   708,  708,  708,  708,  708,  708,  708,  708,  444,  708,
 /*  4860 */   708,  408,  708,  253,  406,  411,  407,  415,  410,  708,
 /*  4870 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4880 */   708,  708,  708,  106,  708,  708,  708,  708,  708,  708,
 /*  4890 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4900 */   708,  415,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  4910 */   708,  708,  708,  708,  708,  708,  708,  106,  708,  708,
 /*  4920 */   708,  455,  708,  708,  222,  541,  315,   75,  460,  708,
 /*  4930 */   443,  445,  446,  444,  708,  708,  408,  708,  253,  406,
 /*  4940 */   411,  407,  708,  410,  708,  708,  708,  172,  708,  107,
 /*  4950 */   708,  454,  456,  457,  708,  455,  708,  708,  222,  541,
 /*  4960 */   312,   72,  460,  708,  443,  445,  446,  708,  708,  708,
 /*  4970 */   708,  708,  444,  708,  708,  408,  415,  253,  406,  411,
 /*  4980 */   407,  172,  410,  107,  708,  454,  456,  457,  708,  708,
 /*  4990 */   708,  708,  106,  708,  708,  708,  708,  708,  708,  708,
 /*  5000 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5010 */   708,  444,  708,  708,  408,  415,  253,  406,  411,  407,
 /*  5020 */   708,  410,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5030 */   455,  106,  708,  222,  541,  316,   74,  460,  708,  443,
 /*  5040 */   445,  446,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5050 */   708,  708,  708,  708,  415,  708,  172,  708,  107,  708,
 /*  5060 */   454,  456,  457,  708,  708,  708,  708,  708,  708,  455,
 /*  5070 */   106,  708,  220,  708,  708,   77,  538,  440,  443,  445,
 /*  5080 */   446,  708,  708,  444,  708,  708,  408,  708,  253,  406,
 /*  5090 */   411,  407,  708,  410,  708,  172,  708,  107,  708,  454,
 /*  5100 */   456,  457,  708,  708,  708,  708,  708,  708,  455,  708,
 /*  5110 */   708,  220,  708,  708,   76,  538,  441,  443,  445,  446,
 /*  5120 */   708,  708,  708,  708,  708,  708,  415,  708,  708,  708,
 /*  5130 */   708,  708,  708,  708,  172,  708,  107,  708,  454,  456,
 /*  5140 */   457,  708,  106,  708,  708,  444,  708,  708,  408,  708,
 /*  5150 */   253,  406,  411,  407,  708,  410,  708,  708,  708,  708,
 /*  5160 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5170 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5180 */   455,  708,  708,  222,  541,  313,  708,  460,  415,  443,
 /*  5190 */   445,  446,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5200 */   708,  708,  708,  708,  106,  708,  172,  708,  107,  708,
 /*  5210 */   454,  456,  457,  708,  708,  708,  708,  708,  708,  708,
 /*  5220 */   708,  708,  444,  708,  708,  408,  708,  253,  406,  411,
 /*  5230 */   407,  708,  410,  708,  708,  708,  708,  708,  708,  708,
 /*  5240 */   708,  708,  455,  708,  708,  222,  541,  314,  708,  460,
 /*  5250 */   708,  443,  445,  446,  708,  708,  708,  708,  708,  708,
 /*  5260 */   708,  708,  708,  708,  708,  415,  708,  708,  172,  708,
 /*  5270 */   107,  708,  454,  456,  457,  708,  708,  708,  708,  708,
 /*  5280 */   708,  106,  708,  708,  708,  708,  708,  708,  708,  444,
 /*  5290 */   708,  708,  408,  708,  253,  406,  411,  407,  708,  410,
 /*  5300 */   708,  444,  708,  708,  408,  708,  253,  406,  411,  407,
 /*  5310 */   708,  410,  708,  708,  708,  708,  708,  708,  708,  455,
 /*  5320 */   708,  708,  222,  541,  317,  708,  460,  708,  443,  445,
 /*  5330 */   446,  708,  415,  708,  708,  708,  708,  708,  708,  708,
 /*  5340 */   708,  708,  708,  708,  415,  172,  708,  107,  106,  454,
 /*  5350 */   456,  457,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5360 */   106,  444,  708,  708,  408,  708,  253,  406,  411,  407,
 /*  5370 */   708,  410,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5380 */   708,  708,  708,  708,  708,  708,  455,  708,  708,  222,
 /*  5390 */   541,  318,  708,  460,  708,  443,  445,  446,  455,  708,
 /*  5400 */   708,  220,  708,  708,  415,  538,  442,  443,  445,  446,
 /*  5410 */   708,  708,  172,  708,  107,  708,  454,  456,  457,  708,
 /*  5420 */   106,  708,  708,  708,  172,  708,  107,  708,  454,  456,
 /*  5430 */   457,  708,  708,  708,  708,  708,  708,  408,  708,  253,
 /*  5440 */   406,  411,  407,  708,  410,  408,  708,  253,  406,  411,
 /*  5450 */   407,  708,  410,  708,  708,  708,  708,  708,  455,  708,
 /*  5460 */   708,  220,  708,  708,  708,  538,  540,  443,  445,  446,
 /*  5470 */   708,  708,  708,  708,  708,  708,  708,  415,  708,  708,
 /*  5480 */   708,  708,  708,  708,  172,  415,  107,  708,  454,  456,
 /*  5490 */   457,  708,  708,  106,  708,  708,  708,  708,  708,  708,
 /*  5500 */   408,  106,  253,  406,  411,  407,  708,  410,  708,  708,
 /*  5510 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5520 */   408,  708,  253,  406,  411,  407,  708,  410,  708,  708,
 /*  5530 */   708,  455,  708,  708,  503,  708,  708,  708,  708,  455,
 /*  5540 */   415,  708,  503,  708,  180,  708,  708,  708,  708,  181,
 /*  5550 */   708,  708,  708,  708,  708,  708,  106,  165,  708,  107,
 /*  5560 */   415,  454,  456,  457,  708,  173,  708,  107,  708,  454,
 /*  5570 */   456,  457,  708,  708,  708,  708,  106,  708,  708,  708,
 /*  5580 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5590 */   708,  708,  708,  708,  455,  708,  408,  503,  253,  406,
 /*  5600 */   411,  407,  708,  410,  708,  708,  708,  708,  708,  708,
 /*  5610 */   708,  708,  708,  708,  455,  708,  708,  503,  708,  708,
 /*  5620 */   109,  708,  107,  708,  454,  456,  457,  708,  708,  708,
 /*  5630 */   708,  708,  708,  708,  708,  708,  415,  708,  708,  708,
 /*  5640 */   126,  708,  107,  708,  454,  456,  457,  708,  708,  708,
 /*  5650 */   708,  708,  106,  708,  708,  708,  408,  708,  253,  406,
 /*  5660 */   252,  407,  428,  410,  708,  708,  708,  708,  708,  708,
 /*  5670 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5680 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5690 */   455,  708,  708,  503,  708,  708,  415,  708,  708,  708,
 /*  5700 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5710 */   708,  708,  436,  708,  708,  708,  127,  708,  107,  708,
 /*  5720 */   454,  456,  457,  708,  708,  708,  708,  708,  708,  708,
 /*  5730 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5740 */   708,  559,  708,  708,  708,  254,  708,  708,  708,  437,
 /*  5750 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5760 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5770 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5780 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*  5790 */   708,  558,
);
static $yy_lookahead = array(
 /*     0 */   152,  186,  187,  155,  156,  157,  158,  159,  160,  161,
 /*    10 */   162,    6,    5,    8,  169,  170,   10,   12,   13,   14,
 /*    20 */    15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
 /*    30 */     1,   26,   27,   28,   74,   75,   31,   33,   34,   35,
 /*    40 */    36,   37,   38,  195,  167,  170,  201,  199,  200,  172,
 /*    50 */   173,  174,  175,  176,  177,  178,    7,  180,  181,  211,
 /*    60 */    33,   34,   35,   36,   37,   38,  218,  219,  220,  221,
 /*    70 */   222,   65,  224,  225,  226,  227,  201,  229,  230,  231,
 /*    80 */   232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*    90 */   242,  243,  244,  245,  246,    0,  248,  249,  250,  251,
 /*   100 */   252,  253,  254,   96,  256,   10,  258,  259,  260,  152,
 /*   110 */    61,   62,  155,  156,  157,  158,  159,  160,  161,  162,
 /*   120 */   190,    1,  192,  275,    4,  277,   58,  279,  280,  281,
 /*   130 */   151,  152,  153,  154,    1,  155,   48,    4,    5,  159,
 /*   140 */   160,  161,    9,  163,  164,  165,  166,  188,  189,  155,
 /*   150 */   191,  192,  195,  159,  160,  161,  199,  200,  164,  165,
 /*   160 */   166,    1,    1,  282,    4,    4,    1,   49,  211,    9,
 /*   170 */     9,   76,   77,   78,    2,  218,  219,  220,  221,  222,
 /*   180 */     1,  224,  225,  226,  227,  200,  229,  230,  231,  232,
 /*   190 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*   200 */   243,  244,  245,  246,   39,  248,  249,  250,  251,  252,
 /*   210 */   253,  254,   49,  256,    5,  258,  259,  260,    1,  152,
 /*   220 */    87,    4,  155,  156,  157,  158,  159,  160,  161,  162,
 /*   230 */   112,  113,  275,  283,  277,  285,  279,  280,  281,  155,
 /*   240 */    79,  157,  158,  159,  160,   80,  162,   68,   49,   50,
 /*   250 */    51,   52,   56,   54,   58,   46,   47,  103,  104,  105,
 /*   260 */    99,  100,  195,   64,  155,  102,  199,  200,  159,  160,
 /*   270 */   161,   10,   76,  294,  295,  296,  297,  203,  211,  195,
 /*   280 */   301,  302,  303,  304,   88,   89,   90,   91,  210,   93,
 /*   290 */    94,   95,  208,  215,  216,  211,  229,  230,   10,  232,
 /*   300 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*   310 */   243,  244,  245,  246,    0,  248,  249,  250,  251,  252,
 /*   320 */   253,  254,  213,  256,   10,  258,  259,  260,    1,    2,
 /*   330 */     3,    4,    1,    2,    3,    4,    9,   76,   77,   78,
 /*   340 */     9,  156,  275,  185,  277,  187,  279,  280,  281,  155,
 /*   350 */   156,  157,  158,  159,  160,  161,  162,  155,   46,   47,
 /*   360 */   228,  159,  160,  161,   76,   77,  155,  293,   85,   86,
 /*   370 */   159,  160,  161,   46,   47,   56,   49,   46,   47,    2,
 /*   380 */     3,  196,  197,  198,  199,  200,   88,  278,   90,  195,
 /*   390 */   223,   77,   78,  199,  200,   76,  223,   70,   71,   72,
 /*   400 */    73,   70,   71,   72,   73,  211,   79,  217,    1,   10,
 /*   410 */    91,    4,   93,   94,   56,   57,    9,  217,   41,   42,
 /*   420 */    43,   44,   45,   46,   47,    9,   99,  100,  234,  102,
 /*   430 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*   440 */   246,    1,  248,  249,    4,   46,   47,   70,   32,    9,
 /*   450 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   460 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   470 */   143,  144,  145,  146,  147,  148,  149,    1,    2,    3,
 /*   480 */     4,    1,    2,    3,    4,    9,   79,  155,    5,    9,
 /*   490 */   155,  159,  160,  161,  159,  160,  161,   56,  155,  156,
 /*   500 */   157,  158,  159,  160,  161,  162,   99,  100,  101,    5,
 /*   510 */   308,  309,  310,  202,   10,   75,  205,  206,  207,   79,
 /*   520 */   309,  310,   46,   47,  298,    1,    2,    3,    4,   88,
 /*   530 */    89,   90,   91,    9,   93,   94,    5,  247,  195,   99,
 /*   540 */   100,  101,  199,  200,  212,  213,   70,   71,   72,   73,
 /*   550 */    70,   71,   72,   73,  211,   79,  106,  107,  108,  109,
 /*   560 */   110,  111,  282,    1,  284,   82,  286,  287,   68,   69,
 /*   570 */    46,   47,    9,   49,   11,   99,  100,   46,   47,  236,
 /*   580 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*   590 */    49,  248,  249,   10,   70,   71,   72,   73,  247,  123,
 /*   600 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*   610 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   620 */   144,  145,  146,  147,  148,  149,  102,  155,    1,   46,
 /*   630 */    47,  159,  160,  161,  155,  156,  157,  158,  159,  160,
 /*   640 */   161,  162,   80,  274,  103,  104,  105,  123,  124,  125,
 /*   650 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   660 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*   670 */   146,  147,  148,  149,  195,    2,    3,  155,  199,  200,
 /*   680 */     1,  159,  160,    4,  162,  213,  156,  155,    9,    5,
 /*   690 */   211,  159,  160,  161,   10,  114,  115,  218,  219,  220,
 /*   700 */   221,  222,  214,  224,  225,  226,  227,   80,  229,    5,
 /*   710 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*   720 */   241,  242,  243,  244,  245,  246,  184,  248,  249,  155,
 /*   730 */   156,  157,  158,  159,  160,  161,  162,    5,  152,   10,
 /*   740 */   184,  155,   10,  157,  158,  159,  160,  155,  162,    5,
 /*   750 */   278,  159,  160,  161,   75,  155,  312,  155,   79,  159,
 /*   760 */   160,  159,  160,  155,    5,   61,  155,  159,  160,  195,
 /*   770 */   159,  160,  161,  199,  200,   46,   47,   81,   99,  100,
 /*   780 */   101,  195,    9,  155,    9,  211,  263,  159,  160,  161,
 /*   790 */    46,   47,  218,  219,  220,  221,  222,  211,  224,  225,
 /*   800 */   226,  227,   29,  229,   29,  231,  232,  233,  234,  235,
 /*   810 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*   820 */   246,  117,  248,  249,  155,  156,  157,  158,  159,  160,
 /*   830 */   161,  162,    5,   96,   10,  249,  250,  251,  252,  253,
 /*   840 */   254,  213,  256,    0,  258,  259,  260,   88,  248,   90,
 /*   850 */   248,   97,   40,   10,    5,  268,  248,   45,  266,   10,
 /*   860 */     6,  275,    8,  277,  195,  279,  280,  281,  199,  200,
 /*   870 */    46,   47,    1,   46,   47,   49,  276,   98,  276,  155,
 /*   880 */   211,  157,  158,  159,  160,  269,  162,  218,  219,  220,
 /*   890 */   221,  222,  306,  224,  225,  226,  227,   48,  229,  270,
 /*   900 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*   910 */   241,  242,  243,  244,  245,  246,  288,  248,  249,  195,
 /*   920 */    77,   78,   10,   59,   60,  155,  156,  157,  158,  159,
 /*   930 */   160,  161,  162,   83,  152,  211,   10,  155,  112,  157,
 /*   940 */   158,  159,  160,   79,  162,    5,  271,   10,   59,   60,
 /*   950 */    10,   80,    9,    9,   11,   11,   76,   77,   46,   47,
 /*   960 */     9,    9,   11,   11,   40,  195,  168,  293,  113,  199,
 /*   970 */   200,    1,   46,   47,    4,  293,   55,  195,  209,    9,
 /*   980 */   116,  211,  118,   46,   47,  121,   46,   47,  218,  219,
 /*   990 */   220,  221,  222,  211,  224,  225,  226,  227,  215,  229,
 /*  1000 */    10,  231,  232,  233,  234,  235,  236,  237,  238,  239,
 /*  1010 */   240,  241,  242,  243,  244,  245,  246,   10,  248,  249,
 /*  1020 */   155,  156,  157,  158,  159,  160,  161,  162,    4,   58,
 /*  1030 */    10,  249,  250,  251,  252,  253,  254,   10,  256,    5,
 /*  1040 */   258,  259,  260,    5,   10,   75,    5,    5,   10,   79,
 /*  1050 */   216,   10,   10,   46,   47,   65,   58,  275,  171,  277,
 /*  1060 */   195,  279,  280,  281,  199,  200,   46,   47,    2,   99,
 /*  1070 */   100,  101,  179,   46,   47,  155,  211,  157,  158,  159,
 /*  1080 */   160,  179,  162,  218,  219,  220,  221,  222,    5,  224,
 /*  1090 */   225,  226,  227,   10,  229,  179,  231,  232,  233,  234,
 /*  1100 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  1110 */   245,  246,    5,  248,  249,  195,    5,   10,  179,   10,
 /*  1120 */   179,  155,  156,  157,  158,  159,  160,  161,  162,   46,
 /*  1130 */    47,  211,  179,  155,   10,  157,  158,  159,  160,   10,
 /*  1140 */   162,  179,   10,    5,   10,    2,   10,  179,   10,  182,
 /*  1150 */     2,  179,  179,   46,   47,   46,   47,   46,   47,  179,
 /*  1160 */   179,  195,  183,  155,  182,  199,  200,  159,  160,  161,
 /*  1170 */    46,   47,  183,  195,  182,   46,   47,  211,   46,   47,
 /*  1180 */    46,   47,   46,   47,  218,  219,  220,  221,  222,  211,
 /*  1190 */   224,  225,  226,  227,  183,  229,  182,  231,  232,  233,
 /*  1200 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  1210 */   244,  245,  246,   10,  248,  249,    1,    2,    3,    4,
 /*  1220 */    10,  213,   10,   29,    9,  155,    2,  157,  158,  159,
 /*  1230 */   160,   10,  162,   10,  184,   10,  184,  194,    2,  155,
 /*  1240 */   156,  157,  158,  159,  160,  161,  162,  193,  193,   46,
 /*  1250 */    47,  194,  119,  299,   10,   40,   46,   47,   46,   47,
 /*  1260 */    45,   46,   47,   96,  305,  195,   39,   46,   47,   46,
 /*  1270 */    47,   46,   47,   39,  204,    9,   39,   68,  300,  195,
 /*  1280 */    10,    9,   78,  199,  200,   70,   71,   72,   73,    9,
 /*  1290 */    46,   47,    5,   10,    9,  211,   10,   89,   10,    9,
 /*  1300 */   292,    9,    9,  219,  220,  221,  222,   78,  224,  225,
 /*  1310 */   226,  227,    9,  229,    9,  231,  232,  233,  234,  235,
 /*  1320 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  1330 */   246,    9,  248,  249,   46,   47,    9,    9,  123,  124,
 /*  1340 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1350 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1360 */   145,  146,  147,  148,  149,    1,    2,    3,    4,   10,
 /*  1370 */    10,    9,  155,    9,  157,  158,  159,  160,    9,  162,
 /*  1380 */    89,   10,    9,  155,    9,  157,  158,  159,  160,    9,
 /*  1390 */   162,    9,    9,    9,    9,    9,    9,    9,  155,    9,
 /*  1400 */   157,  158,  159,  160,    9,  162,   46,   47,    9,    9,
 /*  1410 */    46,   47,  195,    1,    2,    3,    4,   46,   47,    9,
 /*  1420 */     9,    9,    9,  195,   66,  102,   65,   10,  211,    9,
 /*  1430 */    67,   10,   67,   92,   70,   71,   72,   73,  195,  211,
 /*  1440 */    84,    9,   39,   10,   10,    2,    2,    2,  100,    9,
 /*  1450 */    84,    5,   84,    5,  211,  112,  112,   53,   46,   47,
 /*  1460 */    45,   60,    9,    9,   59,   63,  102,   10,    6,   10,
 /*  1470 */     7,   10,   25,    9,   32,    9,   11,   10,    9,   27,
 /*  1480 */    10,   10,   70,   71,   72,   73,    9,  123,  124,  125,
 /*  1490 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  1500 */   136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
 /*  1510 */   146,  147,  148,  149,  102,   10,   10,    9,   30,   10,
 /*  1520 */    10,    9,   32,   10,   10,    9,  100,   10,   10,    9,
 /*  1530 */     9,  122,   10,    9,    9,  123,  124,  125,  126,  127,
 /*  1540 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  1550 */   138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
 /*  1560 */   148,  149,    1,    2,    3,    4,   10,   10,   10,   10,
 /*  1570 */     9,  155,  156,  157,  158,  159,  160,  161,  162,  155,
 /*  1580 */     9,  157,  158,  159,  160,   10,  162,   10,    9,    9,
 /*  1590 */   155,   10,  157,  158,  159,  160,  161,  162,   10,  120,
 /*  1600 */    10,   99,   87,    7,  106,  313,  313,   46,   47,  313,
 /*  1610 */   313,  195,  313,  313,  313,  199,  200,  313,  313,  195,
 /*  1620 */   313,  313,  313,  313,  313,  313,  313,  211,  313,   68,
 /*  1630 */   195,   70,   71,   72,   73,  211,  220,  221,  222,  313,
 /*  1640 */   224,  225,  226,  227,  313,  229,  211,  231,  232,  233,
 /*  1650 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  1660 */   244,  245,  246,  313,  248,  249,    1,    2,    3,    4,
 /*  1670 */   313,  313,  313,  313,    9,  240,  313,  313,  313,  244,
 /*  1680 */   313,  313,  313,  248,  123,  124,  125,  126,  127,  128,
 /*  1690 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1700 */   139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
 /*  1710 */   149,   46,   47,  313,  313,  313,  313,  313,  313,  313,
 /*  1720 */   313,  313,  313,  313,  289,  290,  313,  313,  313,  313,
 /*  1730 */   313,  313,  313,  313,  313,   70,   71,   72,   73,  313,
 /*  1740 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1750 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1760 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1770 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1780 */   313,  313,  313,  313,  313,  313,  313,  313,  123,  124,
 /*  1790 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1800 */   135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
 /*  1810 */   145,  146,  147,  148,  149,  155,  156,  157,  158,  159,
 /*  1820 */   160,  161,  162,  313,  313,  313,  313,  313,  313,  313,
 /*  1830 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1840 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1850 */   313,  313,  313,  313,  313,  195,  313,  313,  313,  199,
 /*  1860 */   200,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1870 */   313,  211,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1880 */   313,  221,  222,  313,  224,  225,  226,  227,  313,  229,
 /*  1890 */   313,  231,  232,  233,  234,  235,  236,  237,  238,  239,
 /*  1900 */   240,  241,  242,  243,  244,  245,  246,  313,  248,  249,
 /*  1910 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1920 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1930 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1940 */   313,  313,  313,  313,  155,  156,  157,  158,  159,  160,
 /*  1950 */   161,  162,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1960 */   313,  313,  313,  155,  156,  157,  158,  159,  160,  161,
 /*  1970 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1980 */   313,  313,  313,  313,  195,  313,  313,  313,  199,  200,
 /*  1990 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2000 */   211,  313,  313,  195,  313,  313,  313,  199,  200,  313,
 /*  2010 */   313,  313,  313,  313,  313,  313,  227,  313,  229,  211,
 /*  2020 */   231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  2030 */   241,  242,  243,  244,  245,  246,  313,  248,  249,  313,
 /*  2040 */   232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*  2050 */   242,  243,  244,  245,  246,  313,  248,  249,  155,  156,
 /*  2060 */   157,  158,  159,  160,  161,  162,  313,  313,  313,  261,
 /*  2070 */   313,  313,  264,  265,  313,  313,  313,  313,  313,  313,
 /*  2080 */   291,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2090 */   313,  313,  313,  313,  313,  313,  313,  313,  195,  313,
 /*  2100 */   313,  313,  199,  200,  313,  313,  313,  313,  313,  313,
 /*  2110 */   313,  313,  313,  313,  211,  313,  313,  313,  313,  155,
 /*  2120 */   156,  157,  158,  159,  160,  161,  162,  313,  313,  313,
 /*  2130 */   227,  313,  229,  313,  231,  232,  233,  234,  235,  236,
 /*  2140 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  2150 */   313,  248,  249,    1,  313,  313,    4,  313,  313,  195,
 /*  2160 */   313,    9,  313,  199,  200,  313,  313,  313,  313,  313,
 /*  2170 */   313,  313,  313,  313,  313,  211,  155,  156,  157,  158,
 /*  2180 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  2190 */   313,  313,   40,  313,  313,  313,  232,  233,  234,  235,
 /*  2200 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  2210 */   246,  313,  248,  249,  313,  313,  195,  313,  313,  313,
 /*  2220 */   199,  200,  313,  313,  313,  313,  313,  313,  264,  265,
 /*  2230 */   313,   79,  211,  313,  313,  313,  155,  156,  157,  158,
 /*  2240 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  2250 */   313,   99,  100,  232,  233,  234,  235,  236,  237,  238,
 /*  2260 */   239,  240,  241,  242,  243,  244,  245,  246,  313,  248,
 /*  2270 */   249,  313,  313,  313,  313,  313,  195,  313,  313,  313,
 /*  2280 */   199,  200,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2290 */   313,  313,  211,  272,  273,  155,  156,  157,  158,  159,
 /*  2300 */   160,  161,  162,  313,  313,  313,  313,  313,  313,  313,
 /*  2310 */   313,  313,  313,  232,  233,  234,  235,  236,  237,  238,
 /*  2320 */   239,  240,  241,  242,  243,  244,  245,  246,  313,  248,
 /*  2330 */   249,  313,  313,  313,  313,  195,  313,  313,  313,  199,
 /*  2340 */   200,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2350 */   313,  211,  313,  155,  156,  157,  158,  159,  160,  161,
 /*  2360 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  229,
 /*  2370 */   313,  313,  232,  233,  234,  235,  236,  237,  238,  239,
 /*  2380 */   240,  241,  242,  243,  244,  245,  246,  313,  248,  249,
 /*  2390 */   313,  313,  311,  195,  313,  313,  313,  199,  200,  313,
 /*  2400 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  211,
 /*  2410 */   155,  156,  157,  158,  159,  160,  161,  162,  313,  313,
 /*  2420 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2430 */   232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*  2440 */   242,  243,  244,  245,  246,  313,  248,  249,  313,  313,
 /*  2450 */   195,  313,  313,  313,  199,  200,  313,  313,  313,  313,
 /*  2460 */   313,  313,  313,  313,  313,  313,  211,  313,  313,  313,
 /*  2470 */   313,  273,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  2480 */   313,  313,  313,  313,  313,  313,  313,  232,  233,  234,
 /*  2490 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  2500 */   245,  246,  313,  248,  249,  313,  313,  313,  313,  313,
 /*  2510 */   313,  313,  195,  313,  313,  313,  199,  200,  313,  313,
 /*  2520 */   313,  313,  313,  313,  313,  313,  313,  313,  211,  155,
 /*  2530 */   156,  157,  158,  159,  160,  161,  162,  313,  313,  313,
 /*  2540 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2550 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  2560 */   243,  244,  245,  246,  313,  248,  249,  313,  313,  195,
 /*  2570 */   313,  313,  313,  199,  200,  313,  313,  313,  313,  313,
 /*  2580 */   313,  313,  313,  313,  313,  211,  155,  156,  157,  158,
 /*  2590 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  2600 */   313,  313,  313,  313,  313,  313,  313,  233,  234,  235,
 /*  2610 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  2620 */   246,  313,  248,  249,  313,  313,  195,  313,  313,  313,
 /*  2630 */   199,  200,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2640 */   313,  313,  211,  155,  156,  157,  158,  159,  160,  161,
 /*  2650 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2660 */   313,  313,  313,  313,  233,  234,  235,  236,  237,  238,
 /*  2670 */   239,  240,  241,  242,  243,  244,  245,  246,  313,  248,
 /*  2680 */   249,  313,  313,  195,  313,  313,  313,  199,  200,  313,
 /*  2690 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  211,
 /*  2700 */   313,  313,  313,  313,  313,  313,  155,  156,  157,  158,
 /*  2710 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  2720 */   313,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*  2730 */   242,  243,  244,  245,  246,  313,  248,  249,  313,  313,
 /*  2740 */   313,  313,  313,  313,  313,  313,  195,  313,  313,  313,
 /*  2750 */   199,  200,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2760 */   313,  313,  211,  155,  156,  157,  158,  159,  160,  161,
 /*  2770 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2780 */   313,  313,  313,  313,  233,  234,  235,  236,  237,  238,
 /*  2790 */   239,  240,  241,  242,  243,  244,  245,  246,  313,  248,
 /*  2800 */   249,  313,  313,  195,  313,  313,  313,  199,  200,  313,
 /*  2810 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  211,
 /*  2820 */   155,  156,  157,  158,  159,  160,  161,  162,  313,  313,
 /*  2830 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2840 */   313,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*  2850 */   242,  243,  244,  245,  246,  313,  248,  249,  313,  313,
 /*  2860 */   195,  313,  313,  313,  199,  200,  313,  313,  313,  313,
 /*  2870 */   313,  313,  313,  313,  313,  313,  211,  155,  156,  157,
 /*  2880 */   158,  159,  160,  161,  162,  313,  313,  313,  313,  313,
 /*  2890 */   313,  313,  313,  313,  313,  313,  313,  313,  233,  234,
 /*  2900 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  2910 */   245,  246,  313,  248,  249,  313,  313,  195,  313,  313,
 /*  2920 */   313,  199,  200,  313,  313,  313,  313,  313,  313,  313,
 /*  2930 */   313,  313,  313,  211,  313,  313,  313,  313,  313,  313,
 /*  2940 */   155,  156,  157,  158,  159,  160,  161,  162,  313,  313,
 /*  2950 */   313,  313,  313,  313,  313,  233,  234,  235,  236,  237,
 /*  2960 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  313,
 /*  2970 */   248,  249,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2980 */   195,  313,  313,  313,  199,  200,  313,  313,  313,  313,
 /*  2990 */   313,  313,  313,  313,  313,  313,  211,  155,  156,  157,
 /*  3000 */   158,  159,  160,  161,  162,  313,  313,  313,  313,  313,
 /*  3010 */   313,  313,  313,  313,  313,  313,  313,  313,  233,  234,
 /*  3020 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  3030 */   245,  246,  313,  248,  249,  313,  313,  195,  313,  313,
 /*  3040 */   313,  199,  200,  313,  313,  313,  313,  313,  313,  313,
 /*  3050 */   313,  313,  313,  211,  155,  156,  157,  158,  159,  160,
 /*  3060 */   161,  162,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3070 */   313,  313,  313,  313,  313,  233,  234,  235,  236,  237,
 /*  3080 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  313,
 /*  3090 */   248,  249,  313,  313,  195,  313,  313,  313,  199,  200,
 /*  3100 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3110 */   211,  155,  156,  157,  158,  159,  160,  161,  162,  313,
 /*  3120 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3130 */   313,  313,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  3140 */   241,  242,  243,  244,  245,  246,  313,  248,  249,  313,
 /*  3150 */   313,  195,  313,  313,  313,  199,  200,  313,  313,  313,
 /*  3160 */   313,  313,  313,  313,  313,  313,  313,  211,  313,  313,
 /*  3170 */   313,  313,  313,  313,  155,  156,  157,  158,  159,  160,
 /*  3180 */   161,  162,  313,  313,  313,  313,  313,  313,  313,  233,
 /*  3190 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  3200 */   244,  245,  246,  313,  248,  249,  313,  313,  313,  313,
 /*  3210 */   313,  313,  313,  313,  195,  313,  313,  313,  199,  200,
 /*  3220 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3230 */   211,  155,  156,  157,  158,  159,  160,  161,  162,  313,
 /*  3240 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3250 */   313,  313,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  3260 */   241,  242,  243,  244,  245,  246,  313,  248,  249,  313,
 /*  3270 */   313,  195,  313,  313,  313,  199,  200,  313,  313,  313,
 /*  3280 */   313,  313,  313,  313,  313,  313,  313,  211,  155,  156,
 /*  3290 */   157,  158,  159,  160,  161,  162,  313,  313,  313,  313,
 /*  3300 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  233,
 /*  3310 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  3320 */   244,  245,  246,  313,  248,  249,  313,  313,  195,  313,
 /*  3330 */   313,  313,  199,  200,  313,  313,  313,  313,  313,  313,
 /*  3340 */   313,  313,  313,  313,  211,  155,  156,  157,  158,  159,
 /*  3350 */   160,  161,  162,  313,  313,  313,  313,  313,  313,  313,
 /*  3360 */   313,  313,  313,  313,  313,  313,  233,  234,  235,  236,
 /*  3370 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  3380 */   313,  248,  249,  313,  313,  195,  313,  313,  313,  199,
 /*  3390 */   200,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3400 */   313,  211,  313,  313,  313,  313,  313,  313,  155,  156,
 /*  3410 */   157,  158,  159,  160,  161,  162,  313,  313,  313,  313,
 /*  3420 */   313,  313,  313,  233,  234,  235,  236,  237,  238,  239,
 /*  3430 */   240,  241,  242,  243,  244,  245,  246,  313,  248,  249,
 /*  3440 */   313,  313,  313,  313,  313,  313,  313,  313,  195,  313,
 /*  3450 */   313,  313,  199,  200,  313,  313,  313,  313,  313,  313,
 /*  3460 */   313,  313,  313,  313,  211,  155,  156,  157,  158,  159,
 /*  3470 */   160,  161,  162,  313,  313,  313,  313,  313,  313,  313,
 /*  3480 */   313,  313,  313,  313,  313,  313,  233,  234,  235,  236,
 /*  3490 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  3500 */   313,  248,  249,  313,  313,  195,  313,  313,  313,  199,
 /*  3510 */   200,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3520 */   313,  211,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  3530 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3540 */   313,  313,  313,  233,  234,  235,  236,  237,  238,  239,
 /*  3550 */   240,  241,  242,  243,  244,  245,  246,  313,  248,  249,
 /*  3560 */   313,  313,  195,  313,  313,  313,  199,  200,  313,  313,
 /*  3570 */   313,  313,  313,  313,  313,  313,  313,  313,  211,  155,
 /*  3580 */   156,  157,  158,  159,  160,  161,  162,  313,  313,  313,
 /*  3590 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3600 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  3610 */   243,  244,  245,  246,  313,  248,  249,  313,  313,  195,
 /*  3620 */   313,  313,  313,  199,  200,  313,  313,  313,  313,  313,
 /*  3630 */   313,  313,  313,  313,  313,  211,  313,  313,  313,  313,
 /*  3640 */   313,  313,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  3650 */   313,  313,  313,  313,  313,  313,  313,  233,  234,  235,
 /*  3660 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  3670 */   246,  313,  248,  249,  313,  313,  313,  313,  313,  313,
 /*  3680 */   313,  313,  195,  313,  313,  313,  199,  200,  313,  313,
 /*  3690 */   313,  313,  313,  313,  313,  313,  313,  313,  211,  155,
 /*  3700 */   156,  157,  158,  159,  160,  161,  162,  313,  313,  313,
 /*  3710 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3720 */   233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
 /*  3730 */   243,  244,  245,  246,  313,  248,  249,  313,  313,  195,
 /*  3740 */   313,  313,  313,  199,  200,  313,  313,  313,  313,  313,
 /*  3750 */   313,  313,  313,  313,  313,  211,  155,  156,  157,  158,
 /*  3760 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  3770 */   313,  313,  313,  313,  313,  313,  313,  233,  234,  235,
 /*  3780 */   236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
 /*  3790 */   246,  313,  248,  249,  313,  313,  195,  313,  313,  313,
 /*  3800 */   199,  200,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3810 */   313,  313,  211,  155,  156,  157,  158,  159,  160,  161,
 /*  3820 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3830 */   313,  313,  313,  313,  233,  234,  235,  236,  237,  238,
 /*  3840 */   239,  240,  241,  242,  243,  244,  245,  246,  313,  248,
 /*  3850 */   249,  313,  313,  195,  313,  313,  313,  199,  200,  313,
 /*  3860 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  211,
 /*  3870 */   313,  313,  313,  313,  313,  313,  155,  156,  157,  158,
 /*  3880 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  3890 */   313,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*  3900 */   242,  243,  244,  245,  246,  313,  248,  249,  313,  313,
 /*  3910 */   313,  313,  313,  313,  313,  313,  195,  313,  313,  313,
 /*  3920 */   199,  200,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3930 */   313,  313,  211,  155,  156,  157,  158,  159,  160,  161,
 /*  3940 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3950 */   313,  313,  313,  313,  233,  234,  235,  236,  237,  238,
 /*  3960 */   239,  240,  241,  242,  243,  244,  245,  246,  313,  248,
 /*  3970 */   249,  313,  313,  195,  313,  313,  313,  199,  200,  313,
 /*  3980 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  211,
 /*  3990 */   155,  156,  157,  158,  159,  160,  161,  162,  313,  313,
 /*  4000 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4010 */   313,  233,  234,  235,  236,  237,  238,  239,  240,  241,
 /*  4020 */   242,  243,  244,  245,  246,  313,  248,  249,  313,  313,
 /*  4030 */   195,  313,  313,  313,  199,  200,  313,  313,  313,  313,
 /*  4040 */   313,  313,  313,  313,  313,  313,  211,  155,  156,  157,
 /*  4050 */   158,  159,  160,  161,  162,  313,  313,  313,  313,  313,
 /*  4060 */   313,  313,  313,  313,  313,  313,  313,  313,  233,  234,
 /*  4070 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  4080 */   245,  246,  313,  248,  249,  313,  313,  195,  313,  313,
 /*  4090 */   313,  199,  200,  313,  313,  313,  313,  313,  313,  313,
 /*  4100 */   313,  313,  313,  211,  313,  313,  313,  313,  313,  313,
 /*  4110 */   155,  156,  157,  158,  159,  160,  161,  162,  313,  313,
 /*  4120 */   313,  313,  313,  313,  313,  233,  234,  235,  236,  237,
 /*  4130 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  313,
 /*  4140 */   248,  249,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4150 */   195,  313,  313,  313,  199,  200,  313,  313,  313,  313,
 /*  4160 */   313,  313,  313,  313,  313,  313,  211,  155,  156,  157,
 /*  4170 */   158,  159,  160,  161,  162,  313,  313,  313,  313,  313,
 /*  4180 */   313,  313,  313,  313,  313,  313,  313,  313,  233,  234,
 /*  4190 */   235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
 /*  4200 */   245,  246,  313,  248,  249,  313,  313,  195,  313,  313,
 /*  4210 */   313,  199,  200,  313,  313,  313,  313,  313,  313,  313,
 /*  4220 */   313,  313,  313,  211,  155,  156,  157,  158,  159,  160,
 /*  4230 */   161,  162,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4240 */   313,  313,  313,  313,  313,  233,  234,  235,  236,  237,
 /*  4250 */   238,  239,  240,  241,  242,  243,  244,  245,  246,  313,
 /*  4260 */   248,  249,  313,  313,  195,  313,  313,  313,  199,  200,
 /*  4270 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4280 */   211,  155,  156,  157,  158,  159,  160,  161,  162,  313,
 /*  4290 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4300 */   313,  313,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  4310 */   241,  242,  243,  244,  245,  246,  313,  248,  249,  313,
 /*  4320 */   313,  195,  313,  313,  313,  199,  200,  313,  313,  313,
 /*  4330 */   313,  313,  313,  313,  313,  313,  313,  211,  313,  313,
 /*  4340 */   313,  313,  313,  313,  155,  156,  157,  158,  159,  160,
 /*  4350 */   161,  162,  313,  313,  313,  313,  313,  313,  313,  233,
 /*  4360 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  4370 */   244,  245,  246,  313,  248,  249,  313,  313,  313,  313,
 /*  4380 */   313,  313,  313,  313,  195,  313,  313,  313,  199,  200,
 /*  4390 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4400 */   211,  155,  156,  157,  158,  159,  160,  161,  162,  152,
 /*  4410 */   313,  313,  155,  313,  157,  158,  159,  160,  161,  162,
 /*  4420 */   313,  313,  233,  234,  235,  236,  237,  238,  239,  240,
 /*  4430 */   241,  242,  243,  244,  245,  246,  313,  248,  249,  313,
 /*  4440 */   313,  195,  313,  313,  313,  199,  200,  313,  313,  313,
 /*  4450 */   313,  313,  195,  313,  313,  313,  313,  211,  155,  156,
 /*  4460 */   157,  158,  159,  160,  161,  162,  313,  313,  211,  313,
 /*  4470 */   213,  313,  313,  313,  313,  313,  313,  313,  313,  233,
 /*  4480 */   234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
 /*  4490 */   244,  245,  246,  313,  248,  249,  313,  313,  195,  313,
 /*  4500 */   313,  313,  199,  200,  313,  313,  249,  250,  251,  252,
 /*  4510 */   253,  254,  313,  256,  211,  258,  259,  260,  152,  313,
 /*  4520 */   313,  155,  313,  157,  158,  159,  160,  313,  162,  313,
 /*  4530 */   313,  313,  275,  313,  277,  313,  279,  280,  281,  236,
 /*  4540 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  4550 */   313,  248,  249,  313,  313,  313,  313,  313,  313,  313,
 /*  4560 */   313,  195,  152,  313,  307,  155,  313,  157,  158,  159,
 /*  4570 */   160,  313,  162,  313,  313,  313,  313,  211,  313,  313,
 /*  4580 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4590 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4600 */   313,  313,  313,  313,  313,  195,  313,  313,  313,  313,
 /*  4610 */   313,  313,  313,  313,  313,  249,  250,  251,  252,  253,
 /*  4620 */   254,  211,  256,  313,  258,  259,  260,  313,  313,  313,
 /*  4630 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4640 */   313,  275,  313,  277,  313,  279,  280,  281,  313,  313,
 /*  4650 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  249,
 /*  4660 */   250,  251,  252,  253,  254,  313,  256,  313,  258,  259,
 /*  4670 */   260,  152,  313,  313,  155,  313,  157,  158,  159,  160,
 /*  4680 */   313,  162,  313,  313,  313,  275,  313,  277,  313,  279,
 /*  4690 */   280,  281,  313,  313,  313,  313,  313,  313,  155,  156,
 /*  4700 */   157,  158,  159,  160,  161,  162,  313,  313,  313,  313,
 /*  4710 */   313,  313,  313,  313,  195,  152,  313,  313,  155,  313,
 /*  4720 */   157,  158,  159,  160,  313,  162,  313,  313,  313,  313,
 /*  4730 */   211,  313,  313,  313,  313,  313,  313,  313,  195,  313,
 /*  4740 */   313,  313,  199,  313,  313,  313,  313,  313,  313,  313,
 /*  4750 */   313,  313,  313,  313,  211,  313,  313,  313,  195,  313,
 /*  4760 */   313,  313,  313,  313,  313,  313,  313,  313,  249,  250,
 /*  4770 */   251,  252,  253,  254,  211,  256,  313,  258,  259,  260,
 /*  4780 */   237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
 /*  4790 */   313,  248,  249,  313,  275,  313,  277,  313,  279,  280,
 /*  4800 */   281,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4810 */   313,  313,  249,  313,  313,  252,  253,  254,  255,  256,
 /*  4820 */   313,  258,  259,  260,  152,  313,  313,  155,  313,  157,
 /*  4830 */   158,  159,  160,  313,  162,  313,  313,  313,  275,  313,
 /*  4840 */   277,  313,  279,  280,  281,  313,  313,  313,  313,  313,
 /*  4850 */   313,  313,  313,  313,  313,  313,  313,  313,  152,  313,
 /*  4860 */   313,  155,  313,  157,  158,  159,  160,  195,  162,  313,
 /*  4870 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4880 */   313,  313,  313,  211,  313,  313,  313,  313,  313,  313,
 /*  4890 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4900 */   313,  195,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4910 */   313,  313,  313,  313,  313,  313,  313,  211,  313,  313,
 /*  4920 */   313,  249,  313,  313,  252,  253,  254,  255,  256,  313,
 /*  4930 */   258,  259,  260,  152,  313,  313,  155,  313,  157,  158,
 /*  4940 */   159,  160,  313,  162,  313,  313,  313,  275,  313,  277,
 /*  4950 */   313,  279,  280,  281,  313,  249,  313,  313,  252,  253,
 /*  4960 */   254,  255,  256,  313,  258,  259,  260,  313,  313,  313,
 /*  4970 */   313,  313,  152,  313,  313,  155,  195,  157,  158,  159,
 /*  4980 */   160,  275,  162,  277,  313,  279,  280,  281,  313,  313,
 /*  4990 */   313,  313,  211,  313,  313,  313,  313,  313,  313,  313,
 /*  5000 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5010 */   313,  152,  313,  313,  155,  195,  157,  158,  159,  160,
 /*  5020 */   313,  162,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5030 */   249,  211,  313,  252,  253,  254,  255,  256,  313,  258,
 /*  5040 */   259,  260,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5050 */   313,  313,  313,  313,  195,  313,  275,  313,  277,  313,
 /*  5060 */   279,  280,  281,  313,  313,  313,  313,  313,  313,  249,
 /*  5070 */   211,  313,  252,  313,  313,  255,  256,  257,  258,  259,
 /*  5080 */   260,  313,  313,  152,  313,  313,  155,  313,  157,  158,
 /*  5090 */   159,  160,  313,  162,  313,  275,  313,  277,  313,  279,
 /*  5100 */   280,  281,  313,  313,  313,  313,  313,  313,  249,  313,
 /*  5110 */   313,  252,  313,  313,  255,  256,  257,  258,  259,  260,
 /*  5120 */   313,  313,  313,  313,  313,  313,  195,  313,  313,  313,
 /*  5130 */   313,  313,  313,  313,  275,  313,  277,  313,  279,  280,
 /*  5140 */   281,  313,  211,  313,  313,  152,  313,  313,  155,  313,
 /*  5150 */   157,  158,  159,  160,  313,  162,  313,  313,  313,  313,
 /*  5160 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5170 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5180 */   249,  313,  313,  252,  253,  254,  313,  256,  195,  258,
 /*  5190 */   259,  260,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5200 */   313,  313,  313,  313,  211,  313,  275,  313,  277,  313,
 /*  5210 */   279,  280,  281,  313,  313,  313,  313,  313,  313,  313,
 /*  5220 */   313,  313,  152,  313,  313,  155,  313,  157,  158,  159,
 /*  5230 */   160,  313,  162,  313,  313,  313,  313,  313,  313,  313,
 /*  5240 */   313,  313,  249,  313,  313,  252,  253,  254,  313,  256,
 /*  5250 */   313,  258,  259,  260,  313,  313,  313,  313,  313,  313,
 /*  5260 */   313,  313,  313,  313,  313,  195,  313,  313,  275,  313,
 /*  5270 */   277,  313,  279,  280,  281,  313,  313,  313,  313,  313,
 /*  5280 */   313,  211,  313,  313,  313,  313,  313,  313,  313,  152,
 /*  5290 */   313,  313,  155,  313,  157,  158,  159,  160,  313,  162,
 /*  5300 */   313,  152,  313,  313,  155,  313,  157,  158,  159,  160,
 /*  5310 */   313,  162,  313,  313,  313,  313,  313,  313,  313,  249,
 /*  5320 */   313,  313,  252,  253,  254,  313,  256,  313,  258,  259,
 /*  5330 */   260,  313,  195,  313,  313,  313,  313,  313,  313,  313,
 /*  5340 */   313,  313,  313,  313,  195,  275,  313,  277,  211,  279,
 /*  5350 */   280,  281,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5360 */   211,  152,  313,  313,  155,  313,  157,  158,  159,  160,
 /*  5370 */   313,  162,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5380 */   313,  313,  313,  313,  313,  313,  249,  313,  313,  252,
 /*  5390 */   253,  254,  313,  256,  313,  258,  259,  260,  249,  313,
 /*  5400 */   313,  252,  313,  313,  195,  256,  257,  258,  259,  260,
 /*  5410 */   313,  313,  275,  313,  277,  313,  279,  280,  281,  313,
 /*  5420 */   211,  313,  313,  313,  275,  313,  277,  313,  279,  280,
 /*  5430 */   281,  313,  313,  313,  313,  313,  313,  155,  313,  157,
 /*  5440 */   158,  159,  160,  313,  162,  155,  313,  157,  158,  159,
 /*  5450 */   160,  313,  162,  313,  313,  313,  313,  313,  249,  313,
 /*  5460 */   313,  252,  313,  313,  313,  256,  257,  258,  259,  260,
 /*  5470 */   313,  313,  313,  313,  313,  313,  313,  195,  313,  313,
 /*  5480 */   313,  313,  313,  313,  275,  195,  277,  313,  279,  280,
 /*  5490 */   281,  313,  313,  211,  313,  313,  313,  313,  313,  313,
 /*  5500 */   155,  211,  157,  158,  159,  160,  313,  162,  313,  313,
 /*  5510 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5520 */   155,  313,  157,  158,  159,  160,  313,  162,  313,  313,
 /*  5530 */   313,  249,  313,  313,  252,  313,  313,  313,  313,  249,
 /*  5540 */   195,  313,  252,  313,  262,  313,  313,  313,  313,  267,
 /*  5550 */   313,  313,  313,  313,  313,  313,  211,  275,  313,  277,
 /*  5560 */   195,  279,  280,  281,  313,  275,  313,  277,  313,  279,
 /*  5570 */   280,  281,  313,  313,  313,  313,  211,  313,  313,  313,
 /*  5580 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5590 */   313,  313,  313,  313,  249,  313,  155,  252,  157,  158,
 /*  5600 */   159,  160,  313,  162,  313,  313,  313,  313,  313,  313,
 /*  5610 */   313,  313,  313,  313,  249,  313,  313,  252,  313,  313,
 /*  5620 */   275,  313,  277,  313,  279,  280,  281,  313,  313,  313,
 /*  5630 */   313,  313,  313,  313,  313,  313,  195,  313,  313,  313,
 /*  5640 */   275,  313,  277,  313,  279,  280,  281,  313,  313,  313,
 /*  5650 */   313,  313,  211,  313,  313,  313,  155,  313,  157,  158,
 /*  5660 */   159,  160,  161,  162,  313,  313,  313,  313,  313,  313,
 /*  5670 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5680 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5690 */   249,  313,  313,  252,  313,  313,  195,  313,  313,  313,
 /*  5700 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5710 */   313,  313,  211,  313,  313,  313,  275,  313,  277,  313,
 /*  5720 */   279,  280,  281,  313,  313,  313,  313,  313,  313,  313,
 /*  5730 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5740 */   313,  240,  313,  313,  313,  244,  313,  313,  313,  248,
 /*  5750 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5760 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5770 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5780 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5790 */   313,  290,
);
  const YY_SHIFT_USE_DFLT = -41;
  const YY_SHIFT_MAX = 397;
static $yy_shift_ofst = array(
 /*     0 */   864,  327,  327,  476,  524,  524,  524,  524,  524,  524,
 /*    10 */   524,  524, 1364, 1412, 1561, 1412, 1665, 1665, 1215, 1665,
 /*    20 */  1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
 /*    30 */  1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
 /*    40 */  1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
 /*    50 */  1665, 1665, 1665, 1665, 1665, 1665,  161,  331,  331,  331,
 /*    60 */  2152,  161,  161,  161,  161,  480,  440,  679,  407,  407,
 /*    70 */   970,  407,  161,  161,  161,  161,  161,  161,  133,  160,
 /*    80 */   160,  160,  160,  120,  120,    5,  120,  120,  120,  120,
 /*    90 */   217,  120,  120,  120,  120,  120,  217,   29,  377,   29,
 /*   100 */    29,   29,   29,   29,   29,  165,  562,  562,  627,  196,
 /*   110 */   199,    4,  179,   29,   29,   29,   29,   29,   88,   68,
 /*   120 */    27,  319,  849,  118,  172,  172,  441,  441,  450,  940,
 /*   130 */  1083, 1107,  541,  399,  583,  729,  824,  209,  912,  926,
 /*   140 */   937, 1007, 1020, 1027, 1109, 1124,  531, 1129, 1132, 1134,
 /*   150 */  1136, 1203,  744, 1210,  827, 1212, 1221, 1223, 1225, 1244,
 /*   160 */  1288, 1360, 1111, 1371,  154,  759,   49,   49,  704,  -40,
 /*   170 */   312,  -40,  298,  298,  283,  358,  673,  773,  775,    7,
 /*   180 */   696,  737,  754,  779,  850,  924,  855,  855,  921,  971,
 /*   190 */   998, 1024, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
 /*   200 */  1066, 1066, 1066, 1066, 1143, 1148, 1143, 1148, 1143, 1148,
 /*   210 */  1143, 1194, 1194, 1224, 1236, 1236, 1224, 1133, 1167,   95,
 /*   220 */   314,  261,  843,  288,  500,  500,  504,  871,    6,  163,
 /*   230 */   684,  483,  732,  826,  581,  812,  889,  990,  563,  854,
 /*   240 */   943,  944,  951,  952, 1034, 1038, 1041,  416, 1042, 1138,
 /*   250 */   880,  880, 1227, 1234, 1237, 1266, 1209, 1270, 1272, 1204,
 /*   260 */  1280, 1287, 1283, 1285, 1286, 1208, 1229, 1204, 1290, 1292,
 /*   270 */  1293, 1303, 1305, 1322, 1327, 1328, 1362, 1369, 1373, 1375,
 /*   280 */  1380, 1382, 1383, 1384, 1385, 1386, 1387, 1359, 1388, 1390,
 /*   290 */  1395, 1399, 1400, 1410, 1411, 1413, 1291, 1358, 1363, 1358,
 /*   300 */  1365, 1323, 1417, 1361, 1420, 1287, 1421, 1341, 1356, 1432,
 /*   310 */  1287, 1433, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1434,
 /*   320 */  1403, 1443, 1444, 1445, 1366, 1446, 1361, 1368, 1448, 1361,
 /*   330 */  1348, 1440, 1343, 1344, 1415, 1404, 1401, 1402, 1405, 1453,
 /*   340 */  1457, 1287, 1454, 1462, 1463, 1459, 1464, 1461, 1465, 1466,
 /*   350 */  1467, 1469, 1470, 1471, 1477, 1505, 1506, 1508, 1509, 1510,
 /*   360 */  1512, 1513, 1514, 1516, 1517, 1520, 1518, 1521, 1522, 1524,
 /*   370 */  1556, 1525, 1557, 1447, 1558, 1452, 1488, 1559, 1442, 1571,
 /*   380 */  1575, 1577, 1490, 1579, 1580, 1581, 1588, 1426, 1479, 1515,
 /*   390 */  1361, 1409, 1287, 1590, 1502, 1596, 1498, 1361,
);
  const YY_REDUCE_USE_DFLT = -186;
  const YY_REDUCE_MAX = 218;
static $yy_reduce_ofst = array(
 /*     0 */   -21, -152,  -43,   67,  479,  574,  669,  770,  865,  966,
 /*    10 */  1084, 1416, 1660, 1789, 1808, 1903, 1964, 2021, 2081, 2140,
 /*    20 */  2198, 2255, 2317, 2374, 2431, 2488, 2551, 2608, 2665, 2722,
 /*    30 */  2785, 2842, 2899, 2956, 3019, 3076, 3133, 3190, 3253, 3310,
 /*    40 */  3367, 3424, 3487, 3544, 3601, 3658, 3721, 3778, 3835, 3892,
 /*    50 */  3955, 4012, 4069, 4126, 4189, 4246, 4257,  194,  343, 4303,
 /*    60 */   586,  782, 4366, 4410, 4519, 4543, 4563, 4672, 4706, 4781,
 /*    70 */  4820, 4859, 4931, 4993, 5070, 5137, 5149, 5209, 5282, 5290,
 /*    80 */  5345, 5365, 5441, 1435, 5501, -123,   84,  978,  724,  920,
 /*    90 */   -20, 1070, 1217, 1228, 1243, 1424,   -6,  202,  185,  109,
 /*   100 */   472,  628, 1008,  332,  211,  600,  600,  602,  592,  280,
 /*   110 */   311,  -41,  335,  522,  335,  532,  608,  611, -155,   78,
 /*   120 */   -70,  -50, -125,   74,  158, -185, -119, -119,  132,  -15,
 /*   130 */   -15,  -15,  167,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
 /*   140 */   -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
 /*   150 */   -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
 /*   160 */   -15,  -15,  -15,  -15,  173, -119,  190,  200,  226,  290,
 /*   170 */   -15,  351, -119, -119,  369,  488,  530,  542,  556,  444,
 /*   180 */   523,  587,  616,  629,  675,  798,  674,  682,  769,  834,
 /*   190 */   783,  887,  893,  902,  916,  939,  941,  953,  962,  968,
 /*   200 */   972,  973,  980,  981,  967,  979,  982,  989,  992, 1011,
 /*   210 */  1014, 1050, 1052, 1043, 1054, 1055, 1057,  954,  959,
);
static $yy_default = array(
 /*     0 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    10 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    20 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    30 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    40 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    50 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    60 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    70 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    80 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*    90 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   100 */  1090, 1090, 1090, 1090, 1090,  950,  950, 1090,  931,  976,
 /*   110 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,  715,  841,
 /*   120 */  1090,  968,  820, 1015, 1090, 1090,  948,  949, 1090, 1090,
 /*   130 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   140 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   150 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   160 */  1090, 1090, 1090, 1090, 1090,  966, 1090, 1090, 1030,  899,
 /*   170 */   871,  899,  966,  964,  945, 1090, 1090,  778,  778, 1058,
 /*   180 */   936,  982,  984,  989,  940,  805, 1019, 1021,  837,  842,
 /*   190 */   844, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   200 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   210 */  1090,  778,  778, 1090, 1090, 1090, 1090, 1034, 1043,  953,
 /*   220 */   953,  953,  953, 1090,  874,  872, 1090,  902, 1090, 1090,
 /*   230 */   867,  937, 1090, 1016, 1090, 1090, 1090, 1090,  727, 1090,
 /*   240 */   737,  739,  741,  750, 1090, 1090, 1090,  798, 1090,  708,
 /*   250 */  1046, 1047,  707, 1090, 1090, 1090, 1090, 1090, 1090,  907,
 /*   260 */   954,  958, 1090,  955, 1090, 1090,  906, 1090, 1090, 1090,
 /*   270 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   280 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   290 */  1090, 1090, 1090, 1090, 1090, 1090, 1090,  853,  859,  854,
 /*   300 */   882, 1090,  904,  979, 1090,  981, 1090,  970,  996, 1090,
 /*   310 */   998, 1090,  908,  910,  909,  911,  912,  914,  913, 1090,
 /*   320 */  1090, 1090, 1090, 1090, 1090,  941,  990, 1090,  985,  983,
 /*   330 */  1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,  831,
 /*   340 */  1090,  834, 1090,  719, 1090, 1090,  730, 1090,  728,  732,
 /*   350 */  1090,  734, 1090, 1090,  743, 1090, 1090,  745, 1090, 1090,
 /*   360 */   747, 1090, 1090,  752, 1090,  756, 1090,  759, 1090,  762,
 /*   370 */  1090,  769, 1090, 1090, 1090, 1090, 1090, 1090, 1090,  795,
 /*   380 */  1090, 1090,  799,  800, 1090, 1090, 1090, 1090, 1090, 1090,
 /*   390 */  1044, 1090, 1049, 1090, 1090, 1090, 1090, 1059,  697,  698,
 /*   400 */   699,  900,  901,  700,  701,  702,  703,  704,  705,  706,
 /*   410 */   803,  708,  804,  817,  818,  833,  876,  878,  879,  880,
 /*   420 */   881,  882,  883,  884,  885,  886,  887,  888,  889,  707,
 /*   430 */   890,  891,  892,  877,  894,  895,  896,  897,  902,  903,
 /*   440 */   916,  917,  919,  920,  922,  923,  924,  898,  951,  835,
 /*   450 */   836,  956,  957,  952,  959,  960,  961,  962,  904,  963,
 /*   460 */   915,  867,  868,  870,  873,  875, 1002, 1060, 1061, 1062,
 /*   470 */  1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
 /*   480 */  1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
 /*   490 */  1083, 1084, 1085, 1086, 1087, 1088, 1089,  993, 1001,  869,
 /*   500 */   991,  992, 1003,  953,  965,  967,  977,  978,  856,  857,
 /*   510 */   858,  860,  861, 1004, 1005, 1006,  862,  855,  864,  865,
 /*   520 */   866, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,  863,
 /*   530 */   921,  980,  969,  971,  972,  973,  974,  975,  999,  997,
 /*   540 */   918,  994,  893,  930,  925,  938,  939,  928,  929,  932,
 /*   550 */   933,  934,  935,  943,  944,  946,  947,  942,  987,  988,
 /*   560 */   986,  926,  927, 1025, 1026, 1027,  709,  710,  711,  712,
 /*   570 */   713,  717,  819, 1017, 1018, 1020, 1023, 1024, 1022,  823,
 /*   580 */   824,  825,  826,  827,  828,  829,  830,  843,  847,  848,
 /*   590 */   849,  850,  851,  845,  846,  838,  839,  840,  832,  852,
 /*   600 */   821,  822,  716,  806,  807,  808,  809,  810,  811,  812,
 /*   610 */   813,  814,  815,  816,  718,  720,  721,  722,  723,  724,
 /*   620 */   725,  726,  729,  736,  731,  733,  735,  738,  744,  740,
 /*   630 */   746,  742,  748,  749,  751,  753,  754,  755,  757,  758,
 /*   640 */   768,  767,  760,  761,  763,  764,  765,  766,  770,  771,
 /*   650 */   772,  773,  774,  775,  779,  780,  781,  776,  777,  782,
 /*   660 */   783,  784,  788,  789,  790,  791,  792,  794,  796,  797,
 /*   670 */   785,  793,  801,  802, 1028, 1029, 1031, 1032, 1033, 1037,
 /*   680 */  1036, 1035, 1038, 1039, 1040, 1041, 1042, 1045, 1048, 1050,
 /*   690 */  1052, 1054, 1055, 1056, 1053, 1057, 1051,
);

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammer, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
static $yyFallback = array(
);

/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
function ParseTrace(/* stream */ $TraceFILE, /* string */ $zTracePrompt){
  $this->yyTraceFILE = $TraceFILE;
  $this->yyTracePrompt = $zTracePrompt;
  if( $this->yyTraceFILE===null ) $this->yyTracePrompt = null;
  else if( $this->yyTracePrompt===null ) $this->yyTraceFILE = null;
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static $yyTokenName = array( 
  '$',             'NAME',          'INTNUM',        'APPROXNUM',   
  'DEADTOKEN',     'COMMA',         'CHARACTER',     'SET',         
  'CHAR',          'LPAR',          'RPAR',          'VARYING',     
  'VARCHAR',       'NATIONAL',      'NCHAR',         'BLOB',        
  'BIT',           'NUMERIC',       'DECIMAL',       'DEC',         
  'INTEGER',       'SMALLINT',      'FLOAT',         'REAL',        
  'DOUBLE',        'PRECISION',     'DATE',          'TIME',        
  'TIMESTAMP',     'WITH',          'ZONE',          'INTERVAL',    
  'TO',            'YEAR',          'MONTH',         'DAY',         
  'HOUR',          'MINUTE',        'SECOND',        'PERIOD',      
  'DEFAULT',       'USER',          'CURRENT_USER',  'SESSION_USER',
  'SYSTEM_USER',   'NULL',          'PLUS_SIGN',     'MINUS_SIGN',  
  'CONSTRAINT',    'NOT',           'UNIQUE',        'AUTO_INCREMENT',
  'PRIMARY',       'KEY',           'REFERENCES',    'MATCH',       
  'FULL',          'PARTIAL',       'ON',            'UPDATE',      
  'DELETE',        'CASCADE',       'NO',            'ACTION',      
  'CHECK',         'OR',            'AND',           'IS',          
  'ASTERISK',      'SOLIDUS',       'STRING',        'COUNT',       
  'MAX',           'MIN',           'DISTINCT',      'ALL',         
  'UNION',         'EXCEPT',        'INTERSECT',     'SELECT',      
  'AS',            'LIMIT',         'OFFSET',        'ORDER',       
  'BY',            'ASC',           'DESC',          'FROM',        
  'CROSS',         'JOIN',          'NATURAL',       'INNER',       
  'OUTER',         'LEFT',          'RIGHT',         'USING',       
  'WHERE',         'GROUP',         'HAVING',        'VALUES',      
  'TABLE',         'CORRESPONDING',  'NULLX',         'TRUE',        
  'FALSE',         'UNKNOWN',       'OP_EQ',         'OP_GTLT',     
  'OP_LT',         'OP_GT',         'OP_LTEQ',       'OP_GTEQ',     
  'DEFERRABLE',    'INITIALLY',     'DEFERRED',      'IMMEDIATE',   
  'CREATE',        'RESTRICT',      'DROP',          'IF',          
  'EXISTS',        'INSERT',        'INTO',          'ABS',         
  'ACOS',          'ASIN',          'ATAN',          'ATAN2',       
  'CEIL',          'COS',           'COT',           'CRC32',       
  'DEGREES',       'EXP',           'FLOOR',         'FORMAT',      
  'LN',            'LOG',           'LOG2',          'LOG10',       
  'MOD',           'PI',            'POW',           'RADIANS',     
  'ROUND',         'SIGN',          'SIN',           'SQRT',        
  'TAN',           'TRUNCATE',      'error',         'query',       
  'query_specification',  'sql_data_statement',  'sql_schema_statement',  'regular_identifier',
  'unsigned_numeric_literal',  'schema_name',   'unqualified_schema_name',  'identifier',  
  'actual_identifier',  'column_name',   'qualified_identifier',  'table_element_list',
  'table_element',  'column_definition',  'table_constraint_definition',  'data_type',   
  'default_clause',  'column_constraints',  'column_constraint_definition',  'character_set_specification',
  'character_string_type',  'national_character_string_type',  'binary_large_object_type',  'bit_string_type',
  'numeric_type',  'datetime_type',  'interval_type',  'length',      
  'exact_numeric_type',  'approximate_numeric_type',  'precision',     'scale',       
  'with_time_zone',  'time_precision',  'timestamp_precision',  'time_fractional_seconds_precision',
  'interval_qualifier',  'start_field',   'end_field',     'single_datetime_field',
  'non_second_datetime_field',  'interval_leading_field_precision',  'interval_fractional_seconds_precision',  'qualified_name',
  'default_option',  'literal',       'signed_numeric_literal',  'general_literal',
  'sign',          'constraint_name_definition',  'column_constraint',  'constraint_attributes',
  'constraint_name',  'unique_specification',  'references_specification',  'check_constraint_definition',
  'referenced_table_and_columns',  'reference_match_type',  'referential_triggered_action',  'table_name',  
  'reference_column_list',  'column_name_list',  'match_type',    'update_rule', 
  'delete_rule',   'referential_action',  'search_condition',  'boolean_term',
  'boolean_factor',  'boolean_test',  'boolean_primary',  'truth_value', 
  'predicate',     'comparison_predicate',  'null_predicate',  'row_value_constructor',
  'comp_op',       'row_value_constructor_element',  'row_value_constructor_list',  'row_subquery',
  'value_expression',  'numeric_value_expression',  'term',          'math_numeric_value_expression',
  'factor',        'numeric_primary',  'value_expression_primary',  'unsigned_value_specification',
  'column_reference',  'scalar_subquery',  'set_function_specification',  'unsigned_literal',
  'qualifier',     'general_set_function',  'set_function_type',  'set_quantifier',
  'correlation_name',  'subquery',      'query_expression',  'non_join_query_expression',
  'joined_table',  'non_join_query_term',  'query_term',    'corresponding_spec',
  'non_join_query_primary',  'query_primary',  'simple_table',  'table_value_constructor',
  'explicit_table',  'select_list',   'table_expression',  'limit_clause',
  'select_sublist',  'derived_column',  'as_clause',     'from_clause', 
  'where_clause',  'group_by_clause',  'having_clause',  'orderby_clause',
  'orderby_expression_list',  'orderby_expression',  'ordering',      'table_reference',
  'correlation_specification',  'derived_table',  'derived_column_list',  'table_subquery',
  'cross_join',    'qualified_join',  'natural_join',  'join_type',   
  'join_specification',  'outer_join_type',  'join_condition',  'named_columns_join',
  'join_column_list',  'grouping_column_reference_list',  'grouping_column_reference',  'table_value_constructor_list',
  'corresponding_column_list',  'constraint_check_time',  'sql_schema_definition_statement',  'sql_schema_manipulation_statement',
  'table_definition',  'drop_table_statement',  'drop_behaviour',  'drop_if_exists',
  'tables_list',   'sql_data_change_statement',  'delete_statement_searched',  'insert_statement',
  'update_statement_searched',  'delete_statement_where_search',  'insert_columns_and_source',  'insert_column_list',
  'set_clause_list',  'set_clause',    'object_column',  'update_source',
  'update_statement_where_search',
);

/* For tracing reduce actions, the names of all rules are required.
*/
static $yyRuleName = array(
 /*   0 */ "query ::= query_specification",
 /*   1 */ "query ::= sql_data_statement",
 /*   2 */ "query ::= sql_schema_statement",
 /*   3 */ "regular_identifier ::= NAME",
 /*   4 */ "unsigned_numeric_literal ::= INTNUM",
 /*   5 */ "unsigned_numeric_literal ::= APPROXNUM",
 /*   6 */ "schema_name ::= unqualified_schema_name",
 /*   7 */ "identifier ::= actual_identifier",
 /*   8 */ "actual_identifier ::= regular_identifier",
 /*   9 */ "unqualified_schema_name ::= DEADTOKEN",
 /*  10 */ "column_name ::= identifier",
 /*  11 */ "qualified_identifier ::= identifier",
 /*  12 */ "table_element_list ::= table_element",
 /*  13 */ "table_element_list ::= table_element_list COMMA table_element",
 /*  14 */ "table_element ::= column_definition",
 /*  15 */ "table_element ::= table_constraint_definition",
 /*  16 */ "table_constraint_definition ::= DEADTOKEN",
 /*  17 */ "column_definition ::= column_name data_type default_clause column_constraints",
 /*  18 */ "column_constraints ::=",
 /*  19 */ "column_constraints ::= column_constraint_definition",
 /*  20 */ "column_constraints ::= column_constraints column_constraint_definition",
 /*  21 */ "character_set_specification ::= DEADTOKEN",
 /*  22 */ "data_type ::= character_string_type",
 /*  23 */ "data_type ::= character_string_type CHARACTER SET character_set_specification",
 /*  24 */ "data_type ::= national_character_string_type",
 /*  25 */ "data_type ::= binary_large_object_type",
 /*  26 */ "data_type ::= bit_string_type",
 /*  27 */ "data_type ::= numeric_type",
 /*  28 */ "data_type ::= datetime_type",
 /*  29 */ "data_type ::= interval_type",
 /*  30 */ "character_string_type ::= CHARACTER",
 /*  31 */ "character_string_type ::= CHAR",
 /*  32 */ "character_string_type ::= CHARACTER LPAR length RPAR",
 /*  33 */ "character_string_type ::= CHARACTER VARYING",
 /*  34 */ "character_string_type ::= CHARACTER VARYING LPAR length RPAR",
 /*  35 */ "character_string_type ::= CHAR VARYING",
 /*  36 */ "character_string_type ::= CHAR VARYING LPAR length RPAR",
 /*  37 */ "character_string_type ::= VARCHAR",
 /*  38 */ "character_string_type ::= VARCHAR LPAR length RPAR",
 /*  39 */ "length ::= INTNUM",
 /*  40 */ "national_character_string_type ::= NATIONAL CHARACTER",
 /*  41 */ "national_character_string_type ::= NATIONAL CHARACTER LPAR length RPAR",
 /*  42 */ "national_character_string_type ::= NATIONAL CHAR",
 /*  43 */ "national_character_string_type ::= NATIONAL CHAR LPAR length RPAR",
 /*  44 */ "national_character_string_type ::= NCHAR",
 /*  45 */ "national_character_string_type ::= NCHAR LPAR length RPAR",
 /*  46 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING",
 /*  47 */ "national_character_string_type ::= NATIONAL CHARACTER VARYING LPAR length RPAR",
 /*  48 */ "national_character_string_type ::= NATIONAL CHAR VARYING",
 /*  49 */ "national_character_string_type ::= NATIONAL CHAR VARYING LPAR length RPAR",
 /*  50 */ "national_character_string_type ::= NCHAR VARYING",
 /*  51 */ "national_character_string_type ::= NCHAR VARYING LPAR length RPAR",
 /*  52 */ "binary_large_object_type ::= BLOB",
 /*  53 */ "bit_string_type ::= BIT",
 /*  54 */ "bit_string_type ::= BIT LPAR length RPAR",
 /*  55 */ "bit_string_type ::= BIT VARYING",
 /*  56 */ "bit_string_type ::= BIT VARYING LPAR length RPAR",
 /*  57 */ "numeric_type ::= exact_numeric_type",
 /*  58 */ "numeric_type ::= approximate_numeric_type",
 /*  59 */ "exact_numeric_type ::= NUMERIC",
 /*  60 */ "exact_numeric_type ::= NUMERIC LPAR precision RPAR",
 /*  61 */ "exact_numeric_type ::= NUMERIC LPAR precision COMMA scale RPAR",
 /*  62 */ "exact_numeric_type ::= DECIMAL",
 /*  63 */ "exact_numeric_type ::= DECIMAL LPAR precision RPAR",
 /*  64 */ "exact_numeric_type ::= DECIMAL LPAR precision COMMA scale RPAR",
 /*  65 */ "exact_numeric_type ::= DEC",
 /*  66 */ "exact_numeric_type ::= DEC LPAR precision RPAR",
 /*  67 */ "exact_numeric_type ::= DEC LPAR precision COMMA scale RPAR",
 /*  68 */ "exact_numeric_type ::= INTEGER",
 /*  69 */ "exact_numeric_type ::= SMALLINT",
 /*  70 */ "precision ::= INTNUM",
 /*  71 */ "scale ::= INTNUM",
 /*  72 */ "approximate_numeric_type ::= FLOAT",
 /*  73 */ "approximate_numeric_type ::= FLOAT LPAR precision RPAR",
 /*  74 */ "approximate_numeric_type ::= REAL",
 /*  75 */ "approximate_numeric_type ::= DOUBLE PRECISION",
 /*  76 */ "datetime_type ::= DATE",
 /*  77 */ "datetime_type ::= TIME with_time_zone",
 /*  78 */ "datetime_type ::= TIME LPAR time_precision RPAR with_time_zone",
 /*  79 */ "datetime_type ::= TIMESTAMP with_time_zone",
 /*  80 */ "datetime_type ::= TIMESTAMP LPAR timestamp_precision RPAR with_time_zone",
 /*  81 */ "with_time_zone ::=",
 /*  82 */ "with_time_zone ::= WITH TIME ZONE",
 /*  83 */ "time_precision ::= time_fractional_seconds_precision",
 /*  84 */ "time_fractional_seconds_precision ::= INTNUM",
 /*  85 */ "timestamp_precision ::= time_fractional_seconds_precision",
 /*  86 */ "interval_type ::= INTERVAL interval_qualifier",
 /*  87 */ "interval_qualifier ::= start_field TO end_field",
 /*  88 */ "interval_qualifier ::= single_datetime_field",
 /*  89 */ "start_field ::= non_second_datetime_field",
 /*  90 */ "start_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /*  91 */ "non_second_datetime_field ::= YEAR",
 /*  92 */ "non_second_datetime_field ::= MONTH",
 /*  93 */ "non_second_datetime_field ::= DAY",
 /*  94 */ "non_second_datetime_field ::= HOUR",
 /*  95 */ "non_second_datetime_field ::= MINUTE",
 /*  96 */ "interval_leading_field_precision ::= INTNUM",
 /*  97 */ "end_field ::= non_second_datetime_field",
 /*  98 */ "end_field ::= SECOND",
 /*  99 */ "end_field ::= SECOND LPAR interval_fractional_seconds_precision RPAR",
 /* 100 */ "interval_fractional_seconds_precision ::= INTNUM",
 /* 101 */ "single_datetime_field ::= non_second_datetime_field",
 /* 102 */ "single_datetime_field ::= non_second_datetime_field LPAR interval_leading_field_precision RPAR",
 /* 103 */ "single_datetime_field ::= SECOND",
 /* 104 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision RPAR",
 /* 105 */ "single_datetime_field ::= SECOND LPAR interval_leading_field_precision COMMA LPAR interval_fractional_seconds_precision RPAR RPAR",
 /* 106 */ "qualified_name ::= qualified_identifier",
 /* 107 */ "qualified_name ::= schema_name PERIOD qualified_identifier",
 /* 108 */ "default_clause ::=",
 /* 109 */ "default_clause ::= DEFAULT default_option",
 /* 110 */ "default_option ::= literal",
 /* 111 */ "default_option ::= USER",
 /* 112 */ "default_option ::= CURRENT_USER",
 /* 113 */ "default_option ::= SESSION_USER",
 /* 114 */ "default_option ::= SYSTEM_USER",
 /* 115 */ "default_option ::= NULL",
 /* 116 */ "literal ::= signed_numeric_literal",
 /* 117 */ "literal ::= general_literal",
 /* 118 */ "signed_numeric_literal ::= unsigned_numeric_literal",
 /* 119 */ "signed_numeric_literal ::= sign unsigned_numeric_literal",
 /* 120 */ "sign ::= PLUS_SIGN",
 /* 121 */ "sign ::= MINUS_SIGN",
 /* 122 */ "column_constraint_definition ::= constraint_name_definition column_constraint constraint_attributes",
 /* 123 */ "constraint_name_definition ::=",
 /* 124 */ "constraint_name_definition ::= CONSTRAINT constraint_name",
 /* 125 */ "constraint_name ::= qualified_name",
 /* 126 */ "column_constraint ::= NOT NULL",
 /* 127 */ "column_constraint ::= unique_specification",
 /* 128 */ "column_constraint ::= references_specification",
 /* 129 */ "column_constraint ::= check_constraint_definition",
 /* 130 */ "unique_specification ::= UNIQUE",
 /* 131 */ "unique_specification ::= AUTO_INCREMENT",
 /* 132 */ "unique_specification ::= PRIMARY KEY",
 /* 133 */ "references_specification ::= REFERENCES referenced_table_and_columns reference_match_type referential_triggered_action",
 /* 134 */ "referenced_table_and_columns ::= table_name",
 /* 135 */ "referenced_table_and_columns ::= table_name LPAR reference_column_list RPAR",
 /* 136 */ "table_name ::= qualified_name",
 /* 137 */ "reference_column_list ::= column_name_list",
 /* 138 */ "column_name_list ::= column_name",
 /* 139 */ "column_name_list ::= column_name_list COMMA column_name",
 /* 140 */ "reference_match_type ::=",
 /* 141 */ "reference_match_type ::= MATCH match_type",
 /* 142 */ "match_type ::= FULL",
 /* 143 */ "match_type ::= PARTIAL",
 /* 144 */ "referential_triggered_action ::=",
 /* 145 */ "referential_triggered_action ::= update_rule",
 /* 146 */ "referential_triggered_action ::= update_rule delete_rule",
 /* 147 */ "referential_triggered_action ::= delete_rule",
 /* 148 */ "referential_triggered_action ::= delete_rule update_rule",
 /* 149 */ "update_rule ::= ON UPDATE referential_action",
 /* 150 */ "delete_rule ::= ON DELETE referential_action",
 /* 151 */ "referential_action ::= CASCADE",
 /* 152 */ "referential_action ::= SET NULL",
 /* 153 */ "referential_action ::= SET DEFAULT",
 /* 154 */ "referential_action ::= NO ACTION",
 /* 155 */ "check_constraint_definition ::= CHECK LPAR search_condition RPAR",
 /* 156 */ "search_condition ::= boolean_term",
 /* 157 */ "search_condition ::= search_condition OR boolean_term",
 /* 158 */ "boolean_term ::= boolean_factor",
 /* 159 */ "boolean_term ::= boolean_term AND boolean_factor",
 /* 160 */ "boolean_factor ::= boolean_test",
 /* 161 */ "boolean_factor ::= NOT boolean_test",
 /* 162 */ "boolean_test ::= boolean_primary",
 /* 163 */ "boolean_test ::= boolean_primary IS truth_value",
 /* 164 */ "boolean_test ::= boolean_primary IS NOT truth_value",
 /* 165 */ "boolean_primary ::= predicate",
 /* 166 */ "boolean_primary ::= LPAR search_condition RPAR",
 /* 167 */ "predicate ::= comparison_predicate",
 /* 168 */ "predicate ::= null_predicate",
 /* 169 */ "comparison_predicate ::= row_value_constructor comp_op row_value_constructor",
 /* 170 */ "row_value_constructor ::= row_value_constructor_element",
 /* 171 */ "row_value_constructor ::= LPAR row_value_constructor_list RPAR",
 /* 172 */ "row_value_constructor ::= row_subquery",
 /* 173 */ "row_value_constructor_element ::= value_expression",
 /* 174 */ "value_expression ::= numeric_value_expression",
 /* 175 */ "numeric_value_expression ::= term",
 /* 176 */ "numeric_value_expression ::= math_numeric_value_expression",
 /* 177 */ "numeric_value_expression ::= numeric_value_expression sign term",
 /* 178 */ "term ::= factor",
 /* 179 */ "term ::= term ASTERISK factor",
 /* 180 */ "term ::= term SOLIDUS factor",
 /* 181 */ "factor ::= numeric_primary",
 /* 182 */ "factor ::= sign numeric_primary",
 /* 183 */ "numeric_primary ::= value_expression_primary",
 /* 184 */ "value_expression_primary ::= unsigned_value_specification",
 /* 185 */ "value_expression_primary ::= column_reference",
 /* 186 */ "value_expression_primary ::= scalar_subquery",
 /* 187 */ "value_expression_primary ::= set_function_specification",
 /* 188 */ "unsigned_value_specification ::= unsigned_literal",
 /* 189 */ "unsigned_literal ::= unsigned_numeric_literal",
 /* 190 */ "unsigned_literal ::= general_literal",
 /* 191 */ "general_literal ::= STRING",
 /* 192 */ "column_reference ::= column_name",
 /* 193 */ "column_reference ::= qualifier PERIOD column_name",
 /* 194 */ "set_function_specification ::= COUNT LPAR ASTERISK RPAR",
 /* 195 */ "set_function_specification ::= general_set_function",
 /* 196 */ "general_set_function ::= set_function_type LPAR set_quantifier value_expression RPAR",
 /* 197 */ "set_function_type ::= MAX",
 /* 198 */ "set_function_type ::= MIN",
 /* 199 */ "qualifier ::= table_name",
 /* 200 */ "qualifier ::= correlation_name",
 /* 201 */ "correlation_name ::= identifier",
 /* 202 */ "set_quantifier ::=",
 /* 203 */ "set_quantifier ::= DISTINCT",
 /* 204 */ "set_quantifier ::= ALL",
 /* 205 */ "scalar_subquery ::= subquery",
 /* 206 */ "subquery ::= LPAR query_expression RPAR",
 /* 207 */ "query_expression ::= non_join_query_expression",
 /* 208 */ "query_expression ::= joined_table",
 /* 209 */ "non_join_query_expression ::= non_join_query_term",
 /* 210 */ "non_join_query_expression ::= query_expression UNION query_term",
 /* 211 */ "non_join_query_expression ::= query_expression UNION ALL query_term",
 /* 212 */ "non_join_query_expression ::= query_expression UNION corresponding_spec query_term",
 /* 213 */ "non_join_query_expression ::= query_expression UNION ALL corresponding_spec query_term",
 /* 214 */ "non_join_query_expression ::= query_expression EXCEPT query_term",
 /* 215 */ "non_join_query_expression ::= query_expression EXCEPT ALL query_term",
 /* 216 */ "non_join_query_expression ::= query_expression EXCEPT corresponding_spec query_term",
 /* 217 */ "non_join_query_expression ::= query_expression EXCEPT ALL corresponding_spec query_term",
 /* 218 */ "non_join_query_term ::= non_join_query_primary",
 /* 219 */ "non_join_query_term ::= query_term INTERSECT query_primary",
 /* 220 */ "non_join_query_term ::= query_term INTERSECT ALL query_primary",
 /* 221 */ "non_join_query_term ::= query_term INTERSECT corresponding_spec query_primary",
 /* 222 */ "non_join_query_term ::= query_term INTERSECT ALL corresponding_spec query_primary",
 /* 223 */ "non_join_query_primary ::= simple_table",
 /* 224 */ "non_join_query_primary ::= LPAR non_join_query_expression RPAR",
 /* 225 */ "simple_table ::= query_specification",
 /* 226 */ "simple_table ::= table_value_constructor",
 /* 227 */ "simple_table ::= explicit_table",
 /* 228 */ "query_specification ::= SELECT set_quantifier select_list table_expression limit_clause",
 /* 229 */ "select_list ::= ASTERISK",
 /* 230 */ "select_list ::= select_sublist",
 /* 231 */ "select_list ::= select_list COMMA select_sublist",
 /* 232 */ "select_sublist ::= derived_column",
 /* 233 */ "select_sublist ::= qualifier PERIOD ASTERISK",
 /* 234 */ "derived_column ::= value_expression",
 /* 235 */ "derived_column ::= value_expression as_clause",
 /* 236 */ "as_clause ::= column_name",
 /* 237 */ "as_clause ::= AS column_name",
 /* 238 */ "table_expression ::= from_clause where_clause group_by_clause having_clause orderby_clause",
 /* 239 */ "limit_clause ::=",
 /* 240 */ "limit_clause ::= LIMIT INTNUM",
 /* 241 */ "limit_clause ::= LIMIT INTNUM OFFSET INTNUM",
 /* 242 */ "limit_clause ::= LIMIT INTNUM COMMA INTNUM",
 /* 243 */ "orderby_clause ::=",
 /* 244 */ "orderby_clause ::= ORDER BY orderby_expression_list",
 /* 245 */ "orderby_expression_list ::= orderby_expression",
 /* 246 */ "orderby_expression_list ::= orderby_expression_list COMMA orderby_expression",
 /* 247 */ "orderby_expression ::= value_expression ordering",
 /* 248 */ "ordering ::=",
 /* 249 */ "ordering ::= ASC",
 /* 250 */ "ordering ::= DESC",
 /* 251 */ "from_clause ::= FROM table_reference",
 /* 252 */ "from_clause ::= table_reference COMMA table_reference",
 /* 253 */ "table_reference ::= table_name",
 /* 254 */ "table_reference ::= table_name correlation_specification",
 /* 255 */ "table_reference ::= derived_table correlation_specification",
 /* 256 */ "table_reference ::= joined_table",
 /* 257 */ "correlation_specification ::= correlation_name",
 /* 258 */ "correlation_specification ::= AS correlation_name",
 /* 259 */ "correlation_specification ::= correlation_name LPAR derived_column_list RPAR",
 /* 260 */ "correlation_specification ::= AS correlation_name LPAR derived_column_list RPAR",
 /* 261 */ "derived_column_list ::= column_name_list",
 /* 262 */ "derived_table ::= table_subquery",
 /* 263 */ "table_subquery ::= subquery",
 /* 264 */ "joined_table ::= cross_join",
 /* 265 */ "joined_table ::= qualified_join",
 /* 266 */ "joined_table ::= LPAR joined_table RPAR",
 /* 267 */ "cross_join ::= table_reference CROSS JOIN table_reference",
 /* 268 */ "qualified_join ::= table_reference natural_join join_type JOIN table_reference join_specification",
 /* 269 */ "natural_join ::=",
 /* 270 */ "natural_join ::= NATURAL",
 /* 271 */ "join_type ::=",
 /* 272 */ "join_type ::= INNER",
 /* 273 */ "join_type ::= outer_join_type",
 /* 274 */ "join_type ::= outer_join_type OUTER",
 /* 275 */ "join_type ::= UNION",
 /* 276 */ "outer_join_type ::= LEFT",
 /* 277 */ "outer_join_type ::= RIGHT",
 /* 278 */ "outer_join_type ::= FULL",
 /* 279 */ "join_specification ::=",
 /* 280 */ "join_specification ::= join_condition",
 /* 281 */ "join_specification ::= named_columns_join",
 /* 282 */ "join_condition ::= ON search_condition",
 /* 283 */ "named_columns_join ::= USING LPAR join_column_list RPAR",
 /* 284 */ "join_column_list ::= column_name_list",
 /* 285 */ "where_clause ::=",
 /* 286 */ "where_clause ::= WHERE search_condition",
 /* 287 */ "group_by_clause ::=",
 /* 288 */ "group_by_clause ::= GROUP BY grouping_column_reference_list",
 /* 289 */ "grouping_column_reference_list ::= grouping_column_reference",
 /* 290 */ "grouping_column_reference_list ::= grouping_column_reference_list COMMA grouping_column_reference",
 /* 291 */ "grouping_column_reference ::= column_reference",
 /* 292 */ "having_clause ::=",
 /* 293 */ "having_clause ::= HAVING search_condition",
 /* 294 */ "table_value_constructor ::= VALUES table_value_constructor_list",
 /* 295 */ "table_value_constructor_list ::= row_value_constructor",
 /* 296 */ "explicit_table ::= TABLE table_name",
 /* 297 */ "query_term ::= non_join_query_term",
 /* 298 */ "query_term ::= joined_table",
 /* 299 */ "corresponding_spec ::= CORRESPONDING",
 /* 300 */ "corresponding_spec ::= CORRESPONDING BY LPAR corresponding_column_list RPAR",
 /* 301 */ "corresponding_column_list ::= column_name_list",
 /* 302 */ "query_primary ::= non_join_query_primary",
 /* 303 */ "query_primary ::= joined_table",
 /* 304 */ "row_value_constructor_list ::= row_value_constructor_element",
 /* 305 */ "row_value_constructor_list ::= row_value_constructor_list COMMA row_value_constructor_element",
 /* 306 */ "row_subquery ::= NULLX",
 /* 307 */ "truth_value ::= TRUE",
 /* 308 */ "truth_value ::= FALSE",
 /* 309 */ "truth_value ::= UNKNOWN",
 /* 310 */ "comp_op ::= OP_EQ",
 /* 311 */ "comp_op ::= OP_GTLT",
 /* 312 */ "comp_op ::= OP_LT",
 /* 313 */ "comp_op ::= OP_GT",
 /* 314 */ "comp_op ::= OP_LTEQ",
 /* 315 */ "comp_op ::= OP_GTEQ",
 /* 316 */ "null_predicate ::= column_reference IS NULLX",
 /* 317 */ "null_predicate ::= column_reference IS NOT NULLX",
 /* 318 */ "constraint_attributes ::=",
 /* 319 */ "constraint_attributes ::= constraint_check_time",
 /* 320 */ "constraint_attributes ::= constraint_check_time DEFERRABLE",
 /* 321 */ "constraint_attributes ::= constraint_check_time NOT DEFERRABLE",
 /* 322 */ "constraint_attributes ::= DEFERRABLE",
 /* 323 */ "constraint_attributes ::= DEFERRABLE constraint_check_time",
 /* 324 */ "constraint_attributes ::= NOT DEFERRABLE",
 /* 325 */ "constraint_attributes ::= NOT DEFERRABLE constraint_check_time",
 /* 326 */ "constraint_check_time ::= INITIALLY DEFERRED",
 /* 327 */ "constraint_check_time ::= INITIALLY IMMEDIATE",
 /* 328 */ "sql_schema_statement ::= sql_schema_definition_statement",
 /* 329 */ "sql_schema_statement ::= sql_schema_manipulation_statement",
 /* 330 */ "sql_schema_definition_statement ::= table_definition",
 /* 331 */ "table_definition ::= CREATE TABLE table_name LPAR table_element_list RPAR",
 /* 332 */ "sql_schema_manipulation_statement ::= drop_table_statement",
 /* 333 */ "drop_behaviour ::=",
 /* 334 */ "drop_behaviour ::= CASCADE",
 /* 335 */ "drop_behaviour ::= RESTRICT",
 /* 336 */ "drop_table_statement ::= DROP TABLE drop_if_exists tables_list drop_behaviour",
 /* 337 */ "drop_if_exists ::=",
 /* 338 */ "drop_if_exists ::= IF EXISTS",
 /* 339 */ "tables_list ::= table_name",
 /* 340 */ "tables_list ::= tables_list COMMA table_name",
 /* 341 */ "sql_data_statement ::= sql_data_change_statement",
 /* 342 */ "sql_data_change_statement ::= delete_statement_searched",
 /* 343 */ "sql_data_change_statement ::= insert_statement",
 /* 344 */ "sql_data_change_statement ::= update_statement_searched",
 /* 345 */ "delete_statement_searched ::= DELETE FROM table_name delete_statement_where_search",
 /* 346 */ "delete_statement_where_search ::=",
 /* 347 */ "delete_statement_where_search ::= WHERE search_condition",
 /* 348 */ "insert_statement ::= INSERT INTO table_name insert_columns_and_source",
 /* 349 */ "insert_columns_and_source ::= LPAR insert_column_list RPAR query_expression",
 /* 350 */ "insert_columns_and_source ::= query_expression",
 /* 351 */ "insert_columns_and_source ::= DEFAULT VALUES",
 /* 352 */ "insert_column_list ::= column_name_list",
 /* 353 */ "set_clause_list ::= set_clause_list COMMA set_clause",
 /* 354 */ "set_clause_list ::= set_clause",
 /* 355 */ "set_clause ::= object_column OP_EQ update_source",
 /* 356 */ "object_column ::= column_name",
 /* 357 */ "update_source ::= value_expression",
 /* 358 */ "update_source ::= NULL",
 /* 359 */ "update_source ::= DEFAULT",
 /* 360 */ "update_statement_searched ::= UPDATE table_name SET set_clause_list update_statement_where_search",
 /* 361 */ "update_statement_where_search ::=",
 /* 362 */ "update_statement_where_search ::= WHERE search_condition",
 /* 363 */ "math_numeric_value_expression ::= ABS LPAR numeric_value_expression RPAR",
 /* 364 */ "math_numeric_value_expression ::= ACOS LPAR numeric_value_expression RPAR",
 /* 365 */ "math_numeric_value_expression ::= ASIN LPAR numeric_value_expression RPAR",
 /* 366 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression RPAR",
 /* 367 */ "math_numeric_value_expression ::= ATAN LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 368 */ "math_numeric_value_expression ::= ATAN2 LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 369 */ "math_numeric_value_expression ::= CEIL LPAR numeric_value_expression RPAR",
 /* 370 */ "math_numeric_value_expression ::= COS LPAR numeric_value_expression RPAR",
 /* 371 */ "math_numeric_value_expression ::= COT LPAR numeric_value_expression RPAR",
 /* 372 */ "math_numeric_value_expression ::= CRC32 LPAR numeric_value_expression RPAR",
 /* 373 */ "math_numeric_value_expression ::= DEGREES LPAR numeric_value_expression RPAR",
 /* 374 */ "math_numeric_value_expression ::= EXP LPAR numeric_value_expression RPAR",
 /* 375 */ "math_numeric_value_expression ::= FLOOR LPAR numeric_value_expression RPAR",
 /* 376 */ "math_numeric_value_expression ::= FORMAT LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 377 */ "math_numeric_value_expression ::= LN LPAR numeric_value_expression RPAR",
 /* 378 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression RPAR",
 /* 379 */ "math_numeric_value_expression ::= LOG LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 380 */ "math_numeric_value_expression ::= LOG2 LPAR numeric_value_expression RPAR",
 /* 381 */ "math_numeric_value_expression ::= LOG10 LPAR numeric_value_expression RPAR",
 /* 382 */ "math_numeric_value_expression ::= MOD LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 383 */ "math_numeric_value_expression ::= PI LPAR RPAR",
 /* 384 */ "math_numeric_value_expression ::= POW LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 385 */ "math_numeric_value_expression ::= RADIANS LPAR numeric_value_expression RPAR",
 /* 386 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression RPAR",
 /* 387 */ "math_numeric_value_expression ::= ROUND LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
 /* 388 */ "math_numeric_value_expression ::= SIGN LPAR numeric_value_expression RPAR",
 /* 389 */ "math_numeric_value_expression ::= SIN LPAR numeric_value_expression RPAR",
 /* 390 */ "math_numeric_value_expression ::= SQRT LPAR numeric_value_expression RPAR",
 /* 391 */ "math_numeric_value_expression ::= TAN LPAR numeric_value_expression RPAR",
 /* 392 */ "math_numeric_value_expression ::= TRUNCATE LPAR numeric_value_expression COMMA numeric_value_expression RPAR",
);

/*
** This function returns the symbolic name associated with a token
** value.
*/
function ParseTokenName(/* int */ $tokenType){
  if (isset(self::$yyTokenName[$tokenType]))
    return self::$yyTokenName[$tokenType];
  return "Unknown";
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
private function yy_destructor($yymajor, $yypminor){
  switch( $yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
private function yy_pop_parser_stack() {
  if ($this->yyidx < 0) return 0;
  $yytos = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE ) {
    fprintf($this->yyTraceFILE,"%sPopping %s\n",
      $this->yyTracePrompt,
      self::$yyTokenName[$yytos->major]);
  }
  $this->yy_destructor( $yytos->major, $yytos->minor);
  unset($this->yystack[$this->yyidx]);
  $this->yyidx--;
  return $yytos->major;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
function __destruct()
{
  while($this->yyidx >= 0)
    $this->yy_pop_parser_stack();
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_shift_action(
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
  $stateno = $this->yystack[$this->yyidx]->stateno;
 
  if( $stateno>self::YY_SHIFT_MAX || 
      ($i = self::$yy_shift_ofst[$stateno])==self::YY_SHIFT_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    if( $iLookAhead>0 ){
      if (isset(self::$yyFallback[$iLookAhead]) &&
        ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n",
             $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], 
             self::$yyTokenName[$iFallback]);
        }
        return $this->yy_find_shift_action($iFallback);
      }
      {
        $j = $i - $iLookAhead + self::YYWILDCARD;
        if( $j>=0 && $j<count(self::$yy_action) && self::$yy_lookahead[$j]==self::YYWILDCARD ){
          if( $this->yyTraceFILE ){
            fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n",
               $this->yyTracePrompt, self::$yyTokenName[$iLookAhead],
               self::$yyTokenName[self::YYWILDCARD]);
          }
          return self::$yy_action[$j];
        }
      }
    }
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
private function yy_find_reduce_action(
  $stateno,              /* Current state number */
  $iLookAhead     /* The look-ahead token */
){
  $i = 0;
 
  if( $stateno>self::YY_REDUCE_MAX ||
      ($i = self::$yy_reduce_ofst[$stateno])==self::YY_REDUCE_USE_DFLT ){
    return self::$yy_default[$stateno];
  }
  if( $iLookAhead==self::YYNOCODE ){
    return $this->YY_NO_ACTION;
  }
  $i += $iLookAhead;
  if( $i<0 || $i>=count(self::$yy_action) || self::$yy_lookahead[$i]!=$iLookAhead ){
    return self::$yy_default[$stateno];
  }else{
    return self::$yy_action[$i];
  }
}

/*
** Perform a shift action.
*/
private function yy_shift(
  $yyNewState,               /* The new state to shift in */
  $yyMajor,                  /* The major token to shift in */
  $yypMinor         /* Pointer ot the minor token to shift in */
){
  $this->yyidx++;
  if (isset($this->yystack[$this->yyidx])) {
    $yytos = $this->yystack[$this->yyidx];
  } else {
    $yytos = new ParseyyStackEntry;
    $this->yystack[$this->yyidx] = $yytos;
  }
  $yytos->stateno = $yyNewState;
  $yytos->major = $yyMajor;
  $yytos->minor = $yypMinor;
  if( $this->yyTraceFILE) {
    fprintf($this->yyTraceFILE,"%sShift %d\n",$this->yyTracePrompt,$yyNewState);
    fprintf($this->yyTraceFILE,"%sStack:",$this->yyTracePrompt);
    for ($i = 1; $i <= $this->yyidx; $i++) {
      $ent = $this->yystack[$i];
      fprintf($this->yyTraceFILE," %s",self::$yyTokenName[$ent->major]);
    }
    fprintf($this->yyTraceFILE,"\n");
  }
}

private function __overflow_dead_code() {
  /* if the stack can overflow (it can't in the PHP implementation)
   * Then the following code would be emitted */
}

/* The following table contains information about every rule that
** is used during the reduce.
** Rather than pollute memory with a large number of arrays,
** we store both data points in the same array, indexing by
** rule number * 2.
static const struct {
  YYCODETYPE lhs;         // Symbol on the left-hand side of the rule 
  unsigned char nrhs;     // Number of right-hand side symbols in the rule
} yyRuleInfo[] = {
*/
static $yyRuleInfo = array(
  151, 1,
  151, 1,
  151, 1,
  155, 1,
  156, 1,
  156, 1,
  157, 1,
  159, 1,
  160, 1,
  158, 1,
  161, 1,
  162, 1,
  163, 1,
  163, 3,
  164, 1,
  164, 1,
  166, 1,
  165, 4,
  169, 0,
  169, 1,
  169, 2,
  171, 1,
  167, 1,
  167, 4,
  167, 1,
  167, 1,
  167, 1,
  167, 1,
  167, 1,
  167, 1,
  172, 1,
  172, 1,
  172, 4,
  172, 2,
  172, 5,
  172, 2,
  172, 5,
  172, 1,
  172, 4,
  179, 1,
  173, 2,
  173, 5,
  173, 2,
  173, 5,
  173, 1,
  173, 4,
  173, 3,
  173, 6,
  173, 3,
  173, 6,
  173, 2,
  173, 5,
  174, 1,
  175, 1,
  175, 4,
  175, 2,
  175, 5,
  176, 1,
  176, 1,
  180, 1,
  180, 4,
  180, 6,
  180, 1,
  180, 4,
  180, 6,
  180, 1,
  180, 4,
  180, 6,
  180, 1,
  180, 1,
  182, 1,
  183, 1,
  181, 1,
  181, 4,
  181, 1,
  181, 2,
  177, 1,
  177, 2,
  177, 5,
  177, 2,
  177, 5,
  184, 0,
  184, 3,
  185, 1,
  187, 1,
  186, 1,
  178, 2,
  188, 3,
  188, 1,
  189, 1,
  189, 4,
  192, 1,
  192, 1,
  192, 1,
  192, 1,
  192, 1,
  193, 1,
  190, 1,
  190, 1,
  190, 4,
  194, 1,
  191, 1,
  191, 4,
  191, 1,
  191, 4,
  191, 8,
  195, 1,
  195, 3,
  168, 0,
  168, 2,
  196, 1,
  196, 1,
  196, 1,
  196, 1,
  196, 1,
  196, 1,
  197, 1,
  197, 1,
  198, 1,
  198, 2,
  200, 1,
  200, 1,
  170, 3,
  201, 0,
  201, 2,
  204, 1,
  202, 2,
  202, 1,
  202, 1,
  202, 1,
  205, 1,
  205, 1,
  205, 2,
  206, 4,
  208, 1,
  208, 4,
  211, 1,
  212, 1,
  213, 1,
  213, 3,
  209, 0,
  209, 2,
  214, 1,
  214, 1,
  210, 0,
  210, 1,
  210, 2,
  210, 1,
  210, 2,
  215, 3,
  216, 3,
  217, 1,
  217, 2,
  217, 2,
  217, 2,
  207, 4,
  218, 1,
  218, 3,
  219, 1,
  219, 3,
  220, 1,
  220, 2,
  221, 1,
  221, 3,
  221, 4,
  222, 1,
  222, 3,
  224, 1,
  224, 1,
  225, 3,
  227, 1,
  227, 3,
  227, 1,
  229, 1,
  232, 1,
  233, 1,
  233, 1,
  233, 3,
  234, 1,
  234, 3,
  234, 3,
  236, 1,
  236, 2,
  237, 1,
  238, 1,
  238, 1,
  238, 1,
  238, 1,
  239, 1,
  243, 1,
  243, 1,
  199, 1,
  240, 1,
  240, 3,
  242, 4,
  242, 1,
  245, 5,
  246, 1,
  246, 1,
  244, 1,
  244, 1,
  248, 1,
  247, 0,
  247, 1,
  247, 1,
  241, 1,
  249, 3,
  250, 1,
  250, 1,
  251, 1,
  251, 3,
  251, 4,
  251, 4,
  251, 5,
  251, 3,
  251, 4,
  251, 4,
  251, 5,
  253, 1,
  253, 3,
  253, 4,
  253, 4,
  253, 5,
  256, 1,
  256, 3,
  258, 1,
  258, 1,
  258, 1,
  152, 5,
  261, 1,
  261, 1,
  261, 3,
  264, 1,
  264, 3,
  265, 1,
  265, 2,
  266, 1,
  266, 2,
  262, 5,
  263, 0,
  263, 2,
  263, 4,
  263, 4,
  271, 0,
  271, 3,
  272, 1,
  272, 3,
  273, 2,
  274, 0,
  274, 1,
  274, 1,
  267, 2,
  267, 3,
  275, 1,
  275, 2,
  275, 2,
  275, 1,
  276, 1,
  276, 2,
  276, 4,
  276, 5,
  278, 1,
  277, 1,
  279, 1,
  252, 1,
  252, 1,
  252, 3,
  280, 4,
  281, 6,
  282, 0,
  282, 1,
  283, 0,
  283, 1,
  283, 1,
  283, 2,
  283, 1,
  285, 1,
  285, 1,
  285, 1,
  284, 0,
  284, 1,
  284, 1,
  286, 2,
  287, 4,
  288, 1,
  268, 0,
  268, 2,
  269, 0,
  269, 3,
  289, 1,
  289, 3,
  290, 1,
  270, 0,
  270, 2,
  259, 2,
  291, 1,
  260, 2,
  254, 1,
  254, 1,
  255, 1,
  255, 5,
  292, 1,
  257, 1,
  257, 1,
  230, 1,
  230, 3,
  231, 1,
  223, 1,
  223, 1,
  223, 1,
  228, 1,
  228, 1,
  228, 1,
  228, 1,
  228, 1,
  228, 1,
  226, 3,
  226, 4,
  203, 0,
  203, 1,
  203, 2,
  203, 3,
  203, 1,
  203, 2,
  203, 2,
  203, 3,
  293, 2,
  293, 2,
  154, 1,
  154, 1,
  294, 1,
  296, 6,
  295, 1,
  298, 0,
  298, 1,
  298, 1,
  297, 5,
  299, 0,
  299, 2,
  300, 1,
  300, 3,
  153, 1,
  301, 1,
  301, 1,
  301, 1,
  302, 4,
  305, 0,
  305, 2,
  303, 4,
  306, 4,
  306, 1,
  306, 2,
  307, 1,
  308, 3,
  308, 1,
  309, 3,
  310, 1,
  311, 1,
  311, 1,
  311, 1,
  304, 5,
  312, 0,
  312, 2,
  235, 4,
  235, 4,
  235, 4,
  235, 4,
  235, 6,
  235, 6,
  235, 4,
  235, 4,
  235, 4,
  235, 4,
  235, 4,
  235, 4,
  235, 4,
  235, 6,
  235, 4,
  235, 4,
  235, 6,
  235, 4,
  235, 4,
  235, 6,
  235, 3,
  235, 6,
  235, 4,
  235, 4,
  235, 6,
  235, 4,
  235, 4,
  235, 4,
  235, 4,
  235, 6,
);

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
private function yy_reduce(
  $yyruleno                 /* Number of the rule by which to reduce */
){
  $yygoto = 0;                     /* The next state */
  $yyact = 0;                      /* The next action */
  $yygotominor = null;        /* The LHS of the rule reduced */
  $yymsp = null;            /* The top of the parser's stack */
  $yysize = 0;                     /* Amount to pop the stack */
  
  $yymsp = $this->yystack[$this->yyidx];
  if( $this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno])) {
    fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt,
      self::$yyRuleName[$yyruleno]);
  }

  switch( $yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0:
#line 8 "sql.y"
{
		$this->yystack[$this->yyidx + 0]->minor->actions[] = new qpAction_returnRelation($this->yystack[$this->yyidx + 0]->minor->last_relation_id);		
		$yygotominor=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 2595 "sql.php"
        break;
      case 1:
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      case 10:
      case 11:
      case 14:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 39:
      case 57:
      case 58:
      case 106:
      case 127:
      case 136:
      case 156:
      case 158:
      case 160:
      case 162:
      case 165:
      case 167:
      case 168:
      case 170:
      case 173:
      case 174:
      case 175:
      case 176:
      case 178:
      case 181:
      case 183:
      case 184:
      case 185:
      case 188:
      case 189:
      case 190:
      case 195:
      case 199:
      case 201:
      case 207:
      case 209:
      case 218:
      case 223:
      case 226:
      case 232:
      case 234:
      case 256:
      case 257:
      case 258:
      case 265:
      case 273:
      case 282:
      case 291:
      case 294:
      case 295:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 328:
      case 329:
      case 332:
      case 341:
      case 342:
      case 343:
      case 344:
      case 347:
      case 352:
      case 357:
      case 362:
#line 12 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor;}
#line 2678 "sql.php"
        break;
      case 4:
#line 20 "sql.y"
{$yygotominor = new filter_StaticIntnum($this->yystack[$this->yyidx + 0]->minor->value);}
#line 2683 "sql.php"
        break;
      case 12:
      case 304:
      case 354:
#line 41 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;
	}
#line 2693 "sql.php"
        break;
      case 13:
#line 45 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2701 "sql.php"
        break;
      case 17:
#line 55 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->name = $this->yystack[$this->yyidx + -3]->minor->value;
		if(isset($this->yystack[$this->yyidx + 0]->minor)){
			foreach($this->yystack[$this->yyidx + 0]->minor as $constraint){
				if(strtoupper($constraint)=="AUTO_INCREMENT")
					$this->yystack[$this->yyidx + -2]->minor->autoinc=1;
					$this->yystack[$this->yyidx + -2]->minor->is_unique=1;
			}
		}
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2716 "sql.php"
        break;
      case 19:
      case 339:
#line 68 "sql.y"
{$yygotominor = Array(); $yygotominor[] = $this->yystack[$this->yyidx + 0]->minor;}
#line 2722 "sql.php"
        break;
      case 20:
#line 69 "sql.y"
{$this->yystack[$this->yyidx + -1]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 2727 "sql.php"
        break;
      case 32:
#line 93 "sql.y"
{$yygotominor = new PHPFDB_char(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 2732 "sql.php"
        break;
      case 37:
#line 98 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, 666);}
#line 2737 "sql.php"
        break;
      case 38:
#line 99 "sql.y"
{$yygotominor = new PHPFDB_varchar(NULL, $this->yystack[$this->yyidx + -1]->minor->value);}
#line 2742 "sql.php"
        break;
      case 52:
#line 116 "sql.y"
{$yygotominor = new PHPFDB_blob(NULL);}
#line 2747 "sql.php"
        break;
      case 68:
#line 135 "sql.y"
{$yygotominor = new PHPFDB_int();}
#line 2752 "sql.php"
        break;
      case 72:
#line 142 "sql.y"
{$yygotominor = new PHPFDB_float();}
#line 2757 "sql.php"
        break;
      case 120:
#line 216 "sql.y"
{$yygotominor="plus_sign";}
#line 2762 "sql.php"
        break;
      case 121:
#line 217 "sql.y"
{$yygotominor="minus_sign";}
#line 2767 "sql.php"
        break;
      case 122:
      case 171:
#line 223 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor;}
#line 2773 "sql.php"
        break;
      case 131:
      case 236:
      case 237:
      case 276:
      case 277:
      case 278:
#line 236 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2783 "sql.php"
        break;
      case 138:
#line 248 "sql.y"
{
		$yygotominor = Array();
		$yygotominor[] = $this->yystack[$this->yyidx + 0]->minor->value;
	}
#line 2791 "sql.php"
        break;
      case 139:
#line 252 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor->value;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2799 "sql.php"
        break;
      case 157:
#line 286 "sql.y"
{
		$yygotominor= new filter_OR($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2806 "sql.php"
        break;
      case 159:
#line 291 "sql.y"
{
		$yygotominor= new filter_AND($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2813 "sql.php"
        break;
      case 169:
#line 308 "sql.y"
{
		$yygotominor= new filter_COMP($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 2820 "sql.php"
        break;
      case 177:
#line 327 "sql.y"
{ ECHO "TODOTODOTODOTODO";}
#line 2825 "sql.php"
        break;
      case 182:
#line 334 "sql.y"
{$yygotominor= new filter_UnaryMathFunction($this->yystack[$this->yyidx + -1]->minor); $yygotominor->expression=$this->yystack[$this->yyidx + 0]->minor;}
#line 2830 "sql.php"
        break;
      case 187:
#line 342 "sql.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor;}
#line 2835 "sql.php"
        break;
      case 191:
#line 357 "sql.y"
{
	$yygotominor = new filter_StaticString(substr($this->yystack[$this->yyidx + 0]->minor->value, 1, strlen($this->yystack[$this->yyidx + 0]->minor->value)-2));
}
#line 2842 "sql.php"
        break;
      case 192:
      case 356:
#line 389 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value);}
#line 2848 "sql.php"
        break;
      case 193:
#line 390 "sql.y"
{$yygotominor = new filter_ColumnReference($this->yystack[$this->yyidx + 0]->minor->value, $this->yystack[$this->yyidx + -2]->minor->value);}
#line 2853 "sql.php"
        break;
      case 194:
#line 392 "sql.y"
{$yygotominor = new filter_SetFunction("count_asterisk"); $yygotominor->expression = new filter_EmptyExpression();}
#line 2858 "sql.php"
        break;
      case 196:
#line 395 "sql.y"
{$this->yystack[$this->yyidx + -4]->minor->expression=$this->yystack[$this->yyidx + -1]->minor;$yygotominor=$this->yystack[$this->yyidx + -4]->minor;}
#line 2863 "sql.php"
        break;
      case 197:
#line 397 "sql.y"
{$yygotominor = new filter_SetFunction("max");}
#line 2868 "sql.php"
        break;
      case 198:
#line 398 "sql.y"
{$yygotominor = new filter_SetFunction("min");}
#line 2873 "sql.php"
        break;
      case 202:
      case 361:
#line 405 "sql.y"
{$yygotominor=NULL;}
#line 2879 "sql.php"
        break;
      case 203:
#line 406 "sql.y"
{$yygotominor="DISTINCT";}
#line 2884 "sql.php"
        break;
      case 204:
#line 407 "sql.y"
{$yygotominor="ALL";}
#line 2889 "sql.php"
        break;
      case 228:
#line 444 "sql.y"
{
		$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		
		if(isset($this->yystack[$this->yyidx + -1]->minor->filter)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_filterResults($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->filter);
		}
		$total_group = false;
		$expression_columns = Array();	
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection))
			foreach($this->yystack[$this->yyidx + -2]->minor->columns_projection as $p){
				if($p->is_set_function) {
					$total_group=true;
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				} elseif($p->is_math_function) {
					$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $p->getFilterColumnReferences());
				}
			}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$expression_columns = qpAction_projectColumns::mergeColumnsNoDuplicates($expression_columns, $this->yystack[$this->yyidx + -1]->minor->grouping_columns);
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
		} elseif(!(empty($expression_columns))) {
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_projectColumns($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $expression_columns);
		}
		if(isset($this->yystack[$this->yyidx + -1]->minor->grouping_columns)){
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + -1]->minor->grouping_columns, 
				qpAction_projectColumns::mergeColumnsNoDuplicates($this->yystack[$this->yyidx + -2]->minor->columns_projection, $expression_columns));
			$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
		} else {
			if($total_group){
				$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_groupTable($this->yystack[$this->yyidx + -1]->minor->last_relation_id, array(), $this->yystack[$this->yyidx + -2]->minor->columns_projection);
				$this->yystack[$this->yyidx + -1]->minor->last_relation_id = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1]->relation_id;
			}
		}
		if(isset($this->yystack[$this->yyidx + -2]->minor->columns_projection)){
			$indexes = Array();
			for($i=0;$i<count($this->yystack[$this->yyidx + -2]->minor->columns_projection);$i++)
				$indexes[] = $i;
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_selectColumnsByIndexes($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $indexes);
		}			
		if($this->yystack[$this->yyidx + -3]->minor=="DISTINCT")
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_distinctValues($this->yystack[$this->yyidx + -1]->minor->last_relation_id);
		elseif($this->yystack[$this->yyidx + -3]->minor=="ALL"){
		}			
		if(isset($this->yystack[$this->yyidx + 0]->minor))
			$this->yystack[$this->yyidx + -1]->minor->actions[] = new qpAction_limitRows($this->yystack[$this->yyidx + -1]->minor->last_relation_id, $this->yystack[$this->yyidx + 0]->minor->rows, $this->yystack[$this->yyidx + 0]->minor->offset);
		$yygotominor=$this->yystack[$this->yyidx + -1]->minor;
	}
#line 2943 "sql.php"
        break;
      case 229:
#line 495 "sql.y"
{$yygotominor = new stdClass();$yygotominor->columns_projection = NULL;$yygotominor->set_functions=NULL;}
#line 2948 "sql.php"
        break;
      case 230:
#line 496 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->columns_projection = Array();
		$yygotominor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;

	}
#line 2958 "sql.php"
        break;
      case 231:
#line 502 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor->columns_projection[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor=$this->yystack[$this->yyidx + -2]->minor;
	}
#line 2966 "sql.php"
        break;
      case 235:
#line 511 "sql.y"
{$yygotominor=$this->yystack[$this->yyidx + -1]->minor; $yygotominor->alias=$this->yystack[$this->yyidx + 0]->minor;}
#line 2971 "sql.php"
        break;
      case 238:
#line 516 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = $this->yystack[$this->yyidx + -4]->minor->actions;
		if(isset($this->yystack[$this->yyidx + -2]->minor)&&isset($this->yystack[$this->yyidx + -2]->minor->grouping_columns))
			$yygotominor->grouping_columns = $this->yystack[$this->yyidx + -2]->minor->grouping_columns;
		if(isset($this->yystack[$this->yyidx + -3]->minor)&&isset($this->yystack[$this->yyidx + -3]->minor->filter))
			$yygotominor->filter = $this->yystack[$this->yyidx + -3]->minor->filter;
	}
#line 2983 "sql.php"
        break;
      case 240:
#line 526 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=0;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2988 "sql.php"
        break;
      case 241:
#line 527 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + -2]->minor->value;}
#line 2993 "sql.php"
        break;
      case 242:
#line 528 "sql.y"
{$yygotominor = new stdClass();$yygotominor->offset=$this->yystack[$this->yyidx + -2]->minor->value;$yygotominor->rows=$this->yystack[$this->yyidx + 0]->minor->value;}
#line 2998 "sql.php"
        break;
      case 251:
#line 540 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor->actions;
	}
#line 3006 "sql.php"
        break;
      case 253:
#line 546 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + 0]->minor->value);}
#line 3011 "sql.php"
        break;
      case 254:
#line 547 "sql.y"
{$yygotominor = new stdClass();$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value);}
#line 3016 "sql.php"
        break;
      case 268:
#line 569 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->join_type = $this->yystack[$this->yyidx + -3]->minor;
	$b_last_relation = $this->yystack[$this->yyidx + -5]->minor->actions[count($this->yystack[$this->yyidx + -5]->minor->actions)-1];
	$e_last_relation = $this->yystack[$this->yyidx + -1]->minor->actions[count($this->yystack[$this->yyidx + -1]->minor->actions)-1];
	$yygotominor->actions = array_merge($this->yystack[$this->yyidx + -5]->minor->actions, $this->yystack[$this->yyidx + -1]->minor->actions);
	$yygotominor->actions[] = new qpAction_joinRelationsLeft($b_last_relation->relation_id, $e_last_relation->relation_id, $this->yystack[$this->yyidx + 0]->minor->filter);
}
#line 3028 "sql.php"
        break;
      case 280:
#line 592 "sql.y"
{$yygotominor = new stdClass();$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;}
#line 3033 "sql.php"
        break;
      case 286:
#line 602 "sql.y"
{
	$yygotominor = new stdClass();
	$yygotominor->filter=$this->yystack[$this->yyidx + 0]->minor;
}
#line 3041 "sql.php"
        break;
      case 287:
#line 607 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = NULL;}
#line 3046 "sql.php"
        break;
      case 288:
#line 608 "sql.y"
{$yygotominor = new stdClass();$yygotominor->grouping_columns = $this->yystack[$this->yyidx + 0]->minor;}
#line 3051 "sql.php"
        break;
      case 289:
#line 610 "sql.y"
{$yygotominor = Array(); $yygotominor[]=$this->yystack[$this->yyidx + 0]->minor;}
#line 3056 "sql.php"
        break;
      case 290:
#line 611 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;$yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3061 "sql.php"
        break;
      case 305:
      case 353:
#line 656 "sql.y"
{
		$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
		$yygotominor = $this->yystack[$this->yyidx + -2]->minor;
	}
#line 3070 "sql.php"
        break;
      case 316:
#line 677 "sql.y"
{
		$yygotominor = new filter_IsNullColumn($this->yystack[$this->yyidx + -2]->minor);
	}
#line 3077 "sql.php"
        break;
      case 317:
#line 680 "sql.y"
{
		$yygotominor = new filter_IsNotNullColumn($this->yystack[$this->yyidx + -3]->minor);
	}
#line 3084 "sql.php"
        break;
      case 330:
#line 726 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions=$this->yystack[$this->yyidx + 0]->minor;
	}
#line 3092 "sql.php"
        break;
      case 331:
#line 774 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->action = new qpAction_createTable($this->yystack[$this->yyidx + -3]->minor->value, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3100 "sql.php"
        break;
      case 336:
#line 944 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		foreach($this->yystack[$this->yyidx + -1]->minor as $c){
			$yygotominor->actions[] = new qpAction_dropTable($c->value);
		}
	}
#line 3111 "sql.php"
        break;
      case 340:
#line 956 "sql.y"
{$this->yystack[$this->yyidx + -2]->minor[] = $this->yystack[$this->yyidx + 0]->minor; $yygotominor=$this->yystack[$this->yyidx + -2]->minor;}
#line 3116 "sql.php"
        break;
      case 345:
#line 1044 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		if(is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_bulkDelete($this->yystack[$this->yyidx + -1]->minor->value);
		} else {
			$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -1]->minor->value);
			$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
			$yygotominor->actions[] = new qpAction_addressedDelete($last_relation_id);
		}
	}
#line 3132 "sql.php"
        break;
      case 346:
#line 1057 "sql.y"
{
		$yygotominor = NULL;
	}
#line 3139 "sql.php"
        break;
      case 348:
#line 1064 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions[] = new qpAction_insertRow($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor);
	}
#line 3147 "sql.php"
        break;
      case 349:
#line 1069 "sql.y"
{
		$yygotominor = Array();
		foreach($this->yystack[$this->yyidx + -2]->minor as $key => $column_name){
			$yygotominor[$column_name] = $this->yystack[$this->yyidx + 0]->minor[$key];
		}
	}
#line 3157 "sql.php"
        break;
      case 350:
#line 1075 "sql.y"
{print_r($this->yystack[$this->yyidx + 0]->minor);}
#line 3162 "sql.php"
        break;
      case 355:
#line 1096 "sql.y"
{$yygotominor = new stdClass();$yygotominor->column=$this->yystack[$this->yyidx + -2]->minor;$yygotominor->new_value=$this->yystack[$this->yyidx + 0]->minor;}
#line 3167 "sql.php"
        break;
      case 360:
#line 1104 "sql.y"
{
		$yygotominor = new stdClass();
		$yygotominor->actions = Array();
		$yygotominor->actions[]=new qpAction_loadTable($this->yystack[$this->yyidx + -3]->minor->value);
		$last_relation_id = $yygotominor->actions[count($yygotominor->actions)-1]->relation_id;

		if(!is_null($this->yystack[$this->yyidx + 0]->minor)){
			$yygotominor->actions[] = new qpAction_filterResults($last_relation_id, $this->yystack[$this->yyidx + 0]->minor);
		}
		$yygotominor->actions[]=new qpAction_updateValues($last_relation_id, $this->yystack[$this->yyidx + -1]->minor);
	}
#line 3182 "sql.php"
        break;
      case 363:
#line 1166 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("abs");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3187 "sql.php"
        break;
      case 364:
#line 1167 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("acos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3192 "sql.php"
        break;
      case 365:
#line 1168 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("asin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3197 "sql.php"
        break;
      case 366:
#line 1169 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("atan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3202 "sql.php"
        break;
      case 367:
      case 368:
#line 1170 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("atan2");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3208 "sql.php"
        break;
      case 369:
#line 1172 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ceil");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3213 "sql.php"
        break;
      case 370:
#line 1173 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cos");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3218 "sql.php"
        break;
      case 371:
#line 1174 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("cot");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3223 "sql.php"
        break;
      case 372:
#line 1175 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("crc32");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3228 "sql.php"
        break;
      case 373:
#line 1176 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("degrees");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3233 "sql.php"
        break;
      case 374:
#line 1177 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("exp");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3238 "sql.php"
        break;
      case 375:
#line 1178 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("floor");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3243 "sql.php"
        break;
      case 376:
#line 1179 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("format");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3248 "sql.php"
        break;
      case 377:
      case 378:
#line 1180 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("ln");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3254 "sql.php"
        break;
      case 379:
#line 1182 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3259 "sql.php"
        break;
      case 380:
#line 1183 "sql.y"
{$val2 = new filter_StaticIntnum(2);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val2;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3264 "sql.php"
        break;
      case 381:
#line 1184 "sql.y"
{$val10 = new filter_StaticIntnum(10);$yygotominor = new filter_BinaryMathFunction("log");$yygotominor->expression1=$val10;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3269 "sql.php"
        break;
      case 382:
#line 1185 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("mod");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3274 "sql.php"
        break;
      case 383:
#line 1186 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("pi");$yygotominor->expression=new filter_EmptyExpression();}
#line 3279 "sql.php"
        break;
      case 384:
#line 1187 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("pow");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3284 "sql.php"
        break;
      case 385:
#line 1188 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("radians");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3289 "sql.php"
        break;
      case 386:
#line 1189 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("round");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3294 "sql.php"
        break;
      case 387:
#line 1190 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("round");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3299 "sql.php"
        break;
      case 388:
#line 1191 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sign");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3304 "sql.php"
        break;
      case 389:
#line 1192 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sin");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3309 "sql.php"
        break;
      case 390:
#line 1193 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("sqrt");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3314 "sql.php"
        break;
      case 391:
#line 1194 "sql.y"
{$yygotominor = new filter_UnaryMathFunction("tan");$yygotominor->expression=$this->yystack[$this->yyidx + -1]->minor;}
#line 3319 "sql.php"
        break;
      case 392:
#line 1195 "sql.y"
{$yygotominor = new filter_BinaryMathFunction("truncate");$yygotominor->expression1=$this->yystack[$this->yyidx + -3]->minor;$yygotominor->expression2=$this->yystack[$this->yyidx + -1]->minor;}
#line 3324 "sql.php"
        break;
  };
  $yygoto = self::$yyRuleInfo[2*$yyruleno];
  $yysize = self::$yyRuleInfo[(2*$yyruleno)+1];

  $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;
  
  $this->yyidx -= $yysize;
  $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);
  if( $yyact < self::YYNSTATE ){
    $this->yy_shift($yyact, $yygoto, $yygotominor);
  }else if( $yyact == self::YYNSTATE + self::YYNRULE + 1 ){
    $this->yy_accept();
  }
}

/*
** The following code executes when the parse fails
*/
private function yy_parse_failed(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sFail!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
}

/*
** The following code executes when a syntax error first occurs.
*/
private function yy_syntax_error(
  $yymajor,                   /* The major type of the error token */
  $yyminor            /* The minor type of the error token */
){
}

/*
** The following is executed when the parser accepts
*/
private function yy_accept(
){
  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sAccept!\n",$this->yyTracePrompt);
  }
  while( $this->yyidx>=0 ) $this->yy_pop_parser_stack();
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 2 "sql.y"

      //echo "PARSING COMPLETE!!";
   
#line 3379 "sql.php"
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
function Parse(
  $yymajor,                 /* The major token code number */
  $yyminor = null           /* The value for the token */
){
  $yyact = 0;            /* The parser action. */
  $yyendofinput = 0;     /* True if we are at the end of input */
  $yyerrorhit = 0;   /* True if yymajor has invoked an error */

  /* (re)initialize the parser, if necessary */
  if( $this->yyidx<0 ){
    $this->yyidx = 0;
    $this->yyerrcnt = -1;
    $ent = new ParseyyStackEntry;
    $ent->stateno = 0;
    $ent->major = 0;
    $this->yystack = array( 0 => $ent );

    $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
    $this->YY_ACCEPT_ACTION  = self::YYNSTATE + self::YYNRULE + 1;
    $this->YY_ERROR_ACTION   = self::YYNSTATE + self::YYNRULE;
  }
  $yyendofinput = ($yymajor==0);

  if( $this->yyTraceFILE ){
    fprintf($this->yyTraceFILE,"%sInput %s\n",$this->yyTracePrompt,
      self::$yyTokenName[$yymajor]);
  }

  do{
    $yyact = $this->yy_find_shift_action($yymajor);
    if( $yyact<self::YYNSTATE ){
      $this->yy_shift($yyact,$yymajor,$yyminor);
      $this->yyerrcnt--;
      if( $yyendofinput && $this->yyidx>=0 ){
        $yymajor = 0;
      }else{
        $yymajor = self::YYNOCODE;
      }
    }else if( $yyact < self::YYNSTATE + self::YYNRULE ){
      $this->yy_reduce($yyact-self::YYNSTATE);
    }else if( $yyact == $this->YY_ERROR_ACTION ){
      if( $this->yyTraceFILE ){
        fprintf($this->yyTraceFILE,"%sSyntax Error!\n",$this->yyTracePrompt);
      }
if (self::YYERRORSYMBOL) {
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( $this->yyerrcnt<0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $yymx = $this->yystack[$this->yyidx]->major;
      if( $yymx==self::YYERRORSYMBOL || $yyerrorhit ){
        if( $this->yyTraceFILE ){
          fprintf($this->yyTraceFILE,"%sDiscard input token %s\n",
             $this->yyTracePrompt,self::$yyTokenName[$yymajor]);
        }
        $this->yy_destructor($yymajor,$yyminor);
        $yymajor = self::YYNOCODE;
      }else{
         while(
          $this->yyidx >= 0 &&
          $yymx != self::YYERRORSYMBOL &&
          ($yyact = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::YYERRORSYMBOL)) >= self::YYNSTATE
        ){
          $this->yy_pop_parser_stack();
        }
        if( $this->yyidx < 0 || $yymajor==0 ){
          $this->yy_destructor($yymajor,$yyminor);
          $this->yy_parse_failed();
          $yymajor = self::YYNOCODE;
        }else if( $yymx!=self::YYERRORSYMBOL ){
          $this->yy_shift($yyact,self::YYERRORSYMBOL,0);
        }
      }
      $this->yyerrcnt = 3;
      $yyerrorhit = 1;
} else {  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( $this->yyerrcnt<=0 ){
        $this->yy_syntax_error($yymajor, $yyminor);
      }
      $this->yyerrcnt = 3;
      $this->yy_destructor($yymajor,$yyminor);
      if( $yyendofinput ){
        $this->yy_parse_failed();
      }
      $yymajor = self::YYNOCODE;
}
    }else{
      $this->yy_accept();
      $yymajor = self::YYNOCODE;
    }
  }while( $yymajor!=self::YYNOCODE && $this->yyidx>=0 );
}

}
